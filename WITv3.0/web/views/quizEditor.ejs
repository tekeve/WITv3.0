<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Quiz Editor</title>
    <style>
        :root {
            --bg-primary: #1e293b; --bg-secondary: #334155; --bg-tertiary: #475569;
            --text-primary: #e2e8f0; --text-secondary: #94a3b8; --accent-blue: #38bdf8;
            --accent-green: #4ade80; --accent-red: #f87171; --border-color: #4a5568;
        }
        body { font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif; background-color: var(--bg-primary); color: var(--text-primary); margin: 0; padding: 2rem; }
        .container { max-width: 900px; margin: auto; }
        .panel { background-color: var(--bg-secondary); border-radius: 0.75rem; padding: 2rem; border: 1px solid var(--border-color); margin-bottom: 2rem; }
        .header { display: flex; justify-content: space-between; align-items: center; margin-bottom: 2rem; }
        h1 { margin: 0; color: #f8fafc; }
        h2 { border-bottom: 1px solid var(--border-color); padding-bottom: 0.75rem; margin-top: 0; font-size: 1.25rem; color: #f8fafc;}
        .form-grid { display: grid; grid-template-columns: 1fr 1fr; gap: 1.5rem; }
        .full-width { grid-column: 1 / -1; }
        .readonly { background-color: var(--bg-tertiary) !important; cursor: not-allowed; }
        .form-group { margin-bottom: 1rem; }
        label { display: block; margin-bottom: 0.5rem; font-size: 0.9rem; font-weight: 500; color: var(--text-secondary); }
        input[type="text"], input[type="number"], select, textarea { width: 100%; padding: 0.75rem; border-radius: 0.375rem; background-color: var(--bg-primary); border: 1px solid var(--border-color); color: var(--text-primary); font-size: 1rem; box-sizing: border-box; }
        textarea { resize: vertical; min-height: 80px; }
        button, .btn, a.btn { padding: 0.75rem 1.5rem; border: none; border-radius: 0.375rem; font-size: 1rem; font-weight: 600; cursor: pointer; transition: background-color 0.2s; text-decoration: none; display: inline-block; text-align: center; }
        .btn-primary { background-color: var(--accent-blue); color: #fff; } .btn-primary:hover { background-color: #0ea5e9; }
        .btn-danger { background-color: var(--accent-red); color: #fff; } .btn-danger:hover { background-color: #c53030; }
        .btn-secondary { background-color: var(--bg-tertiary); color: #fff; } .btn-secondary:hover { background-color: #55667d; }
        .btn-sm { padding: 0.4rem 0.8rem; font-size: 0.8rem; }
        
        .question-card { background-color: var(--bg-tertiary); padding: 1.5rem; border-radius: 0.5rem; margin-top: 1.5rem; }
        .question-header { display: flex; justify-content: space-between; align-items: center; margin-bottom: 1rem; }
        .answers-container { padding-left: 1.5rem; border-left: 2px solid var(--bg-secondary); }
        .answer-group { display: flex; align-items: center; gap: 1rem; margin-bottom: 0.75rem; }
        .answer-group input[type="radio"], .answer-group input[type="checkbox"] { width: 1.25rem; height: 1.25rem; flex-shrink: 0; }
        .answer-group input[type="text"] { flex-grow: 1; }
        .hidden-inputs { display: none; }

        .drag-handle { cursor: move; color: var(--text-secondary); font-size: 1.5rem; padding: 0 0.5rem; user-select: none; }
        .question-header-left { display: flex; align-items: center; }
        .question-card.dragging, .answer-group.dragging { opacity: 0.5; border: 2px dashed var(--accent-blue); background-color: #475569; }
    </style>
</head>
<body>
<div class="container">
    <div class="header">
        <h1><%= mode === 'edit' ? 'Edit Quiz' : 'Create New Quiz' %></h1>
        <a href="/quizmanager/<%= token %>" class="btn btn-secondary">Back to Dashboard</a>
    </div>

    <form id="quiz-form" action="/quizmanager/<%= token %>/save" method="POST">
        <% if (mode === 'edit') { %>
            <input type="hidden" name="quizId" value="<%= quizData.quiz_id %>">
        <% } %>

        <div class="panel">
            <h2>Quiz Settings</h2>
            <div class="form-grid">
                <div class="form-group">
                    <label for="quiz-name">Quiz Name</label>
                    <input type="text" id="quiz-name" name="quiz[name]" value="<%= quizData.name %>" required>
                </div>
                 <div class="form-group">
                    <label for="pass-mark">Pass Mark (%)</label>
                    <input type="number" name="quiz[pass_mark_percentage]" id="pass-mark" value="<%= quizData.pass_mark_percentage %>" min="0" max="100" required>
                </div>
                <div class="form-group full-width">
                    <label for="quiz-category">Quiz Category</label>
                    <select name="quiz[category]" id="quiz-category" required>
                        <option value="resident" <%= quizData.category === 'resident' ? 'selected' : '' %>>Resident Quiz</option>
                        <option value="training_fc" <%= quizData.category === 'training_fc' ? 'selected' : '' %>>Training FC Quiz</option>
                    </select>
                </div>
            </div>
        </div>

        <div id="questions-area">
            <!-- Questions will be dynamically inserted here -->
        </div>

        <button type="button" id="add-question-btn" class="btn btn-secondary">Add New Question</button>

        <div style="text-align: right; margin-top: 2rem;">
            <button type="submit" class="btn btn-primary">Save All Changes</button>
        </div>

        <div id="hidden-inputs" class="hidden-inputs">
            <!-- Inputs for deleted items will be added here -->
        </div>
    </form>
</div>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        const questionsArea = document.getElementById('questions-area');
        const addQuestionBtn = document.getElementById('add-question-btn');
        const hiddenInputsContainer = document.getElementById('hidden-inputs');
        const initialData = <%- JSON.stringify(quizData) %>;

        let questionCounter = 0;
        let answerCounter = 0;

        function addDeletedInput(name, value) {
            const input = document.createElement('input');
            input.type = 'hidden';
            input.name = name;
            input.value = value;
            hiddenInputsContainer.appendChild(input);
        }

        function createAnswerElement(questionKey, questionType = 'single', answer = {}) {
            const answerKey = answer.answer_id || `new_a_${answerCounter++}`;
            const isChecked = answer.is_correct ? 'checked' : '';
            const inputType = questionType === 'multiple' ? 'checkbox' : 'radio';
            const inputName = questionType === 'multiple' 
                ? `questions[${questionKey}][answers][${answerKey}][is_correct]`
                : `questions[${questionKey}][correct_answer]`;
            const inputValue = questionType === 'multiple' ? '1' : answerKey;

            const answerDiv = document.createElement('div');
            answerDiv.className = 'answer-group';
            answerDiv.dataset.answerKey = answerKey;
            
            answerDiv.innerHTML = `
                <span class="drag-handle" title="Drag to reorder" draggable="true">⠿</span>
                <input type="hidden" class="order-input" name="questions[${questionKey}][answers][${answerKey}][order_index]" value="${answer.order_index || 0}">
                <input type="${inputType}" name="${inputName}" value="${inputValue}" ${isChecked} ${inputType === 'radio' ? 'required' : ''} title="Mark as correct answer">
                <input type="text" name="questions[${questionKey}][answers][${answerKey}][text]" placeholder="Answer text..." value="${answer.answer_text || ''}" required>
                <button type="button" class="btn btn-danger btn-sm remove-answer-btn">&times;</button>
            `;

            answerDiv.querySelector('.remove-answer-btn').addEventListener('click', () => {
                if (answer.answer_id) {
                    addDeletedInput('deleted_answers', answer.answer_id);
                }
                answerDiv.remove();
            });

            return answerDiv;
        }

        function createQuestionElement(question = {}) {
            const questionKey = question.question_id || `new_q_${questionCounter++}`;
            const questionType = question.question_type || 'single';
            const card = document.createElement('div');
            card.className = 'panel question-card';
            card.dataset.questionKey = questionKey;
            
            card.innerHTML = `
                <div class="question-header">
                    <div class="question-header-left">
                        <span class="drag-handle" title="Drag to reorder" draggable="true">⠿</span>
                        <h2>Question</h2>
                    </div>
                    <button type="button" class="btn btn-danger remove-question-btn">Delete Question</button>
                </div>
                <input type="hidden" class="order-input" name="questions[${questionKey}][order_index]" value="${question.order_index || 0}">
                <div class="form-group">
                    <label>Question Text</label>
                    <textarea name="questions[${questionKey}][text]" required>${question.question_text || ''}</textarea>
                </div>
                <div class="form-group">
                    <label>Question Type</label>
                    <select name="questions[${questionKey}][type]" class="question-type-select">
                        <option value="single" ${questionType !== 'multiple' ? 'selected' : ''}>Single Answer</option>
                        <option value="multiple" ${questionType === 'multiple' ? 'selected' : ''}>Multiple Answers</option>
                    </select>
                </div>
                <div class="answers-container">
                    <h3>Answers</h3>
                    <div class="answers-list"></div>
                    <button type="button" class="btn btn-secondary btn-sm add-answer-btn" style="margin-top: 1rem;">Add Answer</button>
                </div>
            `;

            const answersList = card.querySelector('.answers-list');
            
            if (question.answers && question.answers.length > 0) {
                question.answers.forEach(answer => {
                    answersList.appendChild(createAnswerElement(questionKey, questionType, answer));
                });
            } else {
                answersList.appendChild(createAnswerElement(questionKey, questionType));
                answersList.appendChild(createAnswerElement(questionKey, questionType));
            }

            card.querySelector('.add-answer-btn').addEventListener('click', () => {
                const currentType = card.querySelector('.question-type-select').value;
                answersList.appendChild(createAnswerElement(questionKey, currentType));
            });
            
            card.querySelector('.question-type-select').addEventListener('change', (e) => {
                const newType = e.target.value;
                const currentAnswers = [];
                answersList.querySelectorAll('.answer-group').forEach(ag => {
                    currentAnswers.push({
                        answer_id: ag.dataset.answerKey.startsWith('new_') ? undefined : ag.dataset.answerKey,
                        answer_text: ag.querySelector('input[type="text"]').value,
                        is_correct: ag.querySelector('input[type="radio"], input[type="checkbox"]').checked
                    });
                });
                answersList.innerHTML = '';
                currentAnswers.forEach(answer => {
                    answersList.appendChild(createAnswerElement(questionKey, newType, answer));
                });
                updateOrderInputs();
            });

            card.querySelector('.remove-question-btn').addEventListener('click', () => {
                if (confirm('Are you sure you want to delete this entire question and all its answers?')) {
                    if (question.question_id) {
                        addDeletedInput('deleted_questions', question.question_id);
                    }
                    card.remove();
                }
            });

            return card;
        }
        
        function updateOrderInputs() {
            const questionCards = questionsArea.querySelectorAll('.question-card');
            questionCards.forEach((card, index) => {
                const orderInput = card.querySelector('input[name*="[order_index]"]');
                if (orderInput) orderInput.value = index;
                
                const answerGroups = card.querySelectorAll('.answer-group');
                answerGroups.forEach((answer, answerIndex) => {
                    const answerOrderInput = answer.querySelector('input[name*="[order_index]"]');
                    if (answerOrderInput) answerOrderInput.value = answerIndex;
                });
            });
        }

        function getDragAfterElement(container, y) {
            const draggableElements = [...container.querySelectorAll(':scope > .question-card:not(.dragging), :scope > .answer-group:not(.dragging)')];
            return draggableElements.reduce((closest, child) => {
                const box = child.getBoundingClientRect();
                const offset = y - box.top - box.height / 2;
                if (offset < 0 && offset > closest.offset) {
                    return { offset: offset, element: child };
                } else {
                    return closest;
                }
            }, { offset: Number.NEGATIVE_INFINITY }).element;
        }

        questionsArea.addEventListener('dragstart', e => {
            if (e.target.classList.contains('drag-handle')) {
                const draggableItem = e.target.closest('.question-card, .answer-group');
                if (draggableItem) {
                    setTimeout(() => {
                        draggableItem.classList.add('dragging');
                    }, 0);
                }
            }
        });

        questionsArea.addEventListener('dragend', e => {
            const dragging = document.querySelector('.dragging');
            if (dragging) {
                dragging.classList.remove('dragging');
                updateOrderInputs();
            }
        });

        questionsArea.addEventListener('dragover', e => {
            const draggingElement = document.querySelector('.dragging');
            if (!draggingElement) return;
            
            const isQuestion = draggingElement.classList.contains('question-card');
            const container = isQuestion ? questionsArea : e.target.closest('.answers-list');
            
            if (!container || !container.contains(draggingElement)) return;
            
            e.preventDefault();
            const afterElement = getDragAfterElement(container, e.clientY);
            
            if (afterElement == null) {
                container.appendChild(draggingElement);
            } else {
                container.insertBefore(draggingElement, afterElement);
            }
        });

        addQuestionBtn.addEventListener('click', () => {
            questionsArea.appendChild(createQuestionElement());
            updateOrderInputs();
        });
        
        if (initialData.questions && initialData.questions.length > 0) {
            initialData.questions.forEach(q => {
                questionsArea.appendChild(createQuestionElement(q));
            });
        }

        updateOrderInputs();
    });
</script>
</body>
</html>

