<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Web Table Editor: <%= tableName %></title>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
            background-color: #1e293b;
            color: #e2e8f0;
            margin: 0;
            padding: 2rem;
        }
        .container {
            width: 100%;
            max-width: 1600px;
            margin: 0 auto;
            padding: 2.5rem;
            border-radius: 0.75rem;
            background-color: #334155;
            box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
            border: 1px solid #475569;
        }
        h1 {
            font-size: 1.875rem;
            font-weight: 600;
            text-align: center;
            margin-bottom: 2rem;
            color: #f8fafc;
        }
        .table-wrapper {
            overflow-x: auto;
        }
        table {
            width: 100%;
            border-collapse: collapse;
            white-space: nowrap;
        }
        th, td {
            padding: 0.75rem 1rem;
            border: 1px solid #475569;
            text-align: left;
            vertical-align: top;
        }
        th {
            background-color: #475569;
            font-weight: 600;
            color: #f1f5f9;
        }
        tr.is-deleted {
            text-decoration: line-through;
            opacity: 0.5;
        }
        tr.is-deleted input, tr.is-deleted textarea {
             pointer-events: none;
        }
        input, textarea {
            width: 100%;
            padding: 0.5rem 0.75rem;
            border-radius: 0.375rem;
            background-color: #1e293b;
            border: 1px solid #475569;
            color: #e2e8f0;
            font-size: 0.875rem;
            box-sizing: border-box;
            font-family: inherit;
            min-width: 200px;
        }
        textarea {
            min-height: 80px;
            white-space: pre-wrap;
            resize: vertical;
        }
        input.readonly, textarea.readonly {
            background-color: #334155;
            cursor: not-allowed;
            border-color: #475569;
        }
        .actions {
            display: flex;
            gap: 1rem;
            justify-content: flex-end;
            margin-top: 2rem;
        }
        button {
            padding: 0.75rem 1.5rem;
            border: none;
            border-radius: 0.375rem;
            color: #ffffff;
            font-size: 1rem;
            font-weight: 600;
            cursor: pointer;
            transition: background-color 0.2s ease-in-out;
        }
        .save-btn { background-color: #22c55e; }
        .save-btn:hover { background-color: #16a34a; }
        
        .add-row-btn { background-color: #0ea5e9; }
        .add-row-btn:hover { background-color: #38bdf8; }
        
        .delete-btn { background-color: #ef4444; padding: 0.5rem 1rem; font-size: 0.875rem; }
        .delete-btn:hover { background-color: #dc2626; }

        .undo-btn { background-color: #f97316; padding: 0.5rem 1rem; font-size: 0.875rem; }
        .undo-btn:hover { background-color: #ea580c; }
    </style>
</head>
<body>
    <div class="container">
        <h1>Editing Table: <strong><%= tableName %></strong></h1>
        <form id="edit-form" action="/webedit/<%= token %>" method="POST">
            <div class="table-wrapper">
                <table>
                    <thead>
                        <tr>
                            <% headers.forEach(header => { %>
                                <th><%= header %></th>
                            <% }); %>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody id="table-body">
                        <% tableData.forEach(row => { %>
                            <tr>
                                <% headers.forEach(header => { %>
                                    <td>
                                        <% const isPrimaryKey = header === primaryKey; %>
                                        <% let value = row[header]; %>
                                        <% let isJson = false; %>
                                        
                                        <% if (typeof value === 'object' && value !== null) { 
                                            value = JSON.stringify(value, null, 2);
                                            isJson = true;
                                        } else if (typeof value === 'string' && (value.startsWith('[') || value.startsWith('{'))) {
                                            try {
                                                const parsed = JSON.parse(value);
                                                value = JSON.stringify(parsed, null, 2);
                                                isJson = true;
                                            } catch (e) { /* Not valid JSON, treat as string */ }
                                        } %>
                                        <% if (value === null) { value = ''; } %>
                                        
                                        <% if (isJson) { %>
                                            <textarea 
                                                name="rows[<%= row[primaryKey] %>][<%= header %>]"
                                                <%= isPrimaryKey ? 'readonly' : '' %>
                                                class="<%= isPrimaryKey ? 'readonly' : '' %>"
                                            ><%= value %></textarea>
                                        <% } else { %>
                                            <input 
                                                type="text" 
                                                name="rows[<%= row[primaryKey] %>][<%= header %>]" 
                                                value="<%= value %>"
                                                <%= isPrimaryKey ? 'readonly' : '' %>
                                                class="<%= isPrimaryKey ? 'readonly' : '' %>"
                                            >
                                        <% } %>
                                    </td>
                                <% }); %>
                                <td>
                                    <button type="button" class="delete-btn" data-pk="<%= row[primaryKey] %>">Delete</button>
                                </td>
                            </tr>
                        <% }); %>
                    </tbody>
                </table>
            </div>
             <div class="actions">
                <button type="button" class="add-row-btn" id="add-row-btn">Add New Row</button>
                <button type="submit" class="save-btn">Save Changes</button>
            </div>
        </form>
    </div>

    <!-- Hidden template for new rows -->
    <table style="display: none;">
        <tr id="new-row-template">
            <% headers.forEach(header => { %>
                <td>
                    <% const isPrimaryKey = header === primaryKey; %>
                     <textarea name="newRows[__INDEX__][<%= header %>]" <%= isPrimaryKey ? '' : '' %>></textarea>
                </td>
            <% }); %>
            <td>
                <button type="button" class="delete-btn">Remove</button>
            </td>
        </tr>
    </table>

    <script>
        const form = document.getElementById('edit-form');
        const tableBody = document.getElementById('table-body');
        const addRowBtn = document.getElementById('add-row-btn');
        const newRowTemplate = document.getElementById('new-row-template');
        let newRowCounter = 0;

        // --- ADD NEW ROW LOGIC ---
        addRowBtn.addEventListener('click', () => {
            const newRow = newRowTemplate.cloneNode(true);
            newRow.removeAttribute('id');
            
            // Update the name attribute for all inputs/textareas in the new row
            newRow.querySelectorAll('textarea, input').forEach(input => {
                input.name = input.name.replace('__INDEX__', newRowCounter);
            });

            tableBody.appendChild(newRow);
            newRowCounter++;
        });

        // --- DELETE/UNDO LOGIC ---
        tableBody.addEventListener('click', (e) => {
            const target = e.target;

            // Handle deleting a newly added (unsaved) row
            if (target.classList.contains('delete-btn') && !target.dataset.pk) {
                target.closest('tr').remove();
                return;
            }

            // Handle deleting an existing row
            if (target.classList.contains('delete-btn')) {
                const row = target.closest('tr');
                const pk = target.dataset.pk;

                row.classList.add('is-deleted');
                
                const hiddenInput = document.createElement('input');
                hiddenInput.type = 'hidden';
                hiddenInput.name = 'deletedRows[]';
                hiddenInput.value = pk;
                hiddenInput.id = `delete-marker-${pk}`;
                form.appendChild(hiddenInput);

                target.textContent = 'Undo';
                target.classList.remove('delete-btn');
                target.classList.add('undo-btn');
            }
            // Handle undoing a deletion
            else if (target.classList.contains('undo-btn')) {
                const row = target.closest('tr');
                const pk = target.dataset.pk;

                row.classList.remove('is-deleted');

                const hiddenInput = document.getElementById(`delete-marker-${pk}`);
                if (hiddenInput) {
                    hiddenInput.remove();
                }

                target.textContent = 'Delete';
                target.classList.remove('undo-btn');
                target.classList.add('delete-btn');
            }
        });
    </script>
</body>
</html>
