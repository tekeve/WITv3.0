<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Logistics Sign-off Form</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        :root {
            --bg-primary: #1e293b;
            --bg-secondary: #334155;
            --bg-tertiary: #475569;
            --bg-card: #0f172a;
            --border-color: #475569;
            --text-primary: #e2e8f0;
            --text-secondary: #94a3b8;
            --accent-green: #22c55e;
            --accent-red: #ef4444;
            --accent-blue: #3b82f6;
            --accent-orange: #f59e0b;
            --accent-yellow: #f59e0b;
        }
        *, *::before, *::after { box-sizing: border-box; }
        body {
            font-family: 'Inter', sans-serif;
            background-color: var(--bg-primary);
            color: var(--text-primary);
            margin: 0;
            padding: 2rem;
        }
        .container {
            width: 100%;
            max-width: 1400px;
            margin: 0 auto;
            display: grid;
            grid-template-columns: 1fr;
            gap: 1.5rem;
        }
        @media (min-width: 1024px) {
            .container {
                grid-template-columns: 1fr 1fr;
                grid-template-areas:
                    "header header"
                    "form form"
                    "inprogress trusted";
            }
            #main-header { grid-area: header; }
            #add-pilot-panel { grid-area: form; }
            #in-progress-panel { grid-area: inprogress; }
            #trusted-panel { grid-area: trusted; }
        }
        .panel {
            background-color: var(--bg-secondary);
            border-radius: 0.75rem;
            padding: 1.5rem;
            border: 1px solid var(--border-color);
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
            display: flex;
            flex-direction: column;
        }
        h1, h2 { color: #f8fafc; text-align: center; }
        h1 { font-size: 1.75rem; font-weight: 700; margin: 0 0 2rem 0; }
        h2 { 
            font-size: 1.125rem; font-weight: 600; margin: 0 0 1.5rem 0; 
            border-bottom: 1px solid var(--border-color); padding-bottom: 0.75rem; text-align: left;
            display: flex; justify-content: space-between; align-items: center;
        }
        
        .panel-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1.5rem;
            border-bottom: 1px solid var(--border-color);
            padding-bottom: 0.75rem;
        }
        
        .panel-title {
            font-size: 1.125rem;
            font-weight: 600;
            color: #f8fafc;
            margin: 0;
        }
        .form-group { margin-bottom: 1rem; position: relative; }
        label { display: block; margin-bottom: 0.5rem; font-size: 0.875rem; font-weight: 500; color: var(--text-secondary); }
        input[type="text"], textarea {
            width: 100%;
            padding: 0.65rem 0.85rem;
            border-radius: 0.375rem;
            background-color: var(--bg-primary);
            border: 1px solid var(--border-color);
            color: var(--text-primary);
            font-size: 0.875rem;
            transition: border-color 0.2s, box-shadow 0.2s;
        }
        input:focus, textarea:focus {
            outline: none;
            border-color: var(--accent-blue);
            box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.2);
        }
        textarea { resize: none; min-height: 60px; }
        
        button {
            padding: 0.5rem 1rem;
            border: none;
            border-radius: 0.375rem;
            font-size: 0.875rem;
            font-weight: 600;
            cursor: pointer;
            transition: background-color 0.2s;
            display: inline-flex;
            align-items: center;
            justify-content: center;
        }
        button:disabled { background-color: #4b5563; color: #9ca3af; cursor: not-allowed; }
        .btn-green { background-color: var(--accent-green); color: white; }
        .btn-red { background-color: var(--accent-red); color: white; }
        .btn-blue { background-color: var(--accent-blue); color: white; }
        .btn-green:hover:not(:disabled) { background-color: #16a34a; }
        .btn-red:hover:not(:disabled) { background-color: #b91c1c; }
        .btn-blue:hover:not(:disabled) { background-color: #2563eb; }
        
        .search-bar { display: flex; gap: 0.5rem; margin-bottom: 1rem; }
        .search-bar input { flex-grow: 1; }
        .pilot-list { flex-grow: 1; overflow-y: auto; padding-right: 0.5rem; margin: 0 -0.5rem; min-height: 40vh; }
        
        .pilot-card {
            background-color: var(--bg-card);
            border-radius: 0.375rem;
            margin-bottom: 0.75rem;
            position: relative;
            border: 1px solid var(--bg-tertiary);
            overflow: hidden;
        }
        .status-bar {
            position: absolute;
            left: 0;
            top: 0;
            bottom: 0;
            width: 4px;
        }
        .status-bar.status-inprogress { background-color: var(--accent-blue); }
        .status-bar.status-trusted { background-color: var(--accent-green); }
        .status-bar.status-demerit { background-color: var(--accent-orange); }

        .pilot-card-content { padding: 1rem; padding-left: 1.25rem; }
        .pilot-card-main { display: flex; justify-content: space-between; align-items: flex-start; gap: 1rem; }
        .pilot-info { flex-grow: 1; min-width: 0; }
        .pilot-name { font-size: 1rem; font-weight: 600; color: #f8fafc; }
        
        .latest-comment-wrapper { display: flex; align-items: flex-start; gap: 0.5rem; margin-top: 0.5rem; }
        .comment-bar { flex-shrink: 0; width: 3px; border-radius: 3px; align-self: stretch; }
        .comment-bar.status-inprogress { background-color: var(--accent-blue); }
        .comment-bar.status-demerit { background-color: var(--accent-orange); }
        .latest-comment { font-size: 0.8rem; color: var(--text-secondary); white-space: pre-wrap; word-break: break-word; line-height: 1.4; }
        .latest-comment strong { color: #cbd5e1; }

        .pilot-card-actions { flex-shrink: 0; }
        
        .history-toggle-btn {
            background: none; border: none; cursor: pointer; padding: 0.25rem;
            display: flex; align-items: center; color: var(--text-secondary); margin-top: 0.75rem;
        }
        .history-toggle-btn svg { width: 16px; height: 16px; transition: transform 0.2s ease-in-out; }
        .history-toggle-btn.expanded svg { transform: rotate(180deg); }
        
        .signoff-history {
            display: none; margin-top: 0.75rem; padding-top: 0.75rem;
            border-top: 1px solid var(--bg-tertiary); font-size: 0.8rem;
            list-style: none; padding-left: 0;
        }
        .signoff-history li { margin-bottom: 0.25rem; color: var(--text-secondary); }
        .signoff-history strong { color: var(--text-primary); }

        .modal-overlay {
            position: fixed; top: 0; left: 0; width: 100%; height: 100%;
            background-color: rgba(0,0,0,0.7); display: none;
            justify-content: center; align-items: center; z-index: 1000;
        }
        .modal {
            background-color: var(--bg-secondary); padding: 2rem;
            border-radius: 0.75rem; width: 90%; max-width: 500px;
        }
        .modal h3 { margin: 0 0 1.5rem 0; text-align: center; }
        .modal .form-group { position: relative; }
        .modal textarea { min-height: 80px; resize: none; }
        .modal-actions { display: flex; justify-content: flex-end; gap: 0.75rem; margin-top: 1.5rem; }
        
        .char-counter {
            position: absolute; bottom: 8px; right: 12px;
            font-size: 0.75rem; color: var(--text-secondary); pointer-events: none;
        }
        
        .toast {
            position: fixed; top: 1.5rem; right: 1.5rem;
            background-color: var(--bg-tertiary); color: var(--text-primary);
            padding: 1rem 1.5rem; border-radius: 0.5rem;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1); z-index: 1001;
            opacity: 0; transform: translateY(-20px); transition: opacity 0.3s, transform 0.3s;
        }
        .toast.show { opacity: 1; transform: translateY(0); }
        .toast.success { background-color: var(--accent-green); color: white; }
        .toast.error { background-color: var(--accent-red); color: white; }
        
        .pagination { 
            display: flex; 
            align-items: center; 
            gap: 1rem;
            font-size: 0.875rem; 
            color: var(--text-secondary);
        }
        
        .pagination-info {
            font-size: 0.75rem;
            color: var(--text-secondary);
            white-space: nowrap;
        }
        
        .pagination-buttons {
            display: flex;
            gap: 0.5rem;
        }
        
        .pagination-buttons button {
            padding: 0.25rem 0.5rem;
            font-size: 0.75rem;
            min-width: auto;
        }
        
        .validation-status { font-size: 0.8rem; font-weight: 500; margin-top: 0.5rem; min-height: 1.2em; }
        .validation-status.valid { color: var(--accent-green); }
        .validation-status.invalid { color: var(--accent-red); }
        .validation-status.checking { color: var(--accent-yellow); }
    </style>
</head>
<body>
    <div class="container">
        <h1 id="main-header">Logistics Sign-off Management</h1>

        <div class="panel" id="add-pilot-panel">
            <h2>Add New Pilot Sign-off</h2>
            <div class="form-group">
                <label for="new-pilot-name">Pilot Name</label>
                <input type="text" id="new-pilot-name" placeholder="Enter pilot's exact in-game name" autocomplete="off">
                <div class="validation-status" id="new-pilot-status"></div>
            </div>
            <div class="form-group">
                <label for="new-pilot-comment">Comment (Optional)</label>
                <textarea id="new-pilot-comment" maxlength="500"></textarea>
                 <div class="char-counter"></div>
            </div>
            <button class="btn-green" id="add-new-pilot-btn" disabled>Add First Sign-off</button>
        </div>

        <div class="panel" id="in-progress-panel">
            <div class="panel-header">
                <h3 class="panel-title">In-Progress Pilots</h3>
                <div class="pagination" id="pagination-in-progress"></div>
            </div>
            <div class="search-bar">
                <input type="text" id="search-in-progress" placeholder="Search in-progress...">
            </div>
            <div id="in-progress-list" class="pilot-list"></div>
        </div>

        <div class="panel" id="trusted-panel">
            <div class="panel-header">
                <h3 class="panel-title">Trusted Pilots</h3>
                <div class="pagination" id="pagination-trusted"></div>
            </div>
            <div class="search-bar">
                <input type="text" id="search-trusted" placeholder="Search trusted...">
            </div>
            <div id="trusted-list" class="pilot-list"></div>
        </div>
    </div>
    
    <div id="toast" class="toast"></div>

    <!-- Reusable Modal -->
    <div class="modal-overlay" id="action-modal">
        <div class="modal">
            <h3 id="modal-title"></h3>
            <div class="form-group">
                <label for="modal-comment">Comment</label>
                <textarea id="modal-comment" maxlength="500"></textarea>
                <div class="char-counter"></div>
            </div>
            <div class="modal-actions">
                <button id="modal-cancel-btn">Cancel</button>
                <button id="modal-confirm-btn">Confirm</button>
            </div>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            console.log('=== DOM CONTENT LOADED ===');
            
            // Check if all required DOM elements exist
            const requiredElements = [
                'in-progress-list',
                'trusted-list', 
                'pagination-in-progress',
                'pagination-trusted',
                'new-pilot-name',
                'new-pilot-status',
                'add-new-pilot-btn',
                'new-pilot-comment',
                'search-in-progress',
                'search-trusted'
            ];
            
            console.log('=== DOM ELEMENTS CHECK ===');
            const missingElements = [];
            requiredElements.forEach(id => {
                const element = document.getElementById(id);
                if (element) {
                    console.log(`✅ Found: ${id}`);
                } else {
                    console.error(`❌ Missing: ${id}`);
                    missingElements.push(id);
                }
            });
            
            if (missingElements.length > 0) {
                console.error('Missing required DOM elements:', missingElements);
                return;
            }
            
            console.log('✅ All required DOM elements found!');
            // --- STATE INITIALIZATION ---
            const state = {
                token: "<%= token %>",
                commanderName: "<%= commanderName %>",
                inProgress: <%- JSON.stringify(inProgressData) %>,
                trusted: <%- JSON.stringify(trustedData) %>,
                validationTimeout: null,
                searchTimeout: null,
                currentModalAction: null
            };

            // Ensure search and page properties exist
            if (!state.inProgress) state.inProgress = { pilots: [], total: 0, page: 1, limit: 10, search: '' };
            if (!state.trusted) state.trusted = { pilots: [], total: 0, page: 1, limit: 10, search: '' };
            
            state.inProgress.search = state.inProgress.search || '';
            state.inProgress.page = state.inProgress.page || 1;
            state.inProgress.limit = state.inProgress.limit || 10; // Ensure limit defaults to 10
            state.trusted.search = state.trusted.search || '';
            state.trusted.page = state.trusted.page || 1;
            state.trusted.limit = state.trusted.limit || 10; // Ensure limit defaults to 10

            console.log('=== STATE INITIALIZATION ===');
            console.log('Raw state from server:', state);
            console.log('In-progress pilots count:', state.inProgress?.pilots?.length || 0);
            console.log('Trusted pilots count:', state.trusted?.pilots?.length || 0);
            console.log('In-progress pilots data:', state.inProgress?.pilots);
            console.log('Trusted pilots data:', state.trusted?.pilots);

            const newPilotNameInput = document.getElementById('new-pilot-name');
            const newPilotStatus = document.getElementById('new-pilot-status');
            const addNewPilotBtn = document.getElementById('add-new-pilot-btn');
            const newPilotComment = document.getElementById('new-pilot-comment');
            const searchInProgressInput = document.getElementById('search-in-progress');
            const searchTrustedInput = document.getElementById('search-trusted');
            const modalOverlay = document.getElementById('action-modal');
            const modalTitle = document.getElementById('modal-title');
            const modalComment = document.getElementById('modal-comment');
            const modalConfirmBtn = document.getElementById('modal-confirm-btn');
            const modalCancelBtn = document.getElementById('modal-cancel-btn');

            // --- GENERAL HELPERS ---
            function showToast(message, type = 'info') {
                const toast = document.getElementById('toast');
                toast.textContent = message;
                toast.className = `toast show ${type}`;
                setTimeout(() => { toast.className = 'toast'; }, 3000);
            }
            
            function setupCharCounter(textarea) {
                const counter = textarea.nextElementSibling;
                if (!counter || !counter.classList.contains('char-counter')) return;
                const maxLength = textarea.maxLength;
                const update = () => { counter.textContent = `${maxLength - textarea.value.length}`; };
                textarea.addEventListener('input', update);
                update();
            }

            function formatDate(isoString) {
                if (!isoString) return 'N/A';
                const date = new Date(isoString);
                const options = { year: 'numeric', month: 'short', day: 'numeric' };
                return date.toLocaleDateString('en-GB', options);
            }

            async function apiCall(endpoint, body) {
                try {
                    const response = await fetch(endpoint, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(body)
                    });
                    const data = await response.json();
                    if (!response.ok) { 
                        throw new Error(data.message || `HTTP error! Status: ${response.status}`); 
                    }
                    return data;
                } catch (error) {
                    showToast(error.message, 'error');
                    console.error('API Call Failed:', error);
                    return { success: false, message: error.message };
                }
            }
            
            // --- MODAL HANDLING ---
            function openModal(title, isDemerit, confirmAction) {
                modalTitle.textContent = title;
                modalComment.value = '';
                modalComment.placeholder = isDemerit ? 'Enter REQUIRED demerit comment...' : 'Add optional comment...';
                modalConfirmBtn.className = isDemerit ? 'btn-red' : 'btn-blue';
                modalConfirmBtn.textContent = isDemerit ? 'Add Demerit' : 'Add Sign-off';
                
                state.currentModalAction = async () => {
                    const comment = modalComment.value.trim();
                    if (isDemerit && !comment) {
                        showToast('A comment is required for a demerit.', 'error');
                        return;
                    }
                    modalConfirmBtn.disabled = true;
                    const result = await confirmAction(comment); 
                    if (result && result.success) {
                        closeModal();
                    } else {
                        modalConfirmBtn.disabled = false;
                    }
                };
                
                modalOverlay.style.display = 'flex';
                setupCharCounter(modalComment);
                modalComment.focus();
            }

            function closeModal() {
                modalOverlay.style.display = 'none';
                state.currentModalAction = null;
                modalConfirmBtn.disabled = false;
            }

            modalConfirmBtn.addEventListener('click', () => {
                if (state.currentModalAction) state.currentModalAction();
            });
            modalCancelBtn.addEventListener('click', closeModal);
            modalOverlay.addEventListener('click', (e) => { if (e.target === modalOverlay) closeModal(); });
            
            // --- DATA & RENDERING ---
            async function fetchData(listToUpdate) {
                const body = {
                    searchInProgress: state.inProgress.search,
                    searchTrusted: state.trusted.search,
                    pageInProgress: state.inProgress.page,
                    pageTrusted: state.trusted.page,
                };
                
                console.log('Fetching data with body:', body);
                
                const result = await apiCall(`/logi/data/${state.token}`, body);
                if (result && result.success) {
                    console.log('Received data:', result.data);
                    
                    if (listToUpdate === 'inProgress' || listToUpdate === 'all') {
                        console.log('Updating in-progress state. Old:', state.inProgress.pilots?.length, 'New:', result.data.inProgress?.pilots?.length);
                        state.inProgress = { ...state.inProgress, ...result.data.inProgress };
                        console.log('State after update:', state.inProgress);
                        renderInProgressList();
                    }
                    if (listToUpdate === 'trusted' || listToUpdate === 'all') {
                        console.log('Updating trusted state. Old:', state.trusted.pilots?.length, 'New:', result.data.trusted?.pilots?.length);
                        state.trusted = { ...state.trusted, ...result.data.trusted };
                        console.log('State after update:', state.trusted);
                        renderTrustedList();
                    }
                } else {
                    console.error('Failed to fetch data:', result?.message || 'Unknown error');
                }
            }

            function renderInProgressList() {
                console.log('=== RENDERING IN-PROGRESS LIST ===');
                console.log('Current state.inProgress:', state.inProgress);
                console.log('Pilots array:', state.inProgress?.pilots);
                
                const listEl = document.getElementById('in-progress-list');
                if (!listEl) {
                    console.error('Could not find in-progress-list element!');
                    return;
                }
                
                // Clear existing content
                listEl.innerHTML = '';
                
                if (!state.inProgress || !state.inProgress.pilots || state.inProgress.pilots.length === 0) {
                    console.log('No in-progress pilots to display');
                    listEl.innerHTML = '<p style="text-align:center; color: var(--text-secondary);">No pilots found.</p>';
                } else {
                    console.log(`Rendering ${state.inProgress.pilots.length} in-progress pilots`);
                    state.inProgress.pilots.forEach((pilot, index) => {
                        console.log(`Creating element for pilot ${index + 1}:`, pilot.pilot_name);
                        const element = createInProgressPilotElement(pilot);
                        listEl.appendChild(element);
                    });
                }
                renderPagination('inProgress');
                console.log('=== IN-PROGRESS RENDERING COMPLETE ===');
            }
            
            function renderTrustedList() {
                console.log('=== RENDERING TRUSTED LIST ===');
                console.log('Current state.trusted:', state.trusted);
                console.log('Pilots array:', state.trusted?.pilots);
                
                const listEl = document.getElementById('trusted-list');
                if (!listEl) {
                    console.error('Could not find trusted-list element!');
                    return;
                }
                
                // Clear existing content
                listEl.innerHTML = '';
                
                if (!state.trusted || !state.trusted.pilots || state.trusted.pilots.length === 0) {
                    console.log('No trusted pilots to display');
                    listEl.innerHTML = '<p style="text-align:center; color: var(--text-secondary);">No pilots found.</p>';
                } else {
                    console.log(`Rendering ${state.trusted.pilots.length} trusted pilots`);
                    state.trusted.pilots.forEach((pilot, index) => {
                        console.log(`Creating element for pilot ${index + 1}:`, pilot.pilot_name);
                        const element = createTrustedPilotElement(pilot);
                        listEl.appendChild(element);
                    });
                }
                renderPagination('trusted');
                console.log('=== TRUSTED RENDERING COMPLETE ===');
            }
            
            function renderPagination(listType) {
                const data = state[listType];
                if (!data) {
                    console.warn(`No data for listType: ${listType}`);
                    return;
                }
                
                const containerId = `pagination-${listType === 'inProgress' ? 'in-progress' : 'trusted'}`;
                const container = document.getElementById(containerId);
                
                console.log(`Looking for pagination container: ${containerId}`);
                console.log('Container found:', container);
                
                if (!container) {
                    console.error(`Pagination container not found: ${containerId}`);
                    return;
                }
                
                container.innerHTML = '';
                
                if (data.total <= data.limit) {
                    console.log('Not enough items for pagination');
                    // Still show the count even if no pagination needed
                    if (data.total > 0) {
                        const pageInfo = document.createElement('span');
                        pageInfo.className = 'pagination-info';
                        pageInfo.textContent = `${data.total} pilot${data.total !== 1 ? 's' : ''}`;
                        container.appendChild(pageInfo);
                    }
                    return;
                }
                
                const pageInfo = document.createElement('span');
                pageInfo.className = 'pagination-info';
                const start = data.total > 0 ? Math.min((data.page - 1) * data.limit + 1, data.total) : 0;
                const end = Math.min(data.page * data.limit, data.total);
                pageInfo.textContent = `${start}-${end} of ${data.total}`;
                
                const buttonsContainer = document.createElement('div');
                buttonsContainer.className = 'pagination-buttons';
                
                const prevBtn = document.createElement('button');
                prevBtn.textContent = '‹';
                prevBtn.title = 'Previous Page';
                prevBtn.disabled = data.page <= 1;
                prevBtn.onclick = () => { 
                    state[listType].page--; 
                    fetchData(listType); 
                };
                
                const nextBtn = document.createElement('button');
                nextBtn.textContent = '›';
                nextBtn.title = 'Next Page';
                nextBtn.disabled = end >= data.total;
                nextBtn.onclick = () => { 
                    state[listType].page++; 
                    fetchData(listType); 
                };
                
                buttonsContainer.append(prevBtn, nextBtn);
                container.append(pageInfo, buttonsContainer);
            }

            // --- ELEMENT CREATION ---
            const chevronSVG = `<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16"><path fill-rule="evenodd" d="M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z"/></svg>`;

            function createInProgressPilotElement(pilot) {
                const card = document.createElement('div');
                card.className = 'pilot-card';
                
                if (!pilot.history) pilot.history = [];
                const signoffs = pilot.history.filter(h => h.type === 'signoff');
                const lastHistoryItem = pilot.history.length > 0 ? pilot.history[pilot.history.length - 1] : null;

                card.innerHTML = `
                    <div class="status-bar status-inprogress"></div>
                    <div class="pilot-card-content">
                        <div class="pilot-card-main">
                            <div class="pilot-info">
                                <div class="pilot-name">${pilot.pilot_name}</div>
                                ${lastHistoryItem ? `
                                <div class="latest-comment-wrapper">
                                    <div class="comment-bar status-inprogress"></div>
                                    <div class="latest-comment"><strong>${lastHistoryItem.commander}:</strong> ${lastHistoryItem.comment || '<em>No comment</em>'}</div>
                                </div>
                                ` : '<div class="latest-comment"><em>Awaiting first sign-off.</em></div>'}
                            </div>
                            <div class="pilot-card-actions">
                                <button class="btn-blue signoff-btn">Add Sign-off (${signoffs.length}/2)</button>
                            </div>
                        </div>
                         ${pilot.history.length > 0 ? `<button class="history-toggle-btn">${chevronSVG} View History</button>` : ''}
                        <ul class="signoff-history" style="display: none;">
                            ${pilot.history.map(s => {
                                const typeClass = s.type === 'demerit' ? 'status-demerit' : 'status-inprogress';
                                return `<li style="border-left: 3px solid var(--accent-${s.type === 'demerit' ? 'orange' : 'blue'}); padding-left: 8px;"><strong>${s.commander}</strong> (${formatDate(s.date)}): ${s.comment || '<em>No comment</em>'}</li>`
                            }).join('')}
                        </ul>
                    </div>
                `;

                card.querySelector('.signoff-btn').addEventListener('click', () => {
                    openModal(`Add Sign-off for ${pilot.pilot_name}`, false, async (comment) => {
                        console.log('=== SIGNOFF ACTION STARTED ===');
                        const result = await apiCall(`/logi/${state.token}`, { pilotName: pilot.pilot_name, commanderName: state.commanderName, comment });
                        console.log('Signoff result:', result);
                        
                        if (result && result.success) {
                            showToast(result.message, 'success');
                            console.log('=== FETCHING UPDATED DATA ===');
                            await fetchData('all');
                            console.log('=== DATA FETCH COMPLETE ===');
                        } else {
                            showToast(result?.message || 'Unknown error', 'error');
                        }
                        return result;
                    });
                });
                
                const toggleBtn = card.querySelector('.history-toggle-btn');
                if (toggleBtn) {
                    toggleBtn.addEventListener('click', e => {
                        e.preventDefault();
                        const history = card.querySelector('.signoff-history');
                        const isExpanded = history.style.display === 'block';
                        history.style.display = isExpanded ? 'none' : 'block';
                        toggleBtn.classList.toggle('expanded', !isExpanded);
                    });
                }
                return card;
            }

            function createTrustedPilotElement(pilot) {
                const card = document.createElement('div');
                
                if (!pilot.history) pilot.history = [];
                const demerits = pilot.history.filter(h => h.type === 'demerit');
                const demeritCount = demerits.length;
                card.className = `pilot-card`;
                const lastHistoryItem = pilot.history.length > 0 ? pilot.history[pilot.history.length - 1] : null;

                card.innerHTML = `
                    <div class="status-bar ${demeritCount > 0 ? 'status-demerit' : 'status-trusted'}"></div>
                    <div class="pilot-card-content">
                        <div class="pilot-card-main">
                            <div class="pilot-info">
                                <div class="pilot-name">${pilot.pilot_name}</div>
                                ${lastHistoryItem ? `
                                <div class="latest-comment-wrapper">
                                    <div class="comment-bar ${lastHistoryItem.type === 'demerit' ? 'status-demerit' : 'status-inprogress'}"></div>
                                    <div class="latest-comment"><strong>${lastHistoryItem.type === 'demerit' ? 'Demerit' : 'Comment'} from ${lastHistoryItem.commander}:</strong> ${lastHistoryItem.comment || '<em>No comment</em>'}</div>
                                </div>
                                ` : `<div class="latest-comment">Trusted since ${formatDate(pilot.added_at)}</div>`}
                            </div>
                            <div class="pilot-card-actions" style="display:flex; flex-direction: column; gap: 0.5rem;">
                                <button class="btn-green comment-btn">Pos. Comment</button>
                                <button class="btn-red demerit-btn">Demerit (${demeritCount}/2)</button>
                            </div>
                        </div>
                        ${pilot.history.length > 0 ? `<button class="history-toggle-btn">${chevronSVG} View History</button>` : ''}
                        <ul class="signoff-history" style="display:none;">
                           ${pilot.history.map(h => {
                               const typeClass = h.type === 'demerit' ? 'status-demerit' : 'status-inprogress';
                               const typeLabel = h.type === 'demerit' ? 'Demerit' : (h.type === 'signoff' ? 'Sign-off' : 'Comment');
                               return `<li style="border-left: 3px solid var(--accent-${h.type === 'demerit' ? 'orange' : 'blue'}); padding-left: 8px;"><strong>${typeLabel} from ${h.commander}</strong> (${formatDate(h.date)}): ${h.comment || '<em>No comment</em>'}</li>`
                           }).join('')}
                        </ul>
                    </div>
                `;
                
                card.querySelector('.comment-btn').addEventListener('click', () => {
                    openModal(`Add Positive Comment for ${pilot.pilot_name}`, false, async (comment) => {
                        console.log('=== COMMENT ACTION STARTED ===');
                        const result = await apiCall(`/logi/comment/${state.token}`, { pilotName: pilot.pilot_name, commanderName: state.commanderName, comment });
                        console.log('Comment result:', result);
                        
                        if (result && result.success) {
                            showToast(result.message, 'success');
                            console.log('=== FETCHING UPDATED DATA (TRUSTED) ===');
                            await fetchData('trusted');
                            console.log('=== DATA FETCH COMPLETE ===');
                        } else {
                             showToast(result?.message || 'Unknown error', 'error');
                        }
                        return result;
                    });
                });

                card.querySelector('.demerit-btn').addEventListener('click', () => {
                    openModal(`Add Demerit for ${pilot.pilot_name}`, true, async (comment) => {
                        console.log('=== DEMERIT ACTION STARTED ===');
                        const result = await apiCall(`/logi/demerit/${state.token}`, { pilotName: pilot.pilot_name, commanderName: state.commanderName, comment });
                        console.log('Demerit result:', result);
                        
                        if (result && result.success) {
                            showToast(result.message, result.demoted ? 'error' : 'success');
                            console.log('=== FETCHING UPDATED DATA (ALL) ===');
                            await fetchData('all');
                            console.log('=== DATA FETCH COMPLETE ===');
                        } else {
                            showToast(result?.message || 'Unknown error', 'error');
                        }
                        return result;
                    });
                });
                
                const toggleBtn = card.querySelector('.history-toggle-btn');
                if (toggleBtn) {
                    toggleBtn.addEventListener('click', e => {
                        e.preventDefault();
                        const history = card.querySelector('.signoff-history');
                        const isExpanded = history.style.display === 'block';
                        history.style.display = isExpanded ? 'none' : 'block';
                        toggleBtn.classList.toggle('expanded', !isExpanded);
                    });
                }
                return card;
            }

            // --- EVENT LISTENERS & INITIALIZATION ---
            async function validateNewPilot() {
                const pilotName = newPilotNameInput.value.trim();
                addNewPilotBtn.disabled = true;
                if (!pilotName || pilotName.length < 3) { newPilotStatus.textContent = ''; return; }
                newPilotStatus.textContent = 'Checking...';
                newPilotStatus.className = 'validation-status checking';
                const result = await apiCall('/logi/validate-char', { characterName: pilotName });
                if (result.success) {
                    newPilotNameInput.value = result.characterName;
                    newPilotStatus.textContent = `✔ Valid: ${result.characterName}`;
                    newPilotStatus.className = 'validation-status valid';
                    addNewPilotBtn.disabled = false;
                } else {
                    newPilotStatus.textContent = `✖ Error: ${result.message}`;
                    newPilotStatus.className = 'validation-status invalid';
                }
            }
            
            newPilotNameInput.addEventListener('input', () => {
                clearTimeout(state.validationTimeout);
                state.validationTimeout = setTimeout(validateNewPilot, 500);
            });
            
            addNewPilotBtn.addEventListener('click', async (e) => {
                e.target.disabled = true;
                const pilotName = newPilotNameInput.value;
                const comment = newPilotComment.value;
                
                console.log('=== ADD NEW PILOT ACTION STARTED ===');
                const result = await apiCall(`/logi/${state.token}`, { pilotName, commanderName: state.commanderName, comment });
                console.log('Add pilot result:', result);
                
                if (result && result.success) {
                    showToast(result.message, 'success');
                    newPilotNameInput.value = '';
                    newPilotComment.value = '';
                    newPilotStatus.textContent = '';
                    setupCharCounter(newPilotComment);
                    console.log('=== FETCHING UPDATED DATA (ALL) ===');
                    await fetchData('all');
                    console.log('=== DATA FETCH COMPLETE ===');
                } else {
                     showToast(result?.message || 'Unknown error', 'error');
                }
                e.target.disabled = false;
                validateNewPilot();
            });
            
            searchInProgressInput.addEventListener('input', () => {
                clearTimeout(state.searchTimeout);
                state.searchTimeout = setTimeout(() => {
                    state.inProgress.search = searchInProgressInput.value;
                    state.inProgress.page = 1;
                    fetchData('inProgress');
                }, 300);
            });
            
            searchTrustedInput.addEventListener('input', () => {
                clearTimeout(state.searchTimeout);
                state.searchTimeout = setTimeout(() => {
                    state.trusted.search = searchTrustedInput.value;
                    state.trusted.page = 1;
                    fetchData('trusted');
                }, 300);
            });

            // Initial setup
            setupCharCounter(newPilotComment);
            setupCharCounter(modalComment);
            
            // Validate that we have data before rendering
            console.log('=== PRE-RENDER VALIDATION ===');
            console.log('state.inProgress:', state.inProgress);
            console.log('state.trusted:', state.trusted);
            
            // Ensure state has pilot arrays
            if (!state.inProgress.pilots) {
                console.warn('No inProgress.pilots array, initializing empty array');
                state.inProgress.pilots = [];
            }
            if (!state.trusted.pilots) {
                console.warn('No trusted.pilots array, initializing empty array');
                state.trusted.pilots = [];
            }
            
            console.log('Final pilot counts before render:');
            console.log('In-progress:', state.inProgress.pilots.length);
            console.log('Trusted:', state.trusted.pilots.length);
            
            // Add a manual refresh button for debugging (remove in production)
            const debugRefreshBtn = document.createElement('button');
            debugRefreshBtn.textContent = 'Force Refresh Data';
            debugRefreshBtn.style.position = 'fixed';
            debugRefreshBtn.style.top = '10px';
            debugRefreshBtn.style.right = '10px';
            debugRefreshBtn.style.zIndex = '9999';
            debugRefreshBtn.style.background = '#f59e0b';
            debugRefreshBtn.style.color = 'white';
            debugRefreshBtn.style.border = 'none';
            debugRefreshBtn.style.padding = '8px 12px';
            debugRefreshBtn.style.borderRadius = '4px';
            debugRefreshBtn.style.cursor = 'pointer';
            debugRefreshBtn.addEventListener('click', () => {
                console.log('=== MANUAL REFRESH TRIGGERED ===');
                fetchData('all');
            });
            document.body.appendChild(debugRefreshBtn);
            
            // Force initial render
            console.log('=== FORCING INITIAL RENDER ===');
            setTimeout(() => {
                console.log('=== DELAYED RENDER ATTEMPT ===');
                renderInProgressList();
                renderTrustedList();
            }, 100);
            
            // Initial render of lists
            console.log('=== IMMEDIATE INITIAL RENDERING ===');
            renderInProgressList();
            renderTrustedList();
            
            // Auto-refresh data every 25 seconds
            setInterval(() => {
                console.log('=== AUTO-REFRESH TRIGGERED ===');
                fetchData('all');
            }, 25000); 
        });
    </script>
</body>
</html>