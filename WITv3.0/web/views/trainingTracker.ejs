<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Commander Training Tracker</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        :root {
            --bg-primary: #1e293b; --bg-secondary: #334155; --bg-tertiary: #475569;
            --bg-card: #2d3748; --text-primary: #e2e8f0; --text-secondary: #94a3b8;
            --accent-blue: #38bdf8; --accent-green: #4ade80; --accent-red: #f87171;
            --accent-yellow: #facc15; --border-color: #4a5568;
            --accent-scouting: #4ade80; /* green */
            --accent-orientation: #38bdf8; /* blue */
            --accent-tfc: #facc15; /* yellow */
            --accent-general: #a78bfa; /* purple */
            --bg-card-resident: #4a4a38; /* Pale Yellow */
            --bg-card-tfc: #384a5c;      /* Pale Blue */
        }
        body { font-family: 'Inter', sans-serif; background-color: var(--bg-primary); color: var(--text-primary); margin: 0; padding: 1.5rem; }
        .container { max-width: 98%; margin: auto; }
        h1, h2 { text-align: center; color: #f8fafc; }
        h1 { margin-bottom: 0.5rem; }
        h2 { margin-top: 2.5rem; border-bottom: 2px solid var(--border-color); padding-bottom: 0.75rem; }
        .subtitle { text-align: center; margin-bottom: 2rem; color: var(--text-secondary); }
        .panel { background-color: var(--bg-secondary); border-radius: 0.75rem; padding: 1.5rem; border: 1px solid var(--border-color); box-shadow: 0 4px 6px -1px rgba(0,0,0,0.1), 0 2px 4px -2px rgba(0,0,0,0.1); }
        
        .top-panels { display: grid; grid-template-columns: repeat(auto-fit, minmax(400px, 1fr)); gap: 1.5rem; max-width: 1400px; margin: auto; margin-bottom: 2rem; }
        
        .pilots-grid { display: grid; grid-template-columns: repeat(auto-fill, minmax(400px, 1fr)); gap: 1.5rem; margin-top: 1.5rem; justify-content: center; }
        .pilot-card { background-color: var(--bg-card); border-radius: 0.5rem; padding: 1.25rem; display: flex; flex-direction: column; gap: 1.5rem; border: 1px solid var(--border-color); }
        
        .pilot-card.resident { background-color: var(--bg-card-resident); }
        .pilot-card.tfc { background-color: var(--bg-card-tfc); }

        .pilot-card h3 { margin: 0; font-size: 1.25rem; color: var(--accent-blue); padding-bottom: 0.75rem; border-bottom: 1px solid var(--border-color); }
        .pilot-card h4 { margin: 0 0 0.75rem 0; font-size: 0.875rem; font-weight: 600; color: var(--text-secondary); text-transform: uppercase; letter-spacing: 0.05em; }
        .info-grid, .progress-grid, .tfc-grid { display: grid; grid-template-columns: repeat(2, 1fr); gap: 1rem; }

        .form-group { margin-bottom: 0; }
        label { display: block; margin-bottom: 0.35rem; font-size: 0.75rem; font-weight: 500; color: var(--text-secondary); }
        input[type="text"], input[type="date"], select { width: 100%; padding: 0.5rem; border-radius: 0.375rem; background-color: var(--bg-primary); border: 1px solid var(--border-color); color: var(--text-primary); font-size: 0.875rem; box-sizing: border-box; }
        input:disabled, textarea:disabled { background-color: #3d4c5f; cursor: not-allowed; }
        
        .progress-item { display: flex; align-items: center; justify-content: space-between; background-color: var(--bg-secondary); padding: 0.6rem 0.8rem; border-radius: 0.375rem; }
        .progress-item label { margin: 0; color: var(--text-primary); font-size: 0.875rem; }
        .progress-item.completed { background-color: var(--accent-green); }
        .progress-item.completed label { color: var(--bg-primary); font-weight: 600; }
        input[type="checkbox"] { width: 1.1rem; height: 1.1rem; accent-color: var(--accent-green); }
        input[type="checkbox"]:not(:disabled) { cursor: pointer; }
        .signoff-dots { display: flex; gap: 4px; }
        .signoff-dot { width: 12px; height: 12px; border-radius: 50%; background-color: var(--bg-tertiary); }
        .signoff-dot.filled { background-color: var(--accent-green); }
        .signoff-dot.mine { background-color: var(--accent-blue); }
        
        .comments-section { margin-top: 1rem; }
        .latest-comment { background-color: var(--bg-secondary); padding: 0.75rem; border-radius: 0.375rem; font-size: 0.8rem; color: var(--text-secondary); margin-bottom: 0.5rem; border-left: 3px solid var(--accent-yellow); white-space: pre-wrap; word-break: break-word; text-align: left; }
        .latest-comment strong { color: var(--text-primary); }
        
        .pilot-card-footer { display: flex; justify-content: space-between; align-items: center; margin-top: 0.5rem;}
        .comments-actions { display: flex; gap: 1rem; align-items: center; }
        .comments-actions a, .complex-signoff-item .view-signoffs-btn, .history-toggle-btn { color: var(--accent-blue); cursor: pointer; text-decoration: none; font-size: 0.875rem; }
        
        .action-grid { display: grid; grid-template-columns: 1fr auto; gap: 1rem; align-items: end; }

        .modal-overlay { position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.7); display: none; justify-content: center; align-items: center; z-index: 1000; }
        .modal { background: var(--bg-secondary); padding: 2rem; border-radius: 0.5rem; max-width: 600px; width: 90%; max-height: 80vh; display: flex; flex-direction: column; }
        .modal h2 { margin: 0 0 1rem 0; text-align: left; border: none; font-size: 1.25rem; color: #f8fafc;}
        .modal-content { overflow-y: auto; margin-right: -1rem; padding-right: 1rem;}
        .modal-actions { margin-top: 1.5rem; display: flex; justify-content: flex-end; gap: 1rem; }
        button { padding: 0.5rem 1rem; border-radius: 0.375rem; border: none; cursor: pointer; font-weight: 600; }
        button:disabled { cursor: not-allowed; opacity: 0.7; }
        .btn-primary { background-color: var(--accent-blue); color: white; }
        .btn-secondary { background-color: var(--bg-tertiary); color: var(--text-primary); }
        .btn-danger { background-color: var(--accent-red); color: white; }
        .delete-pilot-btn { padding: 0.5rem; line-height: 1; }
        .delete-pilot-btn svg { width: 16px; height: 16px; pointer-events: none; }
        
        .comment, .signoff-entry { border-bottom: 1px solid var(--border-color); padding: 0.75rem 0; }
        .comment:last-child, .signoff-entry:last-child { border-bottom: none; }
        .comment-header, .signoff-header { font-size: 0.8rem; color: var(--text-secondary); }
        .comment-header strong, .signoff-header strong { color: var(--text-primary); }
        .comment-body, .signoff-body { margin-top: 0.25rem; white-space: pre-wrap; font-size: 0.875rem;}
        textarea { width: 100%; padding: 0.75rem; border-radius: 0.375rem; background-color: var(--bg-primary); border: 1px solid var(--border-color); color: var(--text-primary); font-size: 1rem; box-sizing: border-box; resize: vertical; }
        
        .toast { position: fixed; top: 1.5rem; right: 1.5rem; padding: 1rem 1.5rem; border-radius: 0.5rem; z-index: 1001; opacity: 0; transform: translateY(-20px); transition: opacity 0.3s, transform 0.3s; box-shadow: 0 4px 10px rgba(0,0,0,0.2); }
        .toast.show { opacity: 1; transform: translateY(0); }
        .toast.success { background-color: var(--accent-green); color: black; }
        .toast.error { background-color: var(--accent-red); color: white; }
        .toast.info { background-color: var(--accent-blue); color: white; }

        .search-results {
            position: absolute;
            background-color: var(--bg-secondary);
            border: 1px solid var(--border-color);
            border-top: none;
            border-radius: 0 0 0.375rem 0.375rem;
            z-index: 10;
            width: 100%;
            max-height: 200px;
            overflow-y: auto;
        }
        .search-result-item {
            padding: 0.75rem;
            cursor: pointer;
        }
        .search-result-item:hover {
            background-color: var(--bg-tertiary);
        }

        .history-toggle-btn {
            background: none;
            border: none;
            padding: 0;
        }

        .history-toggle-btn svg {
            width: 16px;
            height: 16px;
            transition: transform 0.2s ease-in-out;
            margin-right: 4px;
        }
        .history-toggle-btn.expanded svg {
            transform: rotate(180deg);
        }
        .signoff-history {
            display: none;
            margin-top: 0.75rem;
            padding-top: 0.75rem;
            border-top: 1px solid var(--bg-tertiary);
            font-size: 0.8rem;
            list-style: none;
            padding-left: 0;
            max-height: 200px;
            overflow-y: auto;
        }
        .signoff-history li {
            margin-bottom: 0.5rem;
            color: var(--text-secondary);
        }
        .signoff-history strong { color: var(--text-primary); }

    </style>
</head>
<body>

<div class="container">
    <h1>Commander Training Tracker</h1>
    <p class="subtitle">Welcome, <%= commanderName %></p>
    
    <div class="top-panels">
        <% if (permissions.canAddResidents) { %>
        <div class="panel add-resident-panel">
            <h2>Add New Resident from Applications</h2>
            <div class="action-grid">
                <div class="form-group" style="position: relative;">
                    <label for="resident-search">Search by Pilot Name or Discord ID</label>
                    <input type="text" id="resident-search" placeholder="Start typing to search eligible pilots..." autocomplete="off">
                    <div id="resident-search-results" class="search-results" style="display: none;"></div>
                </div>
                <button id="add-resident-btn" class="btn-primary" style="padding: 0.75rem;" disabled>Add</button>
            </div>
        </div>
        <% } %>

        <% if (permissions.canPromoteToTfc) { %>
        <div class="panel promote-tfc-panel">
            <h2>Promote to Training FC</h2>
            <div class="action-grid">
                <div class="form-group" style="position: relative;">
                    <label for="tfc-promote-search">Search by Pilot Name</label>
                    <input type="text" id="tfc-promote-search" placeholder="Start typing to search eligible commanders..." autocomplete="off">
                     <div id="tfc-promote-search-results" class="search-results" style="display: none;"></div>
                </div>
                <button id="promote-tfc-btn" class="btn-primary" style="padding: 0.75rem;" disabled>Promote</button>
            </div>
        </div>
        <% } %>
    </div>


    <div id="all-pilots-section">
        <h2>Commander Training Progress</h2>
        <div class="pilots-grid" id="all-pilots-container"></div>
    </div>
</div>

<!-- Comments Modal -->
<div id="commentsModal" class="modal-overlay">
    <div class="modal">
        <h2 id="commentsModalTitle">Comments</h2>
        <div class="modal-content" id="commentsModalContent"></div>
        <div class="form-group" style="margin-top: 1.5rem;">
            <label for="newComment">Add New Comment</label>
            <textarea id="newComment" rows="3" placeholder="Enter your comment..."></textarea>
        </div>
        <div class="modal-actions">
            <button class="btn-secondary" onclick="closeModal('commentsModal')">Close</button>
            <button id="addCommentBtn" class="btn-primary">Add Comment</button>
        </div>
    </div>
</div>

<!-- Signoffs Modal -->
<div id="signoffsModal" class="modal-overlay">
    <div class="modal">
        <h2 id="signoffsModalTitle">Sign-offs</h2>
        <div class="modal-content" id="signoffsModalContent"></div>
        <div id="addSignoffForm" style="display: none; margin-top: 1.5rem;">
            <div class="form-group">
                <label for="newSignoffComment">Add Your Sign-off (Comment Optional)</label>
                <textarea id="newSignoffComment" rows="3" placeholder="Enter an optional comment..."></textarea>
            </div>
            <button id="addSignoffBtn" class="btn-primary">Add Sign-off</button>
        </div>
        <div id="removeSignoffAction" style="display: none; margin-top: 1.5rem;">
            <button id="removeSignoffBtn" class="btn-danger">Remove My Sign-off</button>
        </div>
        <div class="modal-actions">
            <button class="btn-secondary" onclick="closeModal('signoffsModal')">Close</button>
        </div>
    </div>
</div>

<!-- Delete Pilot Modal -->
<div id="deletePilotModal" class="modal-overlay">
    <div class="modal">
        <h2 id="deletePilotModalTitle">Confirm Removal</h2>
        <p id="deletePilotModalText"></p>
        <div class="modal-actions">
            <button class="btn-secondary" onclick="closeModal('deletePilotModal')">Cancel</button>
            <button id="deletePilotConfirmBtn" class="btn-danger">Confirm Removal</button>
        </div>
    </div>
</div>

<div id="toast" class="toast"></div>

<script src="/socket.io/socket.io.js"></script>
<script>
    const token = "<%= token %>";
    const commanderName = "<%= commanderName %>";
    const commanderDiscordId = "<%= commanderDiscordId %>";
    const permissions = <%- JSON.stringify(permissions) %>;
    const residentQuizzes = <%- JSON.stringify(residentQuizzes) %>;
    const tfcQuizzes = <%- JSON.stringify(tfcQuizzes) %>;
    let trackerData = { residents: [], tfcs: [] };
    const deleteSVG = `<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16"><path d="M2.146 2.854a.5.5 0 1 1 .708-.708L8 7.293l5.146-5.147a.5.5 0 0 1 .708.708L8.707 8l5.147 5.146a.5.5 0 0 1-.708.708L8 8.707l-5.146 5.147a.5.5 0 0 1-.708-.708L7.293 8z"/></svg>`;
    const chevronSVG = `<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16"><path fill-rule="evenodd" d="M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z"/></svg>`;
    let selectedUserForAddition = null;
    let selectedTfcForPromotion = null;

    function getCommentTypeColor(type) {
        switch (type) {
            case 'Scouting': return 'scouting';
            case 'Orientation': return 'orientation';
            case 'TFC': return 'tfc';
            default: return 'general';
        }
    }

    function showToast(message, type = 'info') {
        const toast = document.getElementById('toast');
        toast.textContent = message;
        toast.className = `toast show ${type}`;
        setTimeout(() => { toast.className = 'toast'; }, 3000);
    }

    async function apiCall(endpoint, method = 'POST', body = null) {
        try {
            const options = {
                method: method.toUpperCase(),
                headers: { 'Content-Type': 'application/json' },
            };
            if (body) options.body = JSON.stringify(body);
            const response = await fetch(endpoint, options);
            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.message || 'An API error occurred.');
            }
            return await response.json();
        } catch (error) {
            console.error('API Call Failed:', error);
            showToast(error.message, 'error');
            return null;
        }
    }

    function openModal(modalId) { document.getElementById(modalId).style.display = 'flex'; }
    function closeModal(modalId) { document.getElementById(modalId).style.display = 'none'; }
    
    function createQuizProgressHTML(quizzes, completedQuizIds) {
        if (!quizzes || quizzes.length === 0) return '<p class="no-quizzes">No quizzes available for this category.</p>';
        return quizzes.map(quiz => `
            <div class="progress-item ${completedQuizIds.includes(quiz.quiz_id) ? 'completed' : ''}">
                <label>${quiz.name}</label>
            </div>
        `).join('');
    }

    function createComplexSignoffHTML(pilot, field, label) {
        const signoffs = pilot[field] || [];
        let dotsHTML = '';
        for (let i = 0; i < 3; i++) {
            if (signoffs[i]) {
                const dotClass = signoffs[i].discordId === commanderDiscordId ? 'mine' : 'filled';
                dotsHTML += `<div class="signoff-dot ${dotClass}" title="${signoffs[i].commander}"></div>`;
            } else {
                dotsHTML += `<div class="signoff-dot"></div>`;
            }
        }
        return `
            <div class="complex-signoff-item" data-field="${field}" data-pilot-type="resident">
                <label>${label}</label>
                <div style="display: flex; align-items: center; gap: 0.5rem;">
                    <div class="signoff-dots">${dotsHTML}</div>
                    ${permissions.canEdit ? '<a href="#" class="view-signoffs-btn">View/Add</a>' : ''}
                </div>
            </div>`;
    }

    function createResidentCardHTML(pilot) {
        const lastComment = pilot.comments.length > 0 ? pilot.comments[0] : null;
        const adminActionsHTML = permissions.canDelete
            ? `<div class="pilot-card-admin-actions">
                   <button class="btn-danger delete-pilot-btn" data-pilot-name="${pilot.pilot_name}" data-pilot-id="${pilot.pilot_id}" data-pilot-type="resident" title="Remove from Tracker">${deleteSVG}</button>
               </div>`
            : '';
        
        const historyListHTML = pilot.comments.slice(1).map(c => {
            const itemColor = getCommentTypeColor(c.type);
            return `<li style="border-left: 3px solid var(--accent-${itemColor}); padding-left: 8px;"><strong>${c.type} from ${c.commander}</strong> (${new Date(c.date).toLocaleDateString([], { dateStyle: 'medium' })}): ${c.comment ? c.comment.replace(/</g, "&lt;").replace(/>/g, "&gt;") : '<em>No comment</em>'}</li>`;
        }).join('');

        return `
            <div class="pilot-card resident" data-pilot-id="${pilot.pilot_id}" data-pilot-type="resident">
                <h3>${pilot.pilot_name}</h3>
                <div>
                    <h4>General</h4>
                    <div class="info-grid">
                        <div class="form-group"><label>Start Date</label><input type="date" value="${pilot.start_date ? new Date(pilot.start_date).toISOString().split('T')[0] : ''}" disabled></div>
                        <div class="form-group"><label>Last Active</label><input type="date" value="${pilot.last_active ? new Date(pilot.last_active).toISOString().split('T')[0] : ''}" disabled></div>
                    </div>
                    <div class="form-group" style="margin-top: 1rem;"><label>Resident Orientation</label><input type="text" value="${pilot.resident_orientation_by || ''}" data-field="resident_orientation_by" placeholder="FC Name" ${!permissions.canEdit ? 'disabled' : ''}></div>
                </div>
                <div><h4>Quizzes</h4><div class="progress-grid">${createQuizProgressHTML(residentQuizzes, pilot.completed_quizzes)}</div></div>
                <div>
                    <h4>In Fleet Sign-Offs</h4>
                    <div class="progress-grid">
                        <div class="progress-item"><label>Bastion Badge</label><input type="checkbox" ${pilot.signoff_bastion ? 'checked' : ''} data-field="signoff_bastion" ${!permissions.canEdit ? 'disabled' : ''}></div>
                        <div class="progress-item ${pilot.signoff_trusted_logi ? 'completed' : ''}"><label>Trusted Logi</label></div>
                        ${createComplexSignoffHTML(pilot, 'signoff_scouting', 'Scouting')}
                        ${createComplexSignoffHTML(pilot, 'signoff_new_pilot_orientation', 'New Pilot Orientation')}
                    </div>
                </div>
                <div>
                    <h4>Exam</h4>
                    <div class="progress-grid">
                        <div class="progress-item"><label>Multiple Choice</label><input type="checkbox" ${pilot.exam_multiple_choice ? 'checked' : ''} data-field="exam_multiple_choice" ${!permissions.canEdit ? 'disabled' : ''}></div>
                        <div class="progress-item"><label>CT Exam</label><input type="checkbox" ${pilot.exam_ct ? 'checked' : ''} data-field="exam_ct" ${!permissions.canEdit ? 'disabled' : ''}></div>
                    </div>
                </div>
                <div class="comments-section">
                    <div class="latest-comment" style="${!lastComment ? 'display: none;' : ''}; border-left-color: var(--accent-${lastComment ? getCommentTypeColor(lastComment.type) : 'general'})">
                        ${lastComment ? `<strong>${lastComment.commander}:</strong> ${lastComment.comment.replace(/</g, "&lt;").replace(/>/g, "&gt;")}` : ''}
                    </div>
                    <div class="pilot-card-footer">
                        <div class="comments-actions">
                            ${pilot.comments.length > 1 ? `<button class="history-toggle-btn">${chevronSVG} View Older (${pilot.comments.length - 1})</button>` : '<div></div>'}
                            <a href="#" class="view-comments">Add General Comment</a>
                        </div>
                         ${adminActionsHTML}
                    </div>
                    <ul class="signoff-history" style="display: none;">
                        ${historyListHTML}
                    </ul>
                </div>
            </div>`;
    }
    
    function createTfcCardHTML(pilot) {
        const lastComment = pilot.comments && pilot.comments.length > 0 ? pilot.comments[0] : null;
        const canEditTfc = permissions.canPromoteToTfc;
         const adminActionsHTML = permissions.canDelete
            ? `<div class="pilot-card-admin-actions">
                   <button class="btn-danger delete-pilot-btn" data-pilot-name="${pilot.pilot_name}" data-pilot-id="${pilot.pilot_id}" data-pilot-type="tfc" title="Remove from Tracker">${deleteSVG}</button>
               </div>`
            : '';
        
        const historyListHTML = pilot.comments.slice(1).map(c => {
            const itemColor = getCommentTypeColor(c.type);
            return `<li style="border-left: 3px solid var(--accent-${itemColor}); padding-left: 8px;"><strong>${c.type} from ${c.commander}</strong> (${new Date(c.date).toLocaleDateString([], { dateStyle: 'medium' })}): ${c.comment ? c.comment.replace(/</g, "&lt;").replace(/>/g, "&gt;") : '<em>No comment</em>'}</li>`;
        }).join('');

        return `
            <div class="pilot-card tfc" data-pilot-id="${pilot.pilot_id}" data-pilot-type="tfc">
                <h3>${pilot.pilot_name}</h3>
                <div><h4>Quizzes</h4><div class="progress-grid">${createQuizProgressHTML(tfcQuizzes, pilot.completed_quizzes)}</div></div>
                <div>
                    <h4>Modules</h4>
                    <div class="tfc-grid">
                        <div class="form-group"><label>T1 - Tagging</label><input type="text" value="${pilot.t1_tagging || ''}" data-field="t1_tagging" placeholder="CT Name" ${!canEditTfc ? 'disabled' : ''}></div>
                        <div class="form-group"><label>T1 - Voicing</label><input type="text" value="${pilot.t1_voicing || ''}" data-field="t1_voicing" placeholder="CT Name" ${!canEditTfc ? 'disabled' : ''}></div>
                        <div class="form-group"><label>T1 - Waitlist & Comp</label><input type="text" value="${pilot.t1_waitlist || ''}" data-field="t1_waitlist" placeholder="CT Name" ${!canEditTfc ? 'disabled' : ''}></div>
                        <div class="form-group"><label>T2 - Situational Awareness</label><input type="text" value="${pilot.t2_situational_awareness || ''}" data-field="t2_situational_awareness" placeholder="CT Name" ${!canEditTfc ? 'disabled' : ''}></div>
                        <div class="form-group"><label>T2 - Evacuations</label><input type="text" value="${pilot.t2_evacuations || ''}" data-field="t2_evacuations" placeholder="CT Name" ${!canEditTfc ? 'disabled' : ''}></div>
                    </div>
                </div>
                 <div>
                    <h4>Practice & Competency</h4>
                    <div class="tfc-grid">
                         <div class="form-group"><label>Fleet Speed</label><input type="text" value="${pilot.practice_fleet_speed || ''}" data-field="practice_fleet_speed" placeholder="CT Name" ${!canEditTfc ? 'disabled' : ''}></div>
                         <div class="form-group"><label>System Awareness</label><input type="text" value="${pilot.practice_system_awareness || ''}" data-field="practice_system_awareness" placeholder="CT Name" ${!canEditTfc ? 'disabled' : ''}></div>
                         <div class="form-group"><label>Final Sign-off</label><input type="text" value="${pilot.competency_final || ''}" data-field="competency_final" placeholder="Council Name" ${!canEditTfc ? 'disabled' : ''}></div>
                    </div>
                </div>
                <div class="comments-section">
                    <div class="latest-comment" style="${!lastComment ? 'display: none;' : ''}; border-left-color: var(--accent-tfc)">
                        ${lastComment ? `<strong>${lastComment.commander}:</strong> ${lastComment.comment.replace(/</g, "&lt;").replace(/>/g, "&gt;")}` : ''}
                    </div>
                    <div class="pilot-card-footer">
                        <div class="comments-actions">
                            ${pilot.comments.length > 1 ? `<button class="history-toggle-btn">${chevronSVG} View Older (${pilot.comments.length - 1})</button>` : '<div></div>'}
                            <a href="#" class="view-comments">Add TFC Comment</a>
                        </div>
                         ${adminActionsHTML}
                    </div>
                    <ul class="signoff-history" style="display: none;">
                        ${historyListHTML}
                    </ul>
                </div>
            </div>`;
    }


    function renderAllData() {
        const allPilotsContainer = document.getElementById('all-pilots-container');
        
        allPilotsContainer.innerHTML = ''; // Clear the container first

        // Render TFCs first, then residents
        const tfcHtml = trackerData.tfcs.map(createTfcCardHTML).join('');
        const residentHtml = trackerData.residents.map(createResidentCardHTML).join('');

        allPilotsContainer.innerHTML = tfcHtml + residentHtml;
    }

    async function fetchAndRenderData() {
        const result = await apiCall(`/training/api/data/${token}`, 'GET');
        if (result && result.success) {
            trackerData = result.data;
            renderAllData();
        }
    }

    // --- EVENT HANDLERS ---
    async function handleInputChange(event) {
        const input = event.target;
        const field = input.dataset.field;
        if (!field) return;

        const card = input.closest('.pilot-card');
        const pilotId = card.dataset.pilotId;
        const pilotType = card.dataset.pilotType;
        const value = (input.type === 'checkbox') ? input.checked : input.value;
        
        const endpoint = pilotType === 'resident' ? `/training/api/update-resident/${token}` : `/training/api/update-tfc/${token}`;
        const result = await apiCall(endpoint, 'POST', { pilotId, field, value });
        
        if (result && result.success) {
            showToast(result.message, 'success');
            // Data will be re-rendered via socket event
        } else {
            // Revert failed change
            if (input.type === 'checkbox') input.checked = !input.checked;
        }
    }

    function handleGridClick(e) {
        const target = e.target;
        const card = target.closest('.pilot-card');
        if (!card) return;

        const pilotId = card.dataset.pilotId;
        const pilotType = card.dataset.pilotType;
        const pilotName = card.querySelector('h3').textContent;

        if (target.classList.contains('view-comments')) {
            e.preventDefault();
            openCommentsModal(pilotId, pilotType);
        } else if (target.classList.contains('view-signoffs-btn')) {
            e.preventDefault();
            const field = target.closest('.complex-signoff-item').dataset.field;
            openSignoffsModal(pilotId, field);
        } else if (target.closest('.delete-pilot-btn')) {
            e.preventDefault();
            openDeletePilotModal(pilotName, pilotId);
        } else if (target.closest('.history-toggle-btn')) {
            e.preventDefault();
            const historyEl = card.querySelector('.signoff-history');
            const btn = target.closest('.history-toggle-btn');
            if (historyEl) {
                const isExpanded = historyEl.style.display === 'block';
                historyEl.style.display = isExpanded ? 'none' : 'block';
                btn.classList.toggle('expanded', !isExpanded);
            }
        }
    }
    
    async function handleAddResident() {
        if (!selectedUserForAddition) {
            showToast('Please select a pilot from the search results first.', 'error');
            return;
        }

        const btn = document.getElementById('add-resident-btn');
        btn.disabled = true;
        const { character_name: pilotName, discord_id: discordId } = selectedUserForAddition;

        const result = await apiCall(`/training/api/add-resident/${token}`, 'POST', { pilotName, discordId });
        if (result && result.success) {
            showToast(result.message, 'success');
            // Clear selection and search
            document.getElementById('resident-search').value = '';
            document.getElementById('resident-search-results').style.display = 'none';
            selectedUserForAddition = null;
            btn.disabled = true;
        } else {
            btn.disabled = false;
        }
    }
    
    async function handlePromoteToTfc() {
        if (!selectedTfcForPromotion) {
            showToast('Please select a pilot from the search results to promote.', 'error');
            return;
        }

        const btn = document.getElementById('promote-tfc-btn');
        btn.disabled = true;
        const { pilot_id: pilotId } = selectedTfcForPromotion;
        
        const result = await apiCall(`/training/api/promote-to-tfc/${token}`, 'POST', { pilotId });
        if (result && result.success) {
            showToast(result.message, 'success');
            // Clear selection and search
            document.getElementById('tfc-promote-search').value = '';
            document.getElementById('tfc-promote-search-results').style.display = 'none';
            selectedTfcForPromotion = null;
            btn.disabled = true;
        } else {
            btn.disabled = false; // Re-enable on failure
        }
    }

    async function handleAddComment() {
        const modal = document.getElementById('commentsModal');
        const { pilotId, pilotType } = modal.dataset;
        const comment = document.getElementById('newComment').value.trim();
        if (!comment) return;

        const btn = document.getElementById('addCommentBtn');
        btn.disabled = true;
        const result = await apiCall(`/training/api/add-comment/${token}`, 'POST', { pilotId, comment, type: pilotType });
        if (result && result.success) {
            showToast(result.message, 'success');
            closeModal('commentsModal');
        }
        btn.disabled = false;
    }

    async function handleAddSignoff() {
        const modal = document.getElementById('signoffsModal');
        const { pilotId, field } = modal.dataset;
        const comment = document.getElementById('newSignoffComment').value.trim();
        
        const btn = document.getElementById('addSignoffBtn');
        btn.disabled = true;
        const result = await apiCall(`/training/api/add-signoff/${token}`, 'POST', { pilotId, field, comment });
        if (result && result.success) {
            showToast(result.message, 'success');
            closeModal('signoffsModal');
        }
        btn.disabled = false;
    }

    async function handleRemoveSignoff() {
        if (!confirm('Are you sure you want to remove your sign-off?')) return;
        const modal = document.getElementById('signoffsModal');
        const { pilotId, field } = modal.dataset;
        
        const btn = document.getElementById('removeSignoffBtn');
        btn.disabled = true;
        const result = await apiCall(`/training/api/remove-signoff/${token}`, 'POST', { pilotId, field });
        if (result && result.success) {
            showToast(result.message, 'success');
            closeModal('signoffsModal');
        }
        btn.disabled = false;
    }

    function openCommentsModal(pilotId, pilotType) {
        const pilotList = pilotType === 'resident' ? trackerData.residents : trackerData.tfcs;
        const pilot = pilotList.find(p => p.pilot_id == pilotId);
        if (!pilot) return;

        const modal = document.getElementById('commentsModal');
        modal.dataset.pilotId = pilotId;
        modal.dataset.pilotType = pilotType;
        
        document.getElementById('commentsModalTitle').textContent = `Add Comment for ${pilot.pilot_name}`;
        const contentEl = document.getElementById('commentsModalContent');
        contentEl.innerHTML = ''; // Clear it, we're not showing history here anymore.
        
        document.getElementById('newComment').value = '';
        openModal('commentsModal');
    }

    function openSignoffsModal(pilotId, field) {
        const pilot = trackerData.residents.find(p => p.pilot_id == pilotId);
        if (!pilot) return;

        const modal = document.getElementById('signoffsModal');
        modal.dataset.pilotId = pilotId;
        modal.dataset.field = field;

        const signoffs = pilot[field] || [];
        const fieldName = field.replace('signoff_', '').replace(/_/g, ' ');
        
        document.getElementById('signoffsModalTitle').textContent = `Sign-offs for ${fieldName}`;
        const contentEl = document.getElementById('signoffsModalContent');
        
        contentEl.innerHTML = signoffs.length > 0 ? signoffs.map(s => `
            <div class="signoff-entry">
                <div class="signoff-header">By <strong>${s.commander}</strong> on ${new Date(s.date).toLocaleDateString([], { dateStyle: 'long' })}</div>
                ${s.comment ? `<div class="signoff-body">${s.comment.replace(/</g, "&lt;").replace(/>/g, "&gt;")}</div>` : ''}
            </div>
        `).join('') : '<p style="color: var(--text-secondary);">No sign-offs yet.</p>';
        
        const addForm = document.getElementById('addSignoffForm');
        const removeAction = document.getElementById('removeSignoffAction');
        addForm.style.display = 'none';
        removeAction.style.display = 'none';

        if (permissions.canEdit) {
            const hasSignedOff = signoffs.some(s => s.discordId === commanderDiscordId);
            if (hasSignedOff) {
                removeAction.style.display = 'block';
            } else if (signoffs.length < 3) {
                addForm.style.display = 'block';
                document.getElementById('newSignoffComment').value = '';
            }
        }
        openModal('signoffsModal');
    }
    
    function openDeletePilotModal(pilotName, pilotId) {
        const modal = document.getElementById('deletePilotModal');
        document.getElementById('deletePilotModalText').innerHTML = `Are you sure you want to permanently remove <strong>${pilotName}</strong> from the training tracker? This action cannot be undone.`;
        const confirmBtn = document.getElementById('deletePilotConfirmBtn');
        confirmBtn.onclick = () => handleDeletePilot(pilotId); // Set the action for the confirm button
        openModal('deletePilotModal');
    }

    async function handleDeletePilot(pilotId) {
        const result = await apiCall(`/training/api/remove-pilot/${token}`, 'POST', { pilotId });
        if (result && result.success) {
            showToast(result.message, 'success');
            closeModal('deletePilotModal');
        }
    }


    // --- INITIALIZATION & LISTENERS ---
    document.addEventListener('DOMContentLoaded', () => {
        let searchDebounceTimeout;
        const residentSearchInput = document.getElementById('resident-search');
        const residentSearchResults = document.getElementById('resident-search-results');
        const addResidentBtn = document.getElementById('add-resident-btn');

        let tfcSearchDebounceTimeout;
        const tfcSearchInput = document.getElementById('tfc-promote-search');
        const tfcSearchResults = document.getElementById('tfc-promote-search-results');
        const promoteTfcBtn = document.getElementById('promote-tfc-btn');

        async function handleResidentSearch() {
            const searchTerm = residentSearchInput.value.trim();
            addResidentBtn.disabled = true;
            selectedUserForAddition = null;
            residentSearchResults.innerHTML = '';

            const result = await apiCall(`/training/api/search-residents/${token}`, 'POST', { searchTerm });

            if (result && result.success && result.users.length > 0) {
                residentSearchResults.style.display = 'block';
                result.users.forEach(user => {
                    const item = document.createElement('div');
                    item.className = 'search-result-item';
                    item.textContent = `${user.character_name} (${user.discord_id})`;
                    item.addEventListener('click', () => {
                        selectedUserForAddition = user;
                        addResidentBtn.disabled = false;
                        residentSearchInput.value = user.character_name;
                        residentSearchResults.style.display = 'none'; // Hide results after selection
                    });
                    residentSearchResults.appendChild(item);
                });
            } else {
                residentSearchResults.style.display = 'none'; // Hide on API error or no results
            }
        }
        
        async function handleTfcSearch() {
            const searchTerm = tfcSearchInput.value.trim();
            promoteTfcBtn.disabled = true;
            selectedTfcForPromotion = null;
            tfcSearchResults.innerHTML = '';

            const result = await apiCall(`/training/api/search-tfc-candidates/${token}`, 'POST', { searchTerm });
            
            if (result && result.success && result.users.length > 0) {
                tfcSearchResults.style.display = 'block';
                 result.users.forEach(user => {
                    const item = document.createElement('div');
                    item.className = 'search-result-item';
                    item.textContent = user.pilot_name;
                    item.addEventListener('click', () => {
                        selectedTfcForPromotion = user;
                        promoteTfcBtn.disabled = false;
                        tfcSearchInput.value = user.pilot_name;
                        tfcSearchResults.style.display = 'none'; // Hide results after selection
                    });
                    tfcSearchResults.appendChild(item);
                });
            } else {
                tfcSearchResults.style.display = 'none'; // Hide on API error or no results
            }
        }

        document.addEventListener('click', function(event) {
            if (residentSearchInput && !residentSearchInput.contains(event.target) && residentSearchResults && !residentSearchResults.contains(event.target)) {
                residentSearchResults.style.display = 'none';
            }
            if (tfcSearchInput && !tfcSearchInput.contains(event.target) && tfcSearchResults && !tfcSearchResults.contains(event.target)) {
                tfcSearchResults.style.display = 'none';
            }
        });

        if (residentSearchInput) {
            residentSearchInput.addEventListener('input', () => {
                clearTimeout(searchDebounceTimeout);
                searchDebounceTimeout = setTimeout(handleResidentSearch, 300);
            });
            residentSearchInput.addEventListener('focus', handleResidentSearch);
        }
        
        if (tfcSearchInput) {
            tfcSearchInput.addEventListener('input', () => {
                clearTimeout(tfcSearchDebounceTimeout);
                tfcSearchDebounceTimeout = setTimeout(handleTfcSearch, 300);
            });
            tfcSearchInput.addEventListener('focus', handleTfcSearch);
        }
        
        const container = document.querySelector('.container');
        container.addEventListener('change', handleInputChange);
        container.addEventListener('click', handleGridClick);
        
        if (addResidentBtn) {
            addResidentBtn.addEventListener('click', handleAddResident);
        }
        if (promoteTfcBtn) {
            promoteTfcBtn.addEventListener('click', handlePromoteToTfc);
        }

        document.getElementById('addCommentBtn')?.addEventListener('click', handleAddComment);
        document.getElementById('addSignoffBtn')?.addEventListener('click', handleAddSignoff);
        document.getElementById('removeSignoffBtn')?.addEventListener('click', handleRemoveSignoff);

        // --- WebSocket Logic ---
        const socket = io();
        socket.on('connect', () => console.log('Connected to WebSocket server.'));
        socket.on('training-update', () => {
            console.log('Received training-update event. Fetching new data.');
            showToast('Data updated by another user. Refreshing...', 'info');
            fetchAndRenderData();
        });
        socket.on('disconnect', () => console.log('Disconnected from WebSocket server.'));

        // Initial data load
        fetchAndRenderData();
    });
</script>

</body>
</html>


