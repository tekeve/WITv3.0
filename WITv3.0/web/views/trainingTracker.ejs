<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Commander Training Tracker</title>
    <style>
        :root {
            --bg-primary: #1e293b; --bg-secondary: #334155; --bg-tertiary: #475569;
            --text-primary: #e2e8f0; --text-secondary: #94a3b8;
            --accent-blue: #38bdf8; --accent-green: #4ade80; --accent-red: #f87171;
            --accent-yellow: #facc15; --border-color: #4a5568;
        }
        body {
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
            background-color: var(--bg-primary);
            color: var(--text-primary);
            margin: 0;
            padding: 1.5rem;
        }
        .container { max-width: 98%; margin: auto; }
        h1 { text-align: center; color: #f8fafc; margin-bottom: 2rem; }
        .panel { background-color: var(--bg-secondary); border-radius: 0.75rem; padding: 1.5rem; border: 1px solid var(--border-color); }
        
        /* New Pilot Grid Layout */
        .pilots-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
            gap: 1.5rem;
            margin-top: 1.5rem;
        }
        .pilot-card {
            background-color: var(--bg-tertiary);
            border-radius: 0.5rem;
            padding: 1rem;
            display: flex;
            flex-direction: column;
            gap: 1.25rem;
        }
        .pilot-card h3 {
            margin: 0;
            font-size: 1.25rem;
            color: var(--accent-blue);
        }
        .pilot-card h4 {
            margin: 0 0 0.75rem 0;
            border-bottom: 1px solid var(--border-color);
            padding-bottom: 0.5rem;
            font-size: 1rem;
            color: var(--text-secondary);
        }
        .info-grid, .progress-grid {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 0.75rem;
        }
        .form-group { margin-bottom: 0; }
        label { display: block; margin-bottom: 0.25rem; font-size: 0.75rem; font-weight: 500; color: var(--text-secondary); text-transform: uppercase; }
        input[type="text"], input[type="date"] {
            width: 100%;
            padding: 0.5rem;
            border-radius: 0.25rem;
            background-color: var(--bg-primary);
            border: 1px solid var(--border-color);
            color: var(--text-primary);
            font-size: 0.875rem;
            box-sizing: border-box;
        }
        .progress-item {
            display: flex;
            align-items: center;
            justify-content: space-between;
            background-color: var(--bg-secondary);
            padding: 0.5rem 0.75rem;
            border-radius: 0.25rem;
        }
        .progress-item label { margin: 0; color: var(--text-primary); text-transform: none; font-size: 0.875rem; }
        
        input[type="checkbox"] { width: 1.1rem; height: 1.1rem; cursor: pointer; accent-color: var(--accent-green); }
        input:disabled { cursor: not-allowed; opacity: 0.6; }

        .signoff-item a { color: var(--accent-blue); cursor: pointer; text-decoration: none; margin-left: 0.5rem; font-size: 0.8rem; }
        .signoff-item a:hover { text-decoration: underline; }

        /* Comments Section */
        .comments-section { margin-top: 1rem; }
        .latest-comment {
            background-color: var(--bg-secondary);
            padding: 0.75rem;
            border-radius: 0.25rem;
            font-size: 0.8rem;
            color: var(--text-secondary);
            margin-bottom: 0.5rem;
            border-left: 3px solid var(--accent-yellow);
        }
        .latest-comment strong { color: var(--text-primary); }
        .comments-actions { text-align: right; }
        .comments-actions a { color: var(--accent-blue); cursor: pointer; text-decoration: none; font-size: 0.875rem; }

        /* Add Resident Form */
        .add-resident-grid { display: grid; grid-template-columns: 1fr 1fr auto; gap: 1rem; align-items: end; }

        /* Modal Styles */
        .modal-overlay { position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.7); display: none; justify-content: center; align-items: center; z-index: 1000; }
        .modal { background: var(--bg-secondary); padding: 2rem; border-radius: 0.5rem; max-width: 600px; width: 90%; max-height: 80vh; display: flex; flex-direction: column; }
        .modal h2 { margin: 0 0 1rem 0; text-align: left; border: none; font-size: 1.25rem; color: #f8fafc;}
        .modal-content { overflow-y: auto; margin-right: -1rem; padding-right: 1rem;}
        .modal-actions { margin-top: 1.5rem; display: flex; justify-content: flex-end; gap: 1rem; }
        button { padding: 0.5rem 1rem; border-radius: 0.375rem; border: none; cursor: pointer; font-weight: 600; }
        .btn-primary { background-color: var(--accent-blue); color: white; }
        .btn-secondary { background-color: var(--bg-tertiary); color: var(--text-primary); }
        .comment { border-bottom: 1px solid var(--border-color); padding: 0.75rem 0; }
        .comment:last-child { border-bottom: none; }
        .comment-header { font-size: 0.8rem; color: var(--text-secondary); }
        .comment-header strong { color: var(--text-primary); }
        .comment-body { margin-top: 0.25rem; white-space: pre-wrap; font-size: 0.875rem;}
        textarea { width: 100%; padding: 0.75rem; border-radius: 0.375rem; background-color: var(--bg-primary); border: 1px solid var(--border-color); color: var(--text-primary); font-size: 1rem; box-sizing: border-box; }
        
        .toast { position: fixed; top: 1.5rem; right: 1.5rem; padding: 1rem 1.5rem; border-radius: 0.5rem; z-index: 1001; opacity: 0; transform: translateY(-20px); transition: opacity 0.3s, transform 0.3s; }
        .toast.show { opacity: 1; transform: translateY(0); }
        .toast.success { background-color: var(--accent-green); color: black; }
        .toast.error { background-color: var(--accent-red); color: white; }
    </style>
</head>
<body>

<div class="container">
    <h1>Commander Training Tracker</h1>
    
    <% if (permissions.canAddResidents) { %>
    <div class="panel">
        <h2>Add New Resident</h2>
        <div class="add-resident-grid">
            <div class="form-group">
                <label for="new-pilot-name">Pilot Name</label>
                <input type="text" id="new-pilot-name" placeholder="EVE Character Name">
            </div>
            <div class="form-group">
                <label for="new-pilot-discord-id">User's Discord ID</label>
                <input type="text" id="new-pilot-discord-id" placeholder="Right-click user -> Copy User ID">
            </div>
            <div class="form-group">
                <button id="add-resident-btn" class="btn-primary" style="width: 100%; padding: 0.75rem;">Add Resident</button>
            </div>
        </div>
    </div>
    <% } %>

    <div class="pilots-grid" id="pilots-container">
        <% pilots.forEach(pilot => { %>
            <div class="pilot-card" data-pilot-id="<%= pilot.pilot_id %>">
                <h3><%= pilot.pilot_name %></h3>

                <!-- General Info -->
                <div class="info-section">
                    <div class="info-grid">
                        <div class="form-group">
                            <label for="start_date_<%= pilot.pilot_id %>">Start Date</label>
                            <input type="date" id="start_date_<%= pilot.pilot_id %>" value="<%= pilot.start_date ? new Date(pilot.start_date).toISOString().split('T')[0] : '' %>" data-field="start_date" <%= !permissions.canEdit ? 'disabled' : '' %>>
                        </div>
                         <div class="form-group">
                            <label for="last_active_<%= pilot.pilot_id %>">Last Active</label>
                            <input type="date" id="last_active_<%= pilot.pilot_id %>" value="<%= pilot.last_active ? new Date(pilot.last_active).toISOString().split('T')[0] : '' %>" data-field="last_active" <%= !permissions.canEdit ? 'disabled' : '' %>>
                        </div>
                    </div>
                     <div class="form-group" style="margin-top: 0.75rem;">
                        <label for="orientation_<%= pilot.pilot_id %>">Resident Orientation</label>
                        <input type="text" id="orientation_<%= pilot.pilot_id %>" value="<%= pilot.resident_orientation_by || '' %>" data-field="resident_orientation_by" placeholder="FC Name" <%= !permissions.canEdit ? 'disabled' : '' %>>
                    </div>
                </div>

                <!-- Quizzes -->
                <div class="progress-section">
                    <h4>Quizzes</h4>
                    <div class="progress-grid">
                        <div class="progress-item"><label for="quiz_scouting_<%= pilot.pilot_id %>">Scouting</label><input type="checkbox" id="quiz_scouting_<%= pilot.pilot_id %>" <%= pilot.quiz_scouting ? 'checked' : '' %> data-field="quiz_scouting" <%= !permissions.canEdit ? 'disabled' : '' %>></div>
                        <div class="progress-item"><label for="quiz_fitting_<%= pilot.pilot_id %>">Fitting</label><input type="checkbox" id="quiz_fitting_<%= pilot.pilot_id %>" <%= pilot.quiz_fitting ? 'checked' : '' %> data-field="quiz_fitting" <%= !permissions.canEdit ? 'disabled' : '' %>></div>
                        <div class="progress-item"><label for="quiz_fleet_roles_<%= pilot.pilot_id %>">Fleet Roles</label><input type="checkbox" id="quiz_fleet_roles_<%= pilot.pilot_id %>" <%= pilot.quiz_fleet_roles ? 'checked' : '' %> data-field="quiz_fleet_roles" <%= !permissions.canEdit ? 'disabled' : '' %>></div>
                        <div class="progress-item"><label for="quiz_site_mechanics_<%= pilot.pilot_id %>">Site Mechanics</label><input type="checkbox" id="quiz_site_mechanics_<%= pilot.pilot_id %>" <%= pilot.quiz_site_mechanics ? 'checked' : '' %> data-field="quiz_site_mechanics" <%= !permissions.canEdit ? 'disabled' : '' %>></div>
                    </div>
                </div>

                <!-- Sign-Offs -->
                <div class="progress-section">
                    <h4>In Fleet Sign-Offs</h4>
                    <div class="progress-grid">
                        <div class="progress-item signoff-item" data-field="signoff_scouting_by">
                            <label for="signoff_scouting_<%= pilot.pilot_id %>">Scouting</label>
                            <span>
                                <a href="#" class="view-signoffs">(<%= pilot.signoff_scouting_by.length %>)</a>
                                <input type="checkbox" id="signoff_scouting_<%= pilot.pilot_id %>" <%= pilot.signoff_scouting_by.includes(commanderName) ? 'checked' : '' %> <%= !permissions.canEdit ? 'disabled' : '' %> data-field="signoff_scouting_by">
                            </span>
                        </div>
                        <div class="progress-item"><label for="signoff_logi_<%= pilot.pilot_id %>">Trusted Logi</label><input type="checkbox" id="signoff_logi_<%= pilot.pilot_id %>" <%= pilot.signoff_trusted_logi ? 'checked' : '' %> data-field="signoff_trusted_logi" disabled></div>
                        <div class="progress-item"><label for="signoff_bastion_<%= pilot.pilot_id %>">Bastion Badge</label><input type="checkbox" id="signoff_bastion_<%= pilot.pilot_id %>" <%= pilot.signoff_bastion ? 'checked' : '' %> data-field="signoff_bastion" <%= !permissions.canEdit ? 'disabled' : '' %>></div>
                        <div class="progress-item signoff-item" data-field="signoff_new_pilot_orientation_by">
                            <label for="signoff_npo_<%= pilot.pilot_id %>">New Pilot Orientation</label>
                            <span>
                                <a href="#" class="view-signoffs">(<%= pilot.signoff_new_pilot_orientation_by.length %>)</a>
                                <input type="checkbox" id="signoff_npo_<%= pilot.pilot_id %>" <%= pilot.signoff_new_pilot_orientation_by.includes(commanderName) ? 'checked' : '' %> <%= !permissions.canEdit ? 'disabled' : '' %> data-field="signoff_new_pilot_orientation_by">
                            </span>
                        </div>
                    </div>
                </div>
                
                <!-- Exam -->
                <div class="progress-section">
                    <h4>Exam</h4>
                    <div class="progress-grid">
                        <div class="progress-item"><label for="exam_mc_<%= pilot.pilot_id %>">Multiple Choice</label><input type="checkbox" id="exam_mc_<%= pilot.pilot_id %>" <%= pilot.exam_multiple_choice ? 'checked' : '' %> data-field="exam_multiple_choice" <%= !permissions.canEdit ? 'disabled' : '' %>></div>
                        <div class="progress-item"><label for="exam_ct_<%= pilot.pilot_id %>">CT Exam</label><input type="checkbox" id="exam_ct_<%= pilot.pilot_id %>" <%= pilot.exam_ct ? 'checked' : '' %> data-field="exam_ct" <%= !permissions.canEdit ? 'disabled' : '' %>></div>
                    </div>
                </div>

                <!-- Comments -->
                <div class="comments-section">
                    <h4>Comments</h4>
                    <% const lastComment = pilot.comments.length > 0 ? pilot.comments[pilot.comments.length - 1] : null; %>
                    <div class="latest-comment" style="<%= !lastComment ? 'display: none;' : '' %>">
                        <% if(lastComment) { %>
                            <strong><%= lastComment.commander %>:</strong> <%= lastComment.comment %>
                        <% } %>
                    </div>
                    <div class="comments-actions">
                         <a href="#" class="view-comments">View All (<%= pilot.comments.length %>) / Add Comment</a>
                    </div>
                </div>
            </div>
        <% }); %>
    </div>
</div>

<!-- Comments Modal -->
<div id="commentsModal" class="modal-overlay">
    <div class="modal">
        <h2 id="commentsModalTitle">Comments for Pilot</h2>
        <div class="modal-content" id="commentsModalContent"></div>
        <% if (permissions.canEdit) { %>
        <div class="form-group" style="margin-top: 1.5rem;">
            <label for="newComment">Add New Comment</label>
            <textarea id="newComment" rows="3"></textarea>
        </div>
        <% } %>
        <div class="modal-actions">
            <button id="closeCommentsModal" class="btn-secondary">Close</button>
            <% if (permissions.canEdit) { %>
            <button id="addCommentBtn" class="btn-primary">Add Comment</button>
            <% } %>
        </div>
    </div>
</div>

<!-- Signoffs Modal -->
<div id="signoffsModal" class="modal-overlay">
    <div class="modal">
        <h2 id="signoffsModalTitle">Sign-offs</h2>
        <div class="modal-content" id="signoffsModalContent"></div>
        <div class="modal-actions">
            <button id="closeSignoffsModal" class="btn-secondary">Close</button>
        </div>
    </div>
</div>

<div id="toast" class="toast"></div>

<script>
    const token = "<%= token %>";
    const commanderName = "<%= commanderName %>";
    const permissions = <%- JSON.stringify(permissions) %>;
    let pilotsData = <%- JSON.stringify(pilots) %>;

    function showToast(message, type = 'info') {
        const toast = document.getElementById('toast');
        toast.textContent = message;
        toast.className = `toast show ${type}`;
        setTimeout(() => {
            toast.className = 'toast';
        }, 3000);
    }

    async function apiCall(endpoint, body) {
        try {
            const response = await fetch(endpoint, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(body)
            });
            const data = await response.json();
            if (!response.ok) {
                throw new Error(data.message || `HTTP error! Status: ${response.status}`);
            }
            return data;
        } catch (error) {
            console.error('API Call Failed:', error);
            showToast(error.message, 'error');
            return null;
        }
    }

    document.addEventListener('DOMContentLoaded', () => {
        const pilotsContainer = document.getElementById('pilots-container');
        if (permissions.canEdit) {
            pilotsContainer.addEventListener('change', handleInputChange);
        }

        async function handleInputChange(event) {
            const input = event.target;
            const field = input.dataset.field;
            if (!field) return;

            const card = input.closest('.pilot-card');
            const pilotId = card.dataset.pilotId;
            let value = (input.type === 'checkbox') ? input.checked : input.value;

            const result = await apiCall(`/training/update/${token}`, { pilotId, field, value });
            
            if (result && result.success) {
                showToast(result.message, 'success');
                const pilot = pilotsData.find(p => p.pilot_id == pilotId);
                
                // Update local data for multi-signoff fields for immediate UI feedback
                if (pilot && Array.isArray(pilot[field])) {
                     if (value) { // checked
                        if (!pilot[field].includes(commanderName)) pilot[field].push(commanderName);
                    } else { // unchecked
                        pilot[field] = pilot[field].filter(name => name !== commanderName);
                    }
                    const signoffItem = input.closest('.signoff-item');
                    const link = signoffItem.querySelector('a');
                    link.textContent = `(${pilot[field].length})`;
                }

                // If a checkbox was changed, update the 'Last Active' date on the page.
                if (input.type === 'checkbox') {
                    const lastActiveInput = card.querySelector('input[data-field="last_active"]');
                    if (lastActiveInput) {
                        const today = new Date();
                        // Format to YYYY-MM-DD for the date input
                        const yyyy = today.getFullYear();
                        const mm = String(today.getMonth() + 1).padStart(2, '0');
                        const dd = String(today.getDate()).padStart(2, '0');
                        lastActiveInput.value = `${yyyy}-${mm}-${dd}`;
                    }
                }

            } else {
                showToast(result ? result.message : 'Update failed', 'error');
                // Revert UI change on failure
                if (input.type === 'checkbox') {
                    input.checked = !input.checked;
                } else {
                    // This is trickier for text/date, would need to store old value
                }
            }
        }

        // --- Add Resident Logic ---
        if (permissions.canAddResidents) {
            const addResidentBtn = document.getElementById('add-resident-btn');
            addResidentBtn.addEventListener('click', async () => {
                const pilotName = document.getElementById('new-pilot-name').value.trim();
                const discordId = document.getElementById('new-pilot-discord-id').value.trim();

                if (!pilotName || !discordId) {
                    showToast('Pilot Name and Discord ID are required.', 'error');
                    return;
                }

                addResidentBtn.disabled = true;
                addResidentBtn.textContent = 'Adding...';

                const result = await apiCall(`/training/add-resident/${token}`, { pilotName, discordId });
                if (result && result.success) {
                    showToast(result.message, 'success');
                    window.location.reload(); 
                } else {
                    showToast(result ? result.message : 'Failed to add resident.', 'error');
                }
                
                addResidentBtn.disabled = false;
                addResidentBtn.textContent = 'Add Resident';
            });
        }
        
        // --- Modal Logic using Event Delegation ---
        const commentsModal = document.getElementById('commentsModal');
        const signoffsModal = document.getElementById('signoffsModal');
        
        pilotsContainer.addEventListener('click', (e) => {
            const target = e.target;
            if (target.classList.contains('view-comments')) {
                e.preventDefault();
                const pilotId = target.closest('.pilot-card').dataset.pilotId;
                openCommentsModal(pilotId);
            }
            if (target.classList.contains('view-signoffs')) {
                e.preventDefault();
                const signoffItem = target.closest('.signoff-item');
                const pilotId = signoffItem.closest('.pilot-card').dataset.pilotId;
                const field = signoffItem.dataset.field;
                openSignoffsModal(pilotId, field);
            }
        });

        function openCommentsModal(pilotId) {
            const pilot = pilotsData.find(p => p.pilot_id == pilotId);
            if (!pilot) return;

            document.getElementById('commentsModalTitle').textContent = `Comments for ${pilot.pilot_name}`;
            const contentEl = document.getElementById('commentsModalContent');
            contentEl.innerHTML = '';
            
            if (pilot.comments.length === 0) {
                contentEl.innerHTML = '<p>No comments yet.</p>';
            } else {
                pilot.comments.slice().reverse().forEach(c => {
                    const commentDiv = document.createElement('div');
                    commentDiv.className = 'comment';
                    const date = new Date(c.date).toLocaleString([], { dateStyle: 'medium', timeStyle: 'short' });
                    commentDiv.innerHTML = `
                        <div class="comment-header">By <strong>${c.commander}</strong> on ${date}</div>
                        <div class="comment-body">${c.comment.replace(/</g, "&lt;").replace(/>/g, "&gt;")}</div>
                    `;
                    contentEl.appendChild(commentDiv);
                });
            }
            
            const addCommentBtn = document.getElementById('addCommentBtn');
            if (addCommentBtn) {
                 addCommentBtn.onclick = async () => {
                     const newCommentEl = document.getElementById('newComment');
                     const commentText = newCommentEl.value.trim();
                     if (!commentText) return;

                     const result = await apiCall(`/training/add-comment/${token}`, { pilotId, comment: commentText });

                     if(result && result.success) {
                        showToast(result.message, 'success');
                        const newComment = { commander: commanderName, comment: commentText, date: new Date().toISOString() };
                        pilot.comments.push(newComment);
                        newCommentEl.value = '';
                        // Update UI
                        const card = document.querySelector(`.pilot-card[data-pilot-id="${pilotId}"]`);
                        card.querySelector('.view-comments').textContent = `View All (${pilot.comments.length}) / Add Comment`;
                        const latestCommentEl = card.querySelector('.latest-comment');
                        latestCommentEl.innerHTML = `<strong>${newComment.commander}:</strong> ${newComment.comment}`;
                        latestCommentEl.style.display = 'block';

                        openCommentsModal(pilotId); // Refresh modal content
                     }
                };
            }
            commentsModal.style.display = 'flex';
        }

        function openSignoffsModal(pilotId, field) {
            const pilot = pilotsData.find(p => p.pilot_id == pilotId);
            if (!pilot) return;

            const signoffs = pilot[field] || [];
            const fieldName = field.replace('signoff_', '').replace('_by', '').replace(/_/g, ' ');
            
            document.getElementById('signoffsModalTitle').textContent = `Sign-offs for ${fieldName}`;
            const contentEl = document.getElementById('signoffsModalContent');
            
            if (signoffs.length > 0) {
                contentEl.innerHTML = `<ul>${signoffs.map(name => `<li>${name}</li>`).join('')}</ul>`;
            } else {
                contentEl.innerHTML = '<p>No sign-offs yet.</p>';
            }
            
            signoffsModal.style.display = 'flex';
        }

        // Close modal logic
        document.getElementById('closeCommentsModal').onclick = () => commentsModal.style.display = 'none';
        document.getElementById('closeSignoffsModal').onclick = () => signoffsModal.style.display = 'none';
        window.onclick = (e) => {
            if (e.target == commentsModal) commentsModal.style.display = 'none';
            if (e.target == signoffsModal) signoffsModal.style.display = 'none';
        };
    });
</script>

</body>
</html>