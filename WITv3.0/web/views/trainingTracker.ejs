<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Commander Training Tracker</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        :root {
            --bg-primary: #1e293b; --bg-secondary: #334155; --bg-tertiary: #475569;
            --bg-card: #2d3748; --text-primary: #e2e8f0; --text-secondary: #94a3b8;
            --accent-blue: #38bdf8; --accent-green: #4ade80; --accent-red: #f87171;
            --accent-yellow: #facc15; --border-color: #4a5568;
        }
        body {
            font-family: 'Inter', sans-serif;
            background-color: var(--bg-primary);
            color: var(--text-primary);
            margin: 0;
            padding: 1.5rem;
        }
        .container { max-width: 98%; margin: auto; }
        h1 { text-align: center; color: #f8fafc; margin-bottom: 2rem; }
        .panel { background-color: var(--bg-secondary); border-radius: 0.75rem; padding: 1.5rem; border: 1px solid var(--border-color); box-shadow: 0 4px 6px -1px rgba(0,0,0,0.1), 0 2px 4px -2px rgba(0,0,0,0.1); }
        .pilots-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
            gap: 1.5rem;
            margin-top: 1.5rem;
        }
        .pilot-card {
            background-color: var(--bg-card);
            border-radius: 0.5rem;
            padding: 1.25rem;
            display: flex;
            flex-direction: column;
            gap: 1.5rem;
            border: 1px solid var(--border-color);
        }
        .pilot-card h3 {
            margin: 0;
            font-size: 1.25rem;
            color: var(--accent-blue);
            padding-bottom: 0.75rem;
            border-bottom: 1px solid var(--border-color);
        }
        .pilot-card h4 {
            margin: 0 0 0.75rem 0;
            font-size: 0.875rem;
            font-weight: 600;
            color: var(--text-secondary);
            text-transform: uppercase;
            letter-spacing: 0.05em;
        }
        .info-grid, .progress-grid {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 1rem;
        }
        .form-group { margin-bottom: 0; }
        label { display: block; margin-bottom: 0.35rem; font-size: 0.75rem; font-weight: 500; color: var(--text-secondary); }
        input[type="text"], input[type="date"] {
            width: 100%;
            padding: 0.5rem;
            border-radius: 0.375rem;
            background-color: var(--bg-primary);
            border: 1px solid var(--border-color);
            color: var(--text-primary);
            font-size: 0.875rem;
            box-sizing: border-box;
        }
        input:disabled, textarea:disabled { background-color: #3d4c5f; cursor: not-allowed; }
        .progress-item {
            display: flex;
            align-items: center;
            justify-content: space-between;
            background-color: var(--bg-secondary);
            padding: 0.6rem 0.8rem;
            border-radius: 0.375rem;
        }
        .progress-item label { margin: 0; color: var(--text-primary); font-size: 0.875rem; }
        
        input[type="checkbox"] { width: 1.1rem; height: 1.1rem; accent-color: var(--accent-green); }
        input[type="checkbox"]:not(:disabled) { cursor: pointer; }
        input[type="checkbox"]:disabled { cursor: not-allowed; opacity: 0.6; }
        
        input[type="checkbox"]:disabled:checked {
            opacity: 1;
        }

        .signoff-dots { display: flex; gap: 4px; }
        .signoff-dot { width: 12px; height: 12px; border-radius: 50%; background-color: var(--bg-tertiary); }
        .signoff-dot.filled { background-color: var(--accent-green); }
        .signoff-dot.mine { background-color: var(--accent-blue); }

        .comments-section { margin-top: 1rem; }
        .latest-comment {
            background-color: var(--bg-secondary);
            padding: 0.75rem;
            border-radius: 0.375rem;
            font-size: 0.8rem;
            color: var(--text-secondary);
            margin-bottom: 0.5rem;
            border-left: 3px solid var(--accent-yellow);
            white-space: pre-wrap;
            word-break: break-word;
        }
        .latest-comment strong { color: var(--text-primary); }
        .comments-actions { text-align: right; }
        .comments-actions a, .complex-signoff-item .view-signoffs-btn { color: var(--accent-blue); cursor: pointer; text-decoration: none; font-size: 0.875rem; }

        .add-resident-grid { display: grid; grid-template-columns: 1fr 1fr auto; gap: 1rem; align-items: end; }
        
        .modal-overlay { position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.7); display: none; justify-content: center; align-items: center; z-index: 1000; }
        .modal { background: var(--bg-secondary); padding: 2rem; border-radius: 0.5rem; max-width: 600px; width: 90%; max-height: 80vh; display: flex; flex-direction: column; }
        .modal h2 { margin: 0 0 1rem 0; text-align: left; border: none; font-size: 1.25rem; color: #f8fafc;}
        .modal-content { overflow-y: auto; margin-right: -1rem; padding-right: 1rem;}
        .modal-actions { margin-top: 1.5rem; display: flex; justify-content: flex-end; gap: 1rem; }
        button { padding: 0.5rem 1rem; border-radius: 0.375rem; border: none; cursor: pointer; font-weight: 600; }
        button:disabled { cursor: not-allowed; opacity: 0.7; }
        .btn-primary { background-color: var(--accent-blue); color: white; }
        .btn-secondary { background-color: var(--bg-tertiary); color: var(--text-primary); }
        .btn-danger { background-color: var(--accent-red); color: white; }
        
        .comment, .signoff-entry { border-bottom: 1px solid var(--border-color); padding: 0.75rem 0; }
        .comment:last-child, .signoff-entry:last-child { border-bottom: none; }
        .comment-header, .signoff-header { font-size: 0.8rem; color: var(--text-secondary); }
        .comment-header strong, .signoff-header strong { color: var(--text-primary); }
        .comment-body, .signoff-body { margin-top: 0.25rem; white-space: pre-wrap; font-size: 0.875rem;}
        textarea { width: 100%; padding: 0.75rem; border-radius: 0.375rem; background-color: var(--bg-primary); border: 1px solid var(--border-color); color: var(--text-primary); font-size: 1rem; box-sizing: border-box; resize: vertical; }
        
        .toast { position: fixed; top: 1.5rem; right: 1.5rem; padding: 1rem 1.5rem; border-radius: 0.5rem; z-index: 1001; opacity: 0; transform: translateY(-20px); transition: opacity 0.3s, transform 0.3s; box-shadow: 0 4px 10px rgba(0,0,0,0.2); }
        .toast.show { opacity: 1; transform: translateY(0); }
        .toast.success { background-color: var(--accent-green); color: black; }
        .toast.error { background-color: var(--accent-red); color: white; }
        .toast.info { background-color: var(--accent-blue); color: white; }

        .complex-signoff-item { display: flex; justify-content: space-between; align-items: center; }
    </style>
</head>
<body>

<div class="container">
    <h1>Commander Training Tracker</h1>
    
    <% if (permissions.canAddResidents) { %>
    <div class="panel">
        <h2>Add New Resident</h2>
        <div class="add-resident-grid">
            <div class="form-group">
                <label for="new-pilot-name">Pilot Name</label>
                <input type="text" id="new-pilot-name" placeholder="EVE Character Name">
            </div>
            <div class="form-group">
                <label for="new-pilot-discord-id">User's Discord ID</label>
                <input type="text" id="new-pilot-discord-id" placeholder="Right-click user -> Copy User ID">
            </div>
            <div class="form-group">
                <button id="add-resident-btn" class="btn-primary" style="width: 100%; padding: 0.75rem;">Add Resident</button>
            </div>
        </div>
    </div>
    <% } %>

    <div class="pilots-grid" id="pilots-container">
         <!-- Pilot cards will be dynamically inserted here by JavaScript -->
    </div>
</div>

<!-- Comments Modal -->
<div id="commentsModal" class="modal-overlay">
    <div class="modal">
        <h2 id="commentsModalTitle">Comments for Pilot</h2>
        <div class="modal-content" id="commentsModalContent"></div>
        <% if (permissions.canEdit) { %>
        <div class="form-group" style="margin-top: 1.5rem;">
            <label for="newComment">Add New Comment</label>
            <textarea id="newComment" rows="3" placeholder="Enter your comment..."></textarea>
        </div>
        <% } %>
        <div class="modal-actions">
            <button class="btn-secondary" onclick="closeModal('commentsModal')">Close</button>
            <% if (permissions.canEdit) { %>
            <button id="addCommentBtn" class="btn-primary">Add Comment</button>
            <% } %>
        </div>
    </div>
</div>

<!-- Signoffs Modal -->
<div id="signoffsModal" class="modal-overlay">
    <div class="modal">
        <h2 id="signoffsModalTitle">Sign-offs</h2>
        <div class="modal-content" id="signoffsModalContent"></div>
         <% if (permissions.canEdit) { %>
        <div id="addSignoffForm" style="display: none; margin-top: 1.5rem;">
            <div class="form-group">
                <label for="newSignoffComment">Add Your Sign-off (Comment Optional)</label>
                <textarea id="newSignoffComment" rows="3" placeholder="Enter an optional comment..."></textarea>
            </div>
            <button id="addSignoffBtn" class="btn-primary">Add Sign-off</button>
        </div>
        <div id="removeSignoffAction" style="display: none; margin-top: 1.5rem;">
             <button id="removeSignoffBtn" class="btn-danger">Remove My Sign-off</button>
        </div>
        <% } %>
        <div class="modal-actions">
            <button class="btn-secondary" onclick="closeModal('signoffsModal')">Close</button>
        </div>
    </div>
</div>

<div id="toast" class="toast"></div>

<script src="/socket.io/socket.io.js"></script>
<script>
    // --- GLOBAL STATE ---
    const token = "<%= token %>";
    const commanderName = "<%= commanderName %>";
    const commanderDiscordId = "<%= commanderDiscordId %>";
    const permissions = <%- JSON.stringify(permissions) %>;
    let pilotsData = <%- JSON.stringify(pilots) %>;

    // --- UTILITY FUNCTIONS ---
    function showToast(message, type = 'info') {
        const toast = document.getElementById('toast');
        toast.textContent = message;
        toast.className = `toast show ${type}`;
        setTimeout(() => {
            toast.className = 'toast';
        }, 3000);
    }

    async function apiCall(endpoint, body) {
        try {
            const options = {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(body)
            };
            const response = await fetch(endpoint, options);
            const data = await response.json();
            if (!response.ok) {
                throw new Error(data.message || `HTTP error! Status: ${response.status}`);
            }
            return data;
        } catch (error) {
            console.error('API Call Failed:', error);
            showToast(error.message, 'error');
            return null;
        }
    }

    // --- MODAL FUNCTIONS ---
    function openModal(modalId) {
        document.getElementById(modalId).style.display = 'flex';
    }
    function closeModal(modalId) {
        document.getElementById(modalId).style.display = 'none';
    }
    
    // --- DYNAMIC RENDERING FUNCTIONS ---
    function createComplexSignoffHTML(pilot, field, label) {
        const signoffs = pilot[field] || [];
        let dotsHTML = '';
        for (let i = 0; i < 3; i++) {
            if (signoffs[i]) {
                const dotClass = signoffs[i].discordId === commanderDiscordId ? 'mine' : 'filled';
                dotsHTML += `<div class="signoff-dot ${dotClass}" title="${signoffs[i].commander}"></div>`;
            } else {
                dotsHTML += `<div class="signoff-dot"></div>`;
            }
        }

        return `
            <div class="complex-signoff-item" data-field="${field}">
                <label>${label}</label>
                <div style="display: flex; align-items: center; gap: 0.5rem;">
                    <div class="signoff-dots">${dotsHTML}</div>
                    <a href="#" class="view-signoffs-btn">View/Add</a>
                </div>
            </div>
        `;
    }
    
    function createPilotCardHTML(pilot) {
        const lastComment = pilot.comments.length > 0 ? pilot.comments[pilot.comments.length - 1] : null;
        const canEditSimple = permissions.canEdit; // Editing simple fields is line_commander+

        return `
            <div class="pilot-card" data-pilot-id="${pilot.pilot_id}">
                <h3>${pilot.pilot_name}</h3>
                <div class="info-section">
                    <h4>General</h4>
                    <div class="info-grid">
                        <div class="form-group">
                            <label>Start Date</label>
                            <input type="date" value="${pilot.start_date ? new Date(pilot.start_date).toISOString().split('T')[0] : ''}" data-field="start_date" ${!canEditSimple ? 'disabled' : ''}>
                        </div>
                         <div class="form-group">
                            <label>Last Active</label>
                            <input type="date" value="${pilot.last_active ? new Date(pilot.last_active).toISOString().split('T')[0] : ''}" data-field="last_active" disabled>
                        </div>
                    </div>
                     <div class="form-group" style="margin-top: 1rem;">
                        <label>Resident Orientation</label>
                        <input type="text" value="${pilot.resident_orientation_by || ''}" data-field="resident_orientation_by" placeholder="FC Name" ${!canEditSimple ? 'disabled' : ''}>
                    </div>
                </div>
                <div class="progress-section">
                    <h4>Quizzes</h4>
                    <div class="progress-grid">
                        <div class="progress-item"><label>Scouting</label><input type="checkbox" ${pilot.quiz_scouting ? 'checked' : ''} disabled></div>
                        <div class="progress-item"><label>Fitting</label><input type="checkbox" ${pilot.quiz_fitting ? 'checked' : ''} disabled></div>
                        <div class="progress-item"><label>Fleet Roles</label><input type="checkbox" ${pilot.quiz_fleet_roles ? 'checked' : ''} disabled></div>
                        <div class="progress-item"><label>Site Mechanics</label><input type="checkbox" ${pilot.quiz_site_mechanics ? 'checked' : ''} disabled></div>
                    </div>
                </div>
                <div class="progress-section">
                    <h4>In Fleet Sign-Offs</h4>
                    <div class="progress-grid">
                        ${createComplexSignoffHTML(pilot, 'signoff_scouting', 'Scouting')}
                        <div class="progress-item"><label>Trusted Logi</label><input type="checkbox" ${pilot.signoff_trusted_logi ? 'checked' : ''} disabled></div>
                        <div class="progress-item"><label>Bastion Badge</label><input type="checkbox" ${pilot.signoff_bastion ? 'checked' : ''} disabled></div>
                        ${createComplexSignoffHTML(pilot, 'signoff_new_pilot_orientation', 'New Pilot Orientation')}
                    </div>
                </div>
                <div class="progress-section">
                    <h4>Exam</h4>
                    <div class="progress-grid">
                        <div class="progress-item"><label>Multiple Choice</label><input type="checkbox" id="exam_mc_${pilot.pilot_id}" ${pilot.exam_multiple_choice ? 'checked' : ''} data-field="exam_multiple_choice" ${!canEditSimple ? 'disabled' : ''}></div>
                        <div class="progress-item"><label>CT Exam</label><input type="checkbox" id="exam_ct_${pilot.pilot_id}" ${pilot.exam_ct ? 'checked' : ''} data-field="exam_ct" ${!canEditSimple ? 'disabled' : ''}></div>
                    </div>
                </div>
                <div class="comments-section">
                     <div class="latest-comment" style="${!lastComment ? 'display: none;' : ''}">
                        ${lastComment ? `<strong>${lastComment.commander}:</strong> ${lastComment.comment.replace(/</g, "&lt;").replace(/>/g, "&gt;")}` : ''}
                    </div>
                    <div class="comments-actions">
                         <a href="#" class="view-comments">View All (${pilot.comments.length}) / Add Comment</a>
                    </div>
                </div>
            </div>
        `;
    }

    function renderAllPilots() {
        const pilotsContainer = document.getElementById('pilots-container');
        pilotsContainer.innerHTML = pilotsData.map(createPilotCardHTML).join('');
    }

    async function fetchAndRenderPilots() {
        const result = await apiCall(`/training/api/pilots/${token}`);
        if (result && result.success) {
            pilotsData = result.pilots;
            renderAllPilots();
        }
    }

    // --- EVENT HANDLERS & INITIALIZATION ---
    document.addEventListener('DOMContentLoaded', () => {
        const pilotsContainer = document.getElementById('pilots-container');

        // Main event listener for the entire grid
        pilotsContainer.addEventListener('change', handleSimpleInputChange);
        pilotsContainer.addEventListener('click', handleGridClick);
        
        // Setup for "Add Resident" form if it exists
        if (permissions.canAddResidents) {
            const addResidentBtn = document.getElementById('add-resident-btn');
            addResidentBtn.addEventListener('click', handleAddResident);
        }

        // Setup for modals
        document.getElementById('addCommentBtn')?.addEventListener('click', handleAddComment);
        document.getElementById('addSignoffBtn')?.addEventListener('click', handleAddSignoff);
        document.getElementById('removeSignoffBtn')?.addEventListener('click', handleRemoveSignoff);
        document.querySelectorAll('.modal-overlay').forEach(overlay => {
            overlay.addEventListener('click', e => {
                if (e.target === overlay) closeModal(overlay.id);
            });
        });

        // WebSocket listener
        const socket = io();
        socket.on('connect', () => console.log('Successfully connected to WebSocket server.'));
        socket.on('training-update', () => {
            console.log('Received training-update event. Fetching new data...');
            showToast('Data updated. Refreshing list...', 'info');
            fetchAndRenderPilots();
        });
        socket.on('disconnect', () => {
            console.warn('Disconnected from WebSocket server. Real-time updates will be paused.');
            showToast('Connection lost. Real-time updates paused.', 'error');
        });

        // Initial render on page load
        renderAllPilots();
    });

    // --- EVENT HANDLER FUNCTIONS ---

    async function handleSimpleInputChange(event) {
        const input = event.target;
        const field = input.dataset.field;
        if (!field) return;

        const card = input.closest('.pilot-card');
        const pilotId = card.dataset.pilotId;
        const value = (input.type === 'checkbox') ? input.checked : input.value;

        const result = await apiCall(`/training/api/update/${token}`, { pilotId, field, value });
        
        if (result && result.success) {
            showToast(result.message, 'success');
            // The socket event will trigger the UI update, so we don't need to do it here.
        } else {
            showToast(result ? result.message : 'Update failed', 'error');
            // Revert the change on failure
            if (input.type === 'checkbox') {
                input.checked = !input.checked;
            } else {
                 // You might want to store the old value to revert text/date inputs
            }
        }
    }

    function handleGridClick(e) {
        const target = e.target;
        if (target.classList.contains('view-comments')) {
            e.preventDefault();
            const pilotId = target.closest('.pilot-card').dataset.pilotId;
            openCommentsModal(pilotId);
        }
        if (target.classList.contains('view-signoffs-btn')) {
            e.preventDefault();
            const pilotId = target.closest('.pilot-card').dataset.pilotId;
            const field = target.closest('.complex-signoff-item').dataset.field;
            openSignoffsModal(pilotId, field);
        }
    }
    
    async function handleAddResident() {
        const addResidentBtn = document.getElementById('add-resident-btn');
        const pilotName = document.getElementById('new-pilot-name').value.trim();
        const discordId = document.getElementById('new-pilot-discord-id').value.trim();

        if (!pilotName || !discordId) {
            showToast('Pilot Name and Discord ID are required.', 'error');
            return;
        }

        addResidentBtn.disabled = true;
        addResidentBtn.textContent = 'Adding...';

        const result = await apiCall(`/training/api/add-resident/${token}`, { pilotName, discordId });
        if (result && result.success) {
            showToast(result.message, 'success');
            document.getElementById('new-pilot-name').value = '';
            document.getElementById('new-pilot-discord-id').value = '';
        }
        
        addResidentBtn.disabled = false;
        addResidentBtn.textContent = 'Add Resident';
    }

    async function handleAddComment() {
        const modal = document.getElementById('commentsModal');
        const pilotId = modal.dataset.pilotId;
        const comment = document.getElementById('newComment').value.trim();
        if (!comment) return;

        const btn = document.getElementById('addCommentBtn');
        btn.disabled = true;
        btn.textContent = 'Adding...';

        const result = await apiCall(`/training/api/add-comment/${token}`, { pilotId, comment });
        if (result && result.success) {
            showToast(result.message, 'success');
            document.getElementById('newComment').value = '';
            closeModal('commentsModal');
        }
        
        btn.disabled = false;
        btn.textContent = 'Add Comment';
    }

    async function handleAddSignoff() {
        const modal = document.getElementById('signoffsModal');
        const { pilotId, field } = modal.dataset;
        const comment = document.getElementById('newSignoffComment').value.trim();
        
        const btn = document.getElementById('addSignoffBtn');
        btn.disabled = true;

        const result = await apiCall(`/training/api/add-signoff/${token}`, { pilotId, field, comment });
        if (result && result.success) {
            showToast(result.message, 'success');
            closeModal('signoffsModal');
        }
        
        btn.disabled = false;
    }

    async function handleRemoveSignoff() {
        if (!confirm('Are you sure you want to remove your sign-off?')) return;
        
        const modal = document.getElementById('signoffsModal');
        const { pilotId, field } = modal.dataset;
        
        const btn = document.getElementById('removeSignoffBtn');
        btn.disabled = true;

        const result = await apiCall(`/training/api/remove-signoff/${token}`, { pilotId, field });
        if (result && result.success) {
            showToast(result.message, 'success');
            closeModal('signoffsModal');
        }
        
        btn.disabled = false;
    }

    function openCommentsModal(pilotId) {
        const pilot = pilotsData.find(p => p.pilot_id == pilotId);
        if (!pilot) return;

        const modal = document.getElementById('commentsModal');
        modal.dataset.pilotId = pilotId;
        
        document.getElementById('commentsModalTitle').textContent = `Comments for ${pilot.pilot_name}`;
        const contentEl = document.getElementById('commentsModalContent');
        contentEl.innerHTML = '';
        
        if (pilot.comments.length === 0) {
            contentEl.innerHTML = '<p style="color: var(--text-secondary);">No comments yet.</p>';
        } else {
            pilot.comments.slice().reverse().forEach(c => {
                const commentDiv = document.createElement('div');
                commentDiv.className = 'comment';
                const date = new Date(c.date).toLocaleString([], { dateStyle: 'medium', timeStyle: 'short' });
                commentDiv.innerHTML = `
                    <div class="comment-header">By <strong>${c.commander}</strong> on ${date}</div>
                    <div class="comment-body">${c.comment.replace(/</g, "&lt;").replace(/>/g, "&gt;")}</div>
                `;
                contentEl.appendChild(commentDiv);
            });
        }
        
        openModal('commentsModal');
    }

    function openSignoffsModal(pilotId, field) {
        const pilot = pilotsData.find(p => p.pilot_id == pilotId);
        if (!pilot) return;

        const modal = document.getElementById('signoffsModal');
        modal.dataset.pilotId = pilotId;
        modal.dataset.field = field;

        const signoffs = pilot[field] || [];
        const fieldName = field.replace('signoff_', '').replace(/_/g, ' ');
        
        document.getElementById('signoffsModalTitle').textContent = `Sign-offs for ${fieldName}`;
        const contentEl = document.getElementById('signoffsModalContent');
        
        if (signoffs.length > 0) {
            contentEl.innerHTML = signoffs.map(s => {
                const date = new Date(s.date).toLocaleDateString([], { dateStyle: 'long' });
                return `
                    <div class="signoff-entry">
                        <div class="signoff-header">By <strong>${s.commander}</strong> on ${date}</div>
                        ${s.comment ? `<div class="signoff-body">${s.comment.replace(/</g, "&lt;").replace(/>/g, "&gt;")}</div>` : ''}
                    </div>
                `;
            }).join('');
        } else {
            contentEl.innerHTML = '<p style="color: var(--text-secondary);">No sign-offs yet.</p>';
        }
        
        const addForm = document.getElementById('addSignoffForm');
        const removeAction = document.getElementById('removeSignoffAction');
        addForm.style.display = 'none';
        removeAction.style.display = 'none';

        if (permissions.canEdit) {
            const hasSignedOff = signoffs.some(s => s.discordId === commanderDiscordId);
            if (hasSignedOff) {
                removeAction.style.display = 'block';
            } else if (signoffs.length < 3) {
                addForm.style.display = 'block';
                document.getElementById('newSignoffComment').value = '';
            }
        }
        
        openModal('signoffsModal');
    }
</script>

</body>
</html>
