<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Reaction Role Management</title>
    <style>
        :root {
            --bg-dark-1: #1e293b; --bg-dark-2: #334155; --bg-dark-3: #475569;
            --text-light-1: #e2e8f0; --text-light-2: #cbd5e1; --text-light-3: #94a3b8;
            --accent-blue: #38bdf8; --accent-green: #4ade80; --accent-red: #f87171;
        }
        body { font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif; background-color: var(--bg-dark-1); color: var(--text-light-1); margin: 0; padding: 2rem; font-size: 16px; }
        .container { 
            max-width: 1600px; 
            margin: 0 auto; 
            display: grid; 
            grid-template-columns: 2fr 1fr; 
            gap: 2rem; 
            align-items: flex-start;
        }
        .main-content {
            display: flex;
            flex-direction: column;
            gap: 2rem;
        }
        .panel { background-color: var(--bg-dark-2); padding: 1.5rem 2rem; border-radius: 0.75rem; border: 1px solid var(--bg-dark-3); }
        h1, h2, h3 { color: #f8fafc; border-bottom: 1px solid var(--bg-dark-3); padding-bottom: 0.75rem; margin-top: 0; }
        h1 { font-size: 1.8rem; }
        h2 { font-size: 1.4rem; margin-bottom: 1.5rem; }
        h3 { font-size: 1.2rem; border: none; padding-bottom: 0.5rem; }
        .form-group { margin-bottom: 1.25rem; }
        label { display: block; margin-bottom: 0.5rem; font-size: 0.9rem; font-weight: 500; color: var(--text-light-2); }
        input[type="text"], textarea, select { width: 100%; padding: 0.75rem; border-radius: 0.375rem; background-color: var(--bg-dark-1); border: 1px solid var(--bg-dark-3); color: var(--text-light-1); font-size: 1rem; box-sizing: border-box; }
        textarea { resize: vertical; min-height: 120px; }
        .radio-group { display: flex; gap: 1.5rem; margin-bottom: 1rem; }
        .radio-group label { display: flex; align-items: center; gap: 0.5rem; cursor: pointer; }
        .conditional-fields { padding-left: 1.5rem; border-left: 2px solid var(--bg-dark-3); margin-top: 1rem; }
        .reaction-mapper { display: grid; grid-template-columns: auto 1fr auto 1fr auto; gap: 1rem; align-items: center; margin-bottom: 1rem; }
        button, .btn { padding: 0.75rem 1.5rem; border: none; border-radius: 0.375rem; color: #fff; font-size: 1rem; font-weight: 600; cursor: pointer; transition: background-color 0.2s; text-align: center; display: inline-block; }
        .btn-primary { background-color: #0ea5e9; } .btn-primary:hover { background-color: #38bdf8; }
        .btn-secondary { background-color: #43b581; } .btn-secondary:hover { background-color: #38a169; }
        .btn-danger { background-color: #ef4444; } .btn-danger:hover { background-color: #dc2626; }
        .btn-sm { padding: 0.4rem 0.8rem; font-size: 0.8rem; }
        .actions { margin-top: 2rem; text-align: right; }
        .hidden { display: none; }
        .existing-setup { background-color: #2c3e50; padding: 1rem; border-radius: 0.5rem; margin-bottom: 1rem; }
        .existing-setup-header { display: flex; justify-content: space-between; align-items: center; }
        .existing-setup-info code { background-color: var(--bg-dark-1); padding: 0.2rem 0.4rem; border-radius: 0.25rem; }
        .existing-setup-content { font-style: italic; color: var(--text-light-3); max-height: 5em; overflow: hidden; text-overflow: ellipsis; white-space: pre-wrap; margin: 0.5rem 0; }
        .existing-setup-roles { margin-top: 0.75rem; padding-top: 0.75rem; border-top: 1px solid var(--bg-dark-3); display: flex; flex-wrap: wrap; gap: 0.5rem 1rem;}
        .existing-setup-roles div { display: flex; align-items: center; gap: 0.5rem; background: var(--bg-dark-2); padding: 0.25rem 0.5rem; border-radius: 4px; }
        .existing-setup-roles img { width: 20px; height: 20px; }

        @media (max-width: 1200px) {
            .container {
                grid-template-columns: 1fr;
            }
            .emoji-picker-panel {
                position: static;
            }
        }

        .emoji-picker-panel {
            position: sticky;
            top: 2rem;
            max-height: calc(100vh - 4rem);
            display: flex;
            flex-direction: column;
        }
        .emoji-picker-body {
            display: flex;
            flex-direction: column;
            overflow: hidden; 
            flex-grow: 1;
        }
        .emoji-picker-container { display: flex; align-items: center; gap: 0.5rem; background-color: var(--bg-dark-1); padding: 5px; border-radius: 5px; border: 1px solid var(--bg-dark-3); transition: border-color 0.2s, box-shadow 0.2s; }
        .reaction-mapper.is-active-picker .emoji-picker-container {
            border-color: var(--accent-blue);
            box-shadow: 0 0 0 2px rgba(56, 189, 248, 0.4);
        }
        .emoji-picker-btn { padding: 0.5rem; font-size: 0.8rem; min-width: 100px; background-color: var(--bg-dark-3); }
        .emoji-picker-btn:hover { background-color: #55667d; }
        .emoji-display { min-width: 32px; min-height: 32px; display: flex; align-items: center; justify-content: center; background-color: #293344; border-radius: 4px; font-size: 24px; }
        .emoji-display img { width: 28px; height: 28px; }
        #emoji-search { margin-bottom: 1rem; }
        .emoji-tabs { display: flex; margin-bottom: 1rem; border-bottom: 1px solid var(--bg-dark-3); }
        .tab-btn { background: none; border: none; color: var(--text-light-3); padding: 0.5rem 1rem; cursor: pointer; border-bottom: 2px solid transparent; }
        .tab-btn.active { color: var(--text-light-1); border-bottom-color: var(--accent-blue); }
        .emoji-grid { 
            overflow-y: auto; 
            display: grid; 
            grid-template-columns: repeat(auto-fill, minmax(40px, 1fr)); 
            gap: 0.5rem; 
            padding: 0.5rem;
            flex-grow: 1;
        }
        .emoji-item { width: 40px; height: 40px; display: flex; align-items: center; justify-content: center; background-color: var(--bg-dark-3); border-radius: 4px; cursor: pointer; transition: background-color 0.2s; font-size: 28px; }
        .emoji-item:hover { background-color: #55667d; }
        .emoji-item img { width: 32px; height: 32px; }
        .emoji-category { font-weight: bold; color: var(--text-light-2); margin-top: 1rem; margin-bottom: 0.5rem; grid-column: 1 / -1; }
    </style>
</head>
<body>

    <div class="container">
        <div class="main-content">
            <div class="panel">
                <h1>Reaction Role Management</h1>
                <form id="reaction-role-form" action="/reactionroles/<%= token %>" method="POST">
                    
                    <h2>Configure Message</h2>
                    <div class="form-group radio-group">
                        <label><input type="radio" name="message_option" value="new" checked> Create New Message</label>
                        <label><input type="radio" name="message_option" value="existing"> Use Existing Message</label>
                    </div>

                    <div class="form-group">
                        <label for="message_content">Message Content</label>
                        <textarea name="message_content" id="message_content" placeholder="Enter the text for your new message here..." required></textarea>
                    </div>

                    <div id="existing-message-fields" class="conditional-fields hidden">
                        <div class="form-group">
                            <label for="existing_message_id">Message ID</label>
                            <input type="text" name="existing_message_id" id="existing_message_id" placeholder="Paste the ID of the message to use">
                        </div>
                    </div>

                     <div class="form-group">
                        <label for="channel_id">Channel</label>
                        <select name="channel_id" id="channel_id" required>
                            <option value="" disabled selected>Select a channel...</option>
                            <% channels.forEach(channel => { %>
                                <option value="<%= channel.id %>">#<%= channel.name %></option>
                            <% }); %>
                        </select>
                    </div>

                    <h2>Emoji to Role Mappings</h2>
                    <div id="reactions-container">
                        <!-- Dynamic reaction mappers will be inserted here -->
                    </div>
                    <button type="button" class="btn btn-secondary" id="add-reaction-btn">Add Emoji/Role Pair</button>

                    <div class="actions">
                        <button type="submit" class="btn btn-primary">Save and Apply Changes</button>
                    </div>
                </form>
            </div>

            <% if (existingSetups.length > 0) { %>
            <div class="panel">
                <h2>Existing Setups</h2>
                <div id="existing-setups-list">
                     <% existingSetups.forEach(setup => { %>
                        <div class="existing-setup">
                            <div class="existing-setup-header">
                                <div class="existing-setup-info">
                                    <h3>Message ID: <code><%= setup.messageId %></code></h3>
                                    <span>In Channel: #<%= channels.find(c => c.id === setup.channelId)?.name || 'Unknown' %></span>
                                </div>
                                <div>
                                    <button class="btn btn-primary btn-sm edit-btn" data-message-id="<%= setup.messageId %>">Edit</button>
                                    <button class="btn btn-danger btn-sm delete-btn" data-message-id="<%= setup.messageId %>">Delete</button>
                                </div>
                            </div>
                            <div class="existing-setup-content"><%= setup.content %></div>
                            <div class="existing-setup-roles">
                                <% setup.roles.forEach(roleMap => { %>
                                    <% const emoji = emojis.find(e => e.identifier === roleMap.emoji); %>
                                    <div>
                                        <% if (emoji) { %>
                                            <img src="<%= emoji.url %>" alt="<%= emoji.name %>">
                                        <% } else { %>
                                            <span><%= roleMap.emoji %></span>
                                        <% } %>
                                        <span>&rarr;</span>
                                        <span>@<%= roles.find(r => r.id === roleMap.roleId)?.name || 'Unknown Role' %></span>
                                    </div>
                                <% }); %>
                            </div>
                        </div>
                     <% }); %>
                </div>
            </div>
            <% } %>
        </div>

        <!-- Emoji Picker Panel -->
        <div id="emoji-picker-panel" class="panel emoji-picker-panel">
            <h3>Select an Emoji</h3>
            <div class="emoji-picker-body">
                <input type="text" id="emoji-search" placeholder="Search emojis...">
                <div class="emoji-tabs">
                    <button class="tab-btn active" data-tab="custom">Custom</button>
                    <button class="tab-btn" data-tab="standard">Standard</button>
                </div>
                <div id="custom-emojis-grid" class="emoji-grid"></div>
                <div id="standard-emojis-grid" class="emoji-grid hidden"></div>
            </div>
        </div>
    </div>
    
<script>
document.addEventListener('DOMContentLoaded', () => {
    // --- DATA SETUP ---
    const form = document.getElementById('reaction-role-form');
    const rolesData = <%- JSON.stringify(roles) %>;
    const emojisData = <%- JSON.stringify(emojis) %>;
    const existingSetupsData = <%- JSON.stringify(existingSetups) %>;

    // --- EMOJI PICKER ELEMENTS & DATA ---
    const customEmojisGrid = document.getElementById('custom-emojis-grid');
    const standardEmojisGrid = document.getElementById('standard-emojis-grid');
    const emojiSearch = document.getElementById('emoji-search');
    const standardEmojis = {
        'Smileys & People': ['😀', '😃', '😄', '😁', '😆', '😅', '😂', '🤣', '😊', '😇', '🙂', '🙃', '😉', '😌', '😍', '🥰', '😘', '😗', '😙', '😚', '😋', '😛', '😝', '😜', '🤪', '🤨', '🧐', '🤓', '😎', '🤩', '🥳', '😏', '😒', '😞', '😔', '😟', '😕', '🙁', '☹️', '😣', '😖', '😫', '😩', '🥺', '😢', '😭', '😤', '😠', '😡', '🤬', '🤯', '😳', '🥵', '🥶', '😱', '😨', '😰', '😥', '😓', '🤗', '🤔', '🤭', '🤫', '🤥', '😶', '😐', '😑', '😬', '🙄', '😯', '😦', '😧', '😮', '😲', '🥱', '😴', '🤤', '😪', '😵', '🤐', '🥴', '🤢', '🤮', '🤧', '😷', '🤒', '🤕', '🤑', '🤠', '😈', '👿', '👹', '👺', '🤡', '💩', '👻', '💀', '☠️', '👽', '👾', '🤖', '🎃', '😺', '😸', '😹', '😻', '😼', '😽', '🙀', '😿', '😾', '👋', '🤚', '🖐️', '✋', '🖖', '👌', '🤌', '🤏', '✌️', '🤞', '🤟', '🤘', '🤙', '👈', '👉', '👆', '🖕', '👇', '☝️', '👍', '👎', '✊', '👊', '🤛', '🤜', '👏', '🙌', '👐', '🤲', '🤝', '🙏', '✍️', '💅', '🤳', '💪', '🦾', '🦿', '🦵', '🦶', '👂', '🦻', '👃', '🧠', '🫀', '🫁', '🦷', '🦴', '👀', '👁️', '👅', '👄', '👶', '🧒', '👦', '👧', '🧑', '👱', '👨', '🧔', '👩', '🧓', '👴', '👵', '🙍', '🙎', '🙅', '🙆', '💁', '🙋', '🧏', '🙇', '🤦', '🤷'],
        'Animals & Nature': ['🙈', '🙉', '🙊', '🐵', '🐒', '🦍', '🦧', '🐶', '🐕', '🦮', '🐕‍🦺', '🐩', '🐺', '🦊', '🦝', '🐱', '🐈', '🐈‍⬛', '🦁', '🐯', '🐅', '🐆', '🐴', '🐎', '🦄', '🦓', '🦌', '🦬', '🐮', '🐂', '🐃', '🐄', '🐷', '🐖', '🐗', '🐽', '🐏', '🐑', '🐐', '🐪', '🐫', '🦙', '🦒', '🐘', '🦣', '🦏', '🦛', '🐭', '🐁', '🐀', '🐹', '🐰', '🐇', '🐿️', '🦫', '🦔', '🦇', '🐻', '🐻‍❄️', '🐨', '🐼', '🦥', '🦦', '🦨', '🦘', '🦡', '🐾', '🦃', '🐔', '🐓', '🐣', '🐤', '🐥', '🐦', '🐧', '🕊️', '🦅', '🦆', '🦢', '🦉', '🦤', '🪶', '🐸', '🐊', '🐢', '🦎', '🐍', '🐲', '🐉', '🦕', '🦖', '🐳', '🐋', '🐬', '🦭', '🐟', '🐠', '🐡', '🦈', '🐙', '🐚', '🐌', '🦋', '🐛', '🐜', '🐝', '🪲', '🐞', '🦗', '🕷️', '🕸️', '🦂', '🦟', '🪰', '🪱', '🦠', '💐', '🌸', '💮', '🏵️', '🌹', '🥀', '🌺', '🌻', '🌼', '🌷', '🌱', '🪴', '🌲', '🌳', '🌴', '🌵', '🌾', '🌿', '☘️', '🍀', '🍁', '🍂', '🍃', '🍄', '🌰', '🌍', '🌎', '🌏', '🌕', '🌖', '🌗', '🌘', '🌑', '🌒', '🌓', '🌔', '🌙', '🌚', '🌛', '🌜', '☀️', '🌝', '🌞', '⭐', '🌟', '🌠', '☁️', '⛅', '⛈️', '🌤️', '🌥️', '🌦️', '🌧️', '🌨️', '🌩️', '🌪️', '🌫️', '🌬️', '🌈', '🔥', '💧', '🌊'],
        'Food & Drink': ['🍇', '🍈', '🍉', '🍊', '🍋', '🍌', '🍍', '🥭', '🍎', '🍏', '🍐', '🍑', '🍒', '🍓', '🥝', '🍅', '🥥', '🥑', '🍆', '🥔', '🥕', '🌽', '🌶️', '🥒', '🥬', '🥦', '🧄', '🧅', '🍄', '🥜', '🌰', '🍞', '🥐', '🥖', '🥨', '🥯', '🥞', '🧇', '🧀', '🍖', '🍗', '🥩', '🥓', '🍔', '🍟', '🍕', '🌭', '🥪', '🌮', '🌯', '🥙', '🧆', '🥚', '🍳', '🥘', '🍲', '🥣', '🥗', '🍿', '🧈', '🧂', '🥫', '🍱', '🍘', '🍙', '🍚', '🍛', '🍜', '🍝', '🍠', '🍢', '🍣', '🍤', '🍥', '🥮', '🍡', '🥟', '🥠', '🥡', '🦀', '🦞', '🦐', '🦑', '🦪', '🍦', '🍧', '🍨', '🍩', '🍪', '🎂', '🍰', '🧁', '🥧', '🍫', '🍬', '🍭', '🍮', '🍯', '🍼', '🥛', '☕', '🍵', '🍶', '🍾', '🍷', '🍸', '🍹', '🍺', '🍻', '🥂', '🥃', '🥤', '🧋', '🧃', '🧉', '🧊', '🥢', '🍽️', '🍴', '🥄', '🔪', '🏺'],
        'Activities': ['⚽', '🏀', '🏈', '⚾', '🥎', '🎾', '🏐', '🏉', '🥏', '🎱', '🪀', '🪃', '🥅', '⛳', '🪁', '🏹', '🎣', '🤿', '🥊', '🥋', '🎽', '🛹', '🛷', '⛸️', '🥌', '🎿', '⛷️', '🏂', '🪂', '🏋️', '🤼', '🤸', '⛹️', '🤺', '🤾', '🏌️', '🏇', '🧘', '🏄', '🏊', '🤽', '🚣', '🧗', '🚵', '🚴', '🏆', '🥇', '🥈', '🥉', '🏅', '🎖️', '🏵️', '🎗️', '🎫', '🎟️', '🎪', '🤹', '🎭', '🎨', '🎬', '🎤', '🎧', '🎼', '🎹', '🥁', '🎷', '🎺', '🎸', '🪕', '🎻', '🎲', '♟️', '🎯', '🎳', '🎮', '🎰', '🧩'],
        'Travel & Places': ['🚂', '🚃', '🚄', '🚅', '🚆', '🚇', '🚈', '🚉', '🚊', '🚝', '🚞', '🚋', '🚌', '🚍', '🚎', '🚐', '🚑', '🚒', '🚓', '🚔', '🚕', '🚖', '🚗', '🚘', '🚚', '🚛', '🚜', '🏎️', '🏍️', '🛵', '🦽', '🦼', '🛺', '🚲', '🛴', '🛹', '🛼', '🚏', '🛣️', '🛤️', '🛢️', '⛽', '🚨', '🚥', '🚦', '🛑', '🚧', '⚓', '⛵', '🛶', '🚤', '🛳️', '⛴️', '🛥️', '🚢', '✈️', '🛩️', '🛫', '🛬', '🪂', '🛰️', '🚀', '🛸', '🚁', '🚟', '🚠', '🚡', '🎠', '🎡', '🎢', '🎪', '🗼', '🏰', '🏯', '🏟️', '🗽', '🏠', '🏡', '🏘️', '🏚️', '🏢', '🏬', '🏤', '🏥', '🏦', '🏨', '🏪', '🏫', '🏩', '💒', 'ക്ഷേ', '⛪', '🕌', '🕍', '⛩️', '🕋', '⛲', '⛺', '🌁', '🌃', '🏙️', '🌄', '🌅', '🌆', '🌇', '🌉', '♨️', '🌌', '🌠', '🎇', '🎆', '🎑', '🗾', '🌍', '🌎', '🌏'],
        'Objects': ['⌚', '📱', '📲', '💻', '⌨️', '🖥️', '🖨️', '🖱️', '🖲️', '🕹️', '🗜️', '💾', '💿', '📀', '📼', '📷', '📸', '📹', '🎥', '📽️', '🎞️', '📞', '☎️', '📟', '📠', '📺', '📻', '🎙️', '🎚️', '🎛️', '🧭', '⏱️', '⏲️', '⏰', '🕰️', '⌛', '⏳', '📡', '🔋', '🔌', '💡', '🔦', '🕯️', '🪔', '🧯', '🗑️', '🛢️', '💸', '💵', '💴', '💶', '💷', '💰', '💳', '💎', '⚖️', '🧰', '🔧', '🔨', '⚒️', '🛠️', '⛏️', '🔩', '⚙️', '🧱', '⛓️', '🧲', '🔫', '💣', '🧨', '🪓', '🔪', '🗡️', '⚔️', '🛡️', '🚬', '⚰️', '⚱️', '🏺', '🔮', '📿', '🧿', '💈', '⚗️', '🔭', '🔬', '🕳️', '🩹', '🩺', '💊', '💉', '🩸', '🧬', '🦠', '🧫', '🧪', '🌡️', '🧹', '🧺', '🧻', '🚽', '🚰', '🚿', '🛁', '🛀', '🧼', '🪥', '🪒', '🧽', '🧴', '🔑', '🗝️', '🛋️', '🪑', '🛌', '🛏️', '🚪', '🪞', '🪟', '🧳', '🖼️', '🧭', '🗺️', '⛱️', '🗿', '🔔', '🔕', '🎼', '🎵', '🎶', '🎙️', '🎚️', '🎛️', '🎤', '🎧', '📻', '🎷', '🎸', '🎹', '🎺', '🎻', '🪕', '🥁', '🪘', '📱', '📲', '☎️', '📞', '📟', '📠', '🔋', '🔌', '💻', '🖥️', '🖨️', '⌨️', '🖱️', '🖲️', '💽', '💾', '💿', '📀', '🧮', '🎥', '🎞️', '📽️', '🎬', '📺', '📷', '📸', '📹', '📼', '🔍', '🔎', '🕯️', '💡', '🔦', '🏮', '🪔', '📔', '📕', '📖', '📗', '📘', '📙', '📚', '📓', '📒', '📃', '📜', '📄', '📰', '🗞️', '📑', '🔖', '🏷️', '💰', '🪙', '💴', '💵', '💶', '💷', '💸', '💳', '🧾', '💹', '✉️', '📧', '📨', '📩', '📤', '📥', '📦', '📫', '📪', '📬', '📭', '📮', '🗳️', '✏️', '✒️', '🖋️', '🖊️', '🖌️', '🖍️', '📝', '💼', '📁', '📂', '🗂️', '📅', '📆', '🗒️', '🗓️', '📇', '📈', '📉', '📊', '📋', '📌', '📍', '📎', '🖇️', '📏', '📐', '✂️', '🗃️', '🗄️', '🗑️', '🔒', '🔓', '🔏', '🔐', '🔑', '🗝️', '🔨', '🪓', '⛏️', '⚒️', '🛠️', '🗡️', '⚔️', '🔫', '🛡️', '🔧', '🔩', '⚙️', '🗜️', '⚖️', '🦯', '🔗', '⛓️', '🧰', '🧲', '⚗️', '🧪', '🧫', '🧬', '🔬', '🔭', '📡', '💉', '🩸', '💊', '🩹', '🩺', '🚪', '🛗', '🪞', '🪟', '🛏️', '🛋️', '🪑', '🚽', '🪠', '🚿', '🛁', '🪒', '🧴', '🧷', '🧹', '🧺', '🧻', '🧼', '🧽', '🧾', '🚬', '⚰️', '🪦', '⚱️', '🗿', '🪧'],
        'Symbols': ['🏧', '🚮', '🚰', '♿', '🚹', '🚺', '🚻', '🚼', '🚾', '🛂', '🛃', '🛄', '🛅', '⚠️', '🚸', '⛔', '🚫', '🚳', '🚭', '🚯', '🚱', '🚷', '📵', '🔞', '☢️', '☣️', '⬆️', '↗️', '➡️', '↘️', '⬇️', '↙️', '⬅️', '↖️', '↕️', '↔️', '↩️', '↪️', '⤴️', '⤵️', '🔃', '🔄', '🔙', '🔚', '🔛', '🔜', '🔝', '🛐', '⚛️', '🕉️', '✡️', '☸️', '☯️', '✝️', '☦️', '☪️', '☮️', '🕎', '🔯', '♈', '♉', '♊', '♋', '♌', '♍', '♎', '♏', '♐', '♑', '♒', '♓', '⛎', '🔀', '🔁', '🔂', '▶️', '⏩', '⏭️', '⏯️', '◀️', '⏪', '⏮️', '🔼', '⏫', '🔽', '⏬', '⏸️', '⏹️', '⏺️', '⏏️', '🎦', '🔅', '🔆', '📶', '📳', '📴', '♀️', '♂️', '⚧️', '✖️', '➕', '➖', '➗', '♾️', '‼️', '⁉️', '❓', '❔', '❕', '❗', '〰️', '💱', '💲', '⚕️', '♻️', '⚜️', '🔱', '📛', '🔰', '⭕', '✅', '☑️', '✔️', '✖️', '❌', '❎', '➰', '➿', '〽️', '✳️', '✴️', '❇️', '©️', '®️', '™️', '#️⃣', '*️⃣', '0️⃣', '1️⃣', '2️⃣', '3️⃣', '4️⃣', '5️⃣', '6️⃣', '7️⃣', '8️⃣', '9️⃣', '🔟', '🔠', '🔡', '🔢', '🔣', '🔤', '🅰️', '🆎', '🅱️', '🆑', '🆒', '🆓', 'ℹ️', '🆔', 'Ⓜ️', '🆕', '🆖', '🅾️', '🆗', '🅿️', '🆘', '🆙', '🆚', '🈁', '🈂️', '🈷️', '🈶', '🈯', '🉐', '🈹', '🈚', '🈲', '🉑', '🈸', '🈴', '🈳', '㊗️', '㊙️', '🈺', '🈵', '🔴', '🟠', '🟡', '🟢', '🔵', '🟣', '🟤', '⚫', '⚪', '🟥', '🟧', '🟨', '🟩', '🟦', '🟪', '🟫', '⬛', '⬜', '◼️', '◻️', '◾', '◽', '▪️', '▫️', '🔶', '🔷', '🔸', '🔹', '🔺', '🔻', '💠', '🔘', '🔳', '🔲']
    };
    const allCustomEmojiElements = [];
    const allStandardEmojiElements = [];

    // --- EMOJI PICKER FUNCTIONS ---
    function selectEmoji(identifier, displayHTML) {
        const activeMapper = document.querySelector('.reaction-mapper.is-active-picker');
        if (!activeMapper) {
            alert('Please click "Choose Emoji" on a row first to select where the emoji should go.');
            return;
        }
        activeMapper.querySelector('.emoji-input').value = identifier;
        activeMapper.querySelector('.emoji-display').innerHTML = displayHTML;
    }

    function populateEmojiPicker() {
        emojisData.forEach(emoji => {
            const item = document.createElement('div');
            item.className = 'emoji-item';
            item.dataset.name = emoji.name.toLowerCase();
            item.title = `:${emoji.name}:`;
            item.innerHTML = `<img src="${emoji.url}" alt="${emoji.name}">`;
            item.onclick = () => selectEmoji(emoji.identifier, `<img src="${emoji.url}" alt="${emoji.name}">`);
            allCustomEmojiElements.push(item);
        });

        for (const category in standardEmojis) {
            const categoryHeader = document.createElement('div');
            categoryHeader.className = 'emoji-category';
            categoryHeader.textContent = category;
            allStandardEmojiElements.push(categoryHeader);
            standardEmojis[category].forEach(emoji => {
                const item = document.createElement('div');
                item.className = 'emoji-item';
                item.dataset.name = emoji;
                item.textContent = emoji;
                item.onclick = () => selectEmoji(emoji, emoji);
                allStandardEmojiElements.push(item);
            });
        }
    }

    function updateEmojiVisibility() {
        const query = emojiSearch.value.toLowerCase().trim();
        const isSearching = query.length > 0;
        const activeTab = document.querySelector('.tab-btn.active').dataset.tab;

        customEmojisGrid.innerHTML = '';
        standardEmojisGrid.innerHTML = '';

        if (isSearching) {
            customEmojisGrid.classList.remove('hidden');
            standardEmojisGrid.classList.remove('hidden');
            
            allCustomEmojiElements
                .filter(el => el.dataset.name && el.dataset.name.includes(query))
                .forEach(el => customEmojisGrid.appendChild(el));

            allStandardEmojiElements
                .filter(el => el.classList.contains('emoji-item') && el.dataset.name.includes(query))
                .forEach(el => standardEmojisGrid.appendChild(el));
        } else {
            customEmojisGrid.classList.toggle('hidden', activeTab !== 'custom');
            standardEmojisGrid.classList.toggle('hidden', activeTab !== 'standard');
            
            if (activeTab === 'custom') {
                allCustomEmojiElements.forEach(el => customEmojisGrid.appendChild(el));
            } else if (activeTab === 'standard') {
                allStandardEmojiElements.forEach(el => standardEmojisGrid.appendChild(el));
            }
        }
    }
    
    emojiSearch.addEventListener('input', () => {
        clearTimeout(window.searchTimeout);
        window.searchTimeout = setTimeout(updateEmojiVisibility, 150);
    });
    
    document.querySelectorAll('.tab-btn').forEach(btn => {
        btn.addEventListener('click', () => {
            if (btn.classList.contains('active')) return;
            document.querySelector('.tab-btn.active').classList.remove('active');
            btn.classList.add('active');
            updateEmojiVisibility();
        });
    });

    // --- FORM UI LOGIC ---
    const reactionsContainer = document.getElementById('reactions-container');
    let reactionCounter = 0;

    function addReactionMapper(data = { emoji: '', role: '' }) {
        const index = reactionCounter++;
        const mapperDiv = document.createElement('div');
        mapperDiv.className = 'reaction-mapper';
        
        let initialEmojiDisplay = '...';
        if (data.emoji) {
            const customEmoji = emojisData.find(e => e.identifier === data.emoji);
            initialEmojiDisplay = customEmoji ? `<img src="${customEmoji.url}" alt="${customEmoji.name}">` : data.emoji;
        }

        const roleSelect = document.createElement('select');
        roleSelect.name = `reactions[${index}][role]`;
        roleSelect.required = true;
        roleSelect.innerHTML = '<option value="" disabled>Select Role</option>';
        rolesData.forEach(role => {
            roleSelect.add(new Option(`@${role.name}`, role.id, false, role.id === data.role));
        });
        roleSelect.value = data.role || "";

        mapperDiv.innerHTML = `
            <span>Emoji:</span>
            <div class="emoji-picker-container">
                <button type="button" class="emoji-picker-btn">Choose</button>
                <span class="emoji-display">${initialEmojiDisplay}</span>
                <input type="hidden" name="reactions[${index}][emoji]" class="emoji-input" value="${data.emoji || ''}" required>
            </div>
            <span>Role:</span>
            <div class="role-select-wrapper"></div>
            <button type="button" class="btn btn-danger btn-sm">Remove</button>
        `;
        mapperDiv.querySelector('.role-select-wrapper').appendChild(roleSelect);
        mapperDiv.querySelector('.btn-danger').onclick = () => mapperDiv.remove();
        
        mapperDiv.querySelector('.emoji-picker-btn').addEventListener('click', (e) => {
            document.querySelector('.reaction-mapper.is-active-picker')?.classList.remove('is-active-picker');
            e.target.closest('.reaction-mapper').classList.add('is-active-picker');
        });

        reactionsContainer.appendChild(mapperDiv);
    }
    
    document.getElementById('add-reaction-btn').addEventListener('click', () => addReactionMapper());

    // --- EDIT/DELETE LOGIC ---
    document.querySelectorAll('.edit-btn').forEach(btn => {
        btn.addEventListener('click', (e) => {
            e.preventDefault();
            const messageId = e.target.dataset.messageId;
            const setup = existingSetupsData.find(s => s.messageId === messageId);
            if (!setup) return;

            document.querySelector('input[name="message_option"][value="existing"]').checked = true;
            document.querySelector('input[name="message_option"][value="existing"]').dispatchEvent(new Event('change'));

            document.getElementById('existing_message_id').value = messageId;
            document.getElementById('channel_id').value = setup.channelId;
            document.getElementById('message_content').value = setup.content ? setup.content.replace(/\[Embed:.+\]/, '').trim() : '';

            reactionsContainer.innerHTML = '';
            reactionCounter = 0;
            setup.roles.forEach(roleMap => addReactionMapper({ emoji: roleMap.emoji, role: roleMap.roleId }));
            
            window.scrollTo({ top: 0, behavior: 'smooth' });
        });
    });
    
    document.querySelectorAll('.delete-btn').forEach(btn => {
        btn.addEventListener('click', (e) => {
            e.preventDefault();
            if (!confirm('Are you sure you want to delete this entire reaction role setup? This will also delete the original message.')) return;
            
            const hiddenInput = document.createElement('input');
            hiddenInput.type = 'hidden';
            hiddenInput.name = 'delete_setup';
            hiddenInput.value = e.target.dataset.messageId;
            form.appendChild(hiddenInput);
            form.submit();
        });
    });
    
    document.querySelectorAll('input[name="message_option"]').forEach(radio => {
        radio.addEventListener('change', () => {
            const isNew = radio.value === 'new';
            document.getElementById('existing-message-fields').classList.toggle('hidden', isNew);
            document.getElementById('existing_message_id').required = !isNew;
            messageContentTextarea.required = isNew;
            messageContentLabel.textContent = isNew ? 'Message Content' : 'Message Content (Leave blank to keep existing)';
        });
    });
    
    // --- INITIALIZATION ---
    populateEmojiPicker();
    addReactionMapper();
    updateEmojiVisibility(); 
});
</script>

</body>
</html>

