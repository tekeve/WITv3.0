<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Reaction Role Management</title>
    <style>
        body { font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif; background-color: #1e293b; color: #e2e8f0; margin: 0; padding: 2rem; font-size: 16px; }
        .container { max-width: 1200px; margin: 0 auto; display: grid; grid-template-columns: 1fr; gap: 2rem; }
        .panel { background-color: #334155; padding: 1.5rem 2rem; border-radius: 0.75rem; border: 1px solid #475569; }
        h1, h2, h3 { color: #f8fafc; border-bottom: 1px solid #475569; padding-bottom: 0.75rem; margin-top: 0; }
        h1 { font-size: 1.8rem; }
        h2 { font-size: 1.4rem; margin-bottom: 1.5rem; }
        h3 { font-size: 1.2rem; border: none; padding-bottom: 0.5rem; }
        .form-group { margin-bottom: 1.25rem; }
        label { display: block; margin-bottom: 0.5rem; font-size: 0.9rem; font-weight: 500; color: #cbd5e1; }
        input[type="text"], textarea, select { width: 100%; padding: 0.75rem; border-radius: 0.375rem; background-color: #1e293b; border: 1px solid #475569; color: #e2e8f0; font-size: 1rem; box-sizing: border-box; }
        textarea { resize: vertical; min-height: 100px; }
        .radio-group { display: flex; gap: 1.5rem; margin-bottom: 1rem; }
        .radio-group label { display: flex; align-items: center; gap: 0.5rem; cursor: pointer; }
        .conditional-fields { padding-left: 1.5rem; border-left: 2px solid #475569; margin-top: 1rem; }
        .reaction-mapper { display: grid; grid-template-columns: auto 1fr auto 1fr auto; gap: 1rem; align-items: center; margin-bottom: 1rem; }
        .reaction-mapper .emoji-select { width: 120px; }
        .reaction-mapper .role-select { width: auto; flex-grow: 1; }
        button, .btn { padding: 0.75rem 1.5rem; border: none; border-radius: 0.375rem; color: #fff; font-size: 1rem; font-weight: 600; cursor: pointer; transition: background-color 0.2s; text-align: center; display: inline-block; }
        .btn-primary { background-color: #0ea5e9; } .btn-primary:hover { background-color: #38bdf8; }
        .btn-secondary { background-color: #43b581; } .btn-secondary:hover { background-color: #38a169; }
        .btn-danger { background-color: #ef4444; } .btn-danger:hover { background-color: #dc2626; }
        .btn-sm { padding: 0.4rem 0.8rem; font-size: 0.8rem; }
        .actions { margin-top: 2rem; text-align: right; }
        .hidden { display: none; }
        #reactions-container .material-icons { font-size: 1.5rem; vertical-align: middle; }
        .existing-setup { background-color: #2c3e50; padding: 1rem; border-radius: 0.5rem; margin-bottom: 1rem; }
        .existing-setup-header { display: flex; justify-content: space-between; align-items: center; }
        .existing-setup-info code { background-color: #1e293b; padding: 0.2rem 0.4rem; border-radius: 0.25rem; }
        .existing-setup-roles { margin-top: 0.75rem; padding-top: 0.75rem; border-top: 1px solid #475569; }
    </style>
</head>
<body>

    <div class="container">
        <div class="panel">
            <h1>Reaction Role Management</h1>
            <form id="reaction-role-form" action="/reactionroles/<%= token %>" method="POST">
                
                <h2>Configure Message</h2>
                <div class="form-group radio-group">
                    <label><input type="radio" name="message_option" value="new" checked> Create New Message</label>
                    <label><input type="radio" name="message_option" value="existing"> Use Existing Message</label>
                </div>

                <div class="form-group">
                    <label for="message_content">Message Content</label>
                    <textarea name="message_content" id="message_content" placeholder="Enter the text for your new message here..." required></textarea>
                </div>

                <div id="existing-message-fields" class="conditional-fields hidden">
                    <div class="form-group">
                        <label for="existing_message_id">Message ID</label>
                        <input type="text" name="existing_message_id" id="existing_message_id" placeholder="Paste the ID of the message to use">
                    </div>
                </div>

                 <div class="form-group">
                    <label for="channel_id">Channel</label>
                    <select name="channel_id" id="channel_id" required>
                        <option value="" disabled selected>Select a channel...</option>
                        <% channels.forEach(channel => { %>
                            <option value="<%= channel.id %>">#<%= channel.name %></option>
                        <% }); %>
                    </select>
                </div>

                <h2>Emoji to Role Mappings</h2>
                <div id="reactions-container">
                    <!-- Dynamic reaction mappers will be inserted here -->
                </div>
                <button type="button" class="btn btn-secondary" id="add-reaction-btn">Add Emoji/Role Pair</button>

                <div class="actions">
                    <button type="submit" class="btn btn-primary">Save and Apply Changes</button>
                </div>
            </form>
        </div>

        <% if (existingSetups.length > 0) { %>
        <div class="panel">
            <h2>Existing Setups</h2>
            <div id="existing-setups-list">
                 <% existingSetups.forEach(setup => { %>
                    <div class="existing-setup">
                        <div class="existing-setup-header">
                            <div class="existing-setup-info">
                                <h3>Message ID: <code><%= setup.messageId %></code></h3>
                                <span>In Channel: #<%= channels.find(c => c.id === setup.channelId)?.name || 'Unknown' %></span>
                            </div>
                            <div>
                                <button class="btn btn-primary btn-sm edit-btn" data-message-id="<%= setup.messageId %>">Edit</button>
                                <button class="btn btn-danger btn-sm delete-btn" data-message-id="<%= setup.messageId %>">Delete</button>
                            </div>
                        </div>
                        <div class="existing-setup-roles">
                            <% setup.roles.forEach(roleMap => { %>
                                <div>
                                    <span><%= emojis.find(e => e.identifier === roleMap.emoji)?.identifier || roleMap.emoji %> &rarr; @<%= roles.find(r => r.id === roleMap.roleId)?.name || 'Unknown Role' %></span>
                                </div>
                            <% }); %>
                        </div>
                    </div>
                 <% }); %>
            </div>
        </div>
        <% } %>
    </div>
    
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const form = document.getElementById('reaction-role-form');
            const messageOptionRadios = document.querySelectorAll('input[name="message_option"]');
            const existingFields = document.getElementById('existing-message-fields');
            const reactionsContainer = document.getElementById('reactions-container');
            const addReactionBtn = document.getElementById('add-reaction-btn');
            const messageContentTextarea = document.getElementById('message_content');
            const messageContentLabel = document.querySelector('label[for="message_content"]');
            
            const rolesData = <%- JSON.stringify(roles) %>;
            const emojisData = <%- JSON.stringify(emojis) %>;
            const existingSetupsData = <%- JSON.stringify(existingSetups) %>;

            // --- UI LOGIC ---

            messageOptionRadios.forEach(radio => {
                radio.addEventListener('change', (event) => {
                    const isNew = radio.value === 'new';
                    
                    existingFields.classList.toggle('hidden', isNew);
                    document.getElementById('existing_message_id').required = !isNew;
                    messageContentTextarea.required = isNew;

                    if (isNew) {
                        messageContentLabel.textContent = 'Message Content';
                        messageContentTextarea.placeholder = 'Enter the text for your new message here...';
                        // Only clear if the user manually clicks the radio button, not on programmatic changes
                        if (event.isTrusted) { 
                           messageContentTextarea.value = '';
                        }
                    } else {
                        messageContentLabel.textContent = 'Message Content (Leave blank to keep existing)';
                        messageContentTextarea.placeholder = 'Optionally, enter new text to update the existing message...';
                    }
                });
            });

            let reactionCounter = 0;
            function addReactionMapper(data = { emoji: '', role: '' }) {
                const index = reactionCounter++;
                const mapperDiv = document.createElement('div');
                mapperDiv.className = 'reaction-mapper';
                
                const emojiSelect = document.createElement('select');
                emojiSelect.name = `reactions[${index}][emoji]`;
                emojiSelect.className = 'emoji-select';
                emojiSelect.innerHTML = '<option value="">Select Emoji</option>';
                emojisData.forEach(emoji => {
                    const option = new Option(`${emoji.name}`, emoji.identifier, false, emoji.identifier === data.emoji);
                    emojiSelect.add(option);
                });
                
                const roleSelect = document.createElement('select');
                roleSelect.name = `reactions[${index}][role]`;
                roleSelect.className = 'role-select';
                roleSelect.innerHTML = '<option value="">Select Role</option>';
                 rolesData.forEach(role => {
                    const option = new Option(`@${role.name}`, role.id, false, role.id === data.role);
                    roleSelect.add(option);
                });

                const removeBtn = document.createElement('button');
                removeBtn.type = 'button';
                removeBtn.className = 'btn btn-danger btn-sm';
                removeBtn.textContent = 'Remove';
                removeBtn.onclick = () => mapperDiv.remove();

                mapperDiv.innerHTML = `
                    <span>Emoji:</span>
                    <div class="emoji-select-wrapper"></div>
                    <span>Role:</span>
                    <div class="role-select-wrapper"></div>
                `;
                mapperDiv.querySelector('.emoji-select-wrapper').appendChild(emojiSelect);
                mapperDiv.querySelector('.role-select-wrapper').appendChild(roleSelect);
                mapperDiv.appendChild(removeBtn);

                reactionsContainer.appendChild(mapperDiv);
            }
            
            addReactionBtn.addEventListener('click', () => addReactionMapper());

            // --- EDIT/DELETE LOGIC ---
            document.querySelectorAll('.edit-btn').forEach(btn => {
                btn.addEventListener('click', (e) => {
                    e.preventDefault();
                    const messageId = e.target.dataset.messageId;
                    const setup = existingSetupsData.find(s => s.messageId === messageId);
                    if(!setup) return;

                    // Populate form for editing
                    const existingRadio = document.querySelector('input[name="message_option"][value="existing"]');
                    existingRadio.checked = true;
                    // Trigger change event to update UI
                    existingRadio.dispatchEvent(new Event('change'));

                    document.getElementById('existing_message_id').value = messageId;
                    document.getElementById('channel_id').value = setup.channelId;
                    document.getElementById('message_content').value = setup.content;
                    
                    // Clear existing mappers
                    reactionsContainer.innerHTML = '';
                    reactionCounter = 0;
                    
                    // Add mappers for this setup
                    setup.roles.forEach(roleMap => {
                        addReactionMapper({ emoji: roleMap.emoji, role: roleMap.roleId });
                    });
                    
                    window.scrollTo({ top: 0, behavior: 'smooth' });
                });
            });
            
             document.querySelectorAll('.delete-btn').forEach(btn => {
                btn.addEventListener('click', (e) => {
                    e.preventDefault();
                    if(!confirm('Are you sure you want to delete this entire reaction role setup? This will also delete the original message.')) {
                        return;
                    }
                    
                    const messageId = e.target.dataset.messageId;
                    const hiddenInput = document.createElement('input');
                    hiddenInput.type = 'hidden';
                    hiddenInput.name = 'delete_setup';
                    hiddenInput.value = messageId;
                    form.appendChild(hiddenInput);
                    form.submit();
                });
            });
            
            // Add one mapper to start
            addReactionMapper();
        });
    </script>
</body>
</html>

