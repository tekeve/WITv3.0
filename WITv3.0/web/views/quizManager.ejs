<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Quiz Manager</title>
    <style>
        :root {
            --bg-primary: #1e293b; --bg-secondary: #334155; --bg-tertiary: #475569;
            --text-primary: #e2e8f0; --text-secondary: #94a3b8; --accent-blue: #38bdf8;
            --accent-green: #4ade80; --accent-red: #f87171; --border-color: #4a5568;
        }
        body { font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif; background-color: var(--bg-primary); color: var(--text-primary); margin: 0; padding: 2rem; }
        .container { max-width: 900px; margin: auto; }
        .panel { background-color: var(--bg-secondary); border-radius: 0.75rem; padding: 2rem; border: 1px solid var(--border-color); margin-bottom: 2rem; }
        h1, h2 { color: #f8fafc; border-bottom: 1px solid var(--border-color); padding-bottom: 0.75rem; margin-top: 0; }
        .form-grid { display: grid; grid-template-columns: 1fr 1fr; gap: 1.5rem; }
        .form-group { margin-bottom: 1rem; }
        label { display: block; margin-bottom: 0.5rem; font-size: 0.9rem; font-weight: 500; color: var(--text-secondary); }
        input[type="text"], input[type="number"], select, textarea { width: 100%; padding: 0.75rem; border-radius: 0.375rem; background-color: var(--bg-primary); border: 1px solid var(--border-color); color: var(--text-primary); font-size: 1rem; box-sizing: border-box; }
        textarea { resize: vertical; min-height: 80px; }
        button, .btn { padding: 0.75rem 1.5rem; border: none; border-radius: 0.375rem; font-size: 1rem; font-weight: 600; cursor: pointer; transition: background-color 0.2s; }
        .btn-primary { background-color: var(--accent-blue); color: #fff; }
        .btn-danger { background-color: var(--accent-red); color: #fff; }
        .btn-secondary { background-color: var(--bg-tertiary); color: #fff; }
        .btn-sm { padding: 0.4rem 0.8rem; font-size: 0.8rem; }
        
        .question-card { background-color: var(--bg-tertiary); padding: 1.5rem; border-radius: 0.5rem; margin-top: 1.5rem; }
        .question-header { display: flex; justify-content: space-between; align-items: center; margin-bottom: 1rem; }
        .answers-container { padding-left: 1.5rem; border-left: 2px solid var(--bg-secondary); }
        .answer-group { display: flex; align-items: center; gap: 1rem; margin-bottom: 0.75rem; }
        .answer-group input[type="radio"] { width: 1.25rem; height: 1.25rem; flex-shrink: 0; }
        .answer-group input[type="text"] { flex-grow: 1; }
        .hidden-inputs { display: none; }
    </style>
</head>
<body>
<div class="container">
    <form id="quiz-form" action="/quizmanager/<%= token %>" method="POST">
        <div class="panel">
            <h1><%= mode === 'edit' ? 'Editing' : 'Creating' %> Quiz: <%= quizData.name %></h1>
            <input type="hidden" name="quiz[name]" value="<%= quizData.name %>">
            <div class="form-grid">
                <div class="form-group">
                    <label for="pass-mark">Pass Mark (%)</label>
                    <input type="number" name="quiz[pass_mark_percentage]" id="pass-mark" value="<%= quizData.pass_mark_percentage %>" min="0" max="100" required>
                </div>
                <div class="form-group">
                    <label for="update-field">Tracker Field to Update on Pass</label>
                    <select name="quiz[update_field]" id="update-field" required>
                        <option value="" disabled <%= !quizData.update_field ? 'selected' : '' %>>Select a field...</option>
                        <% updateFields.forEach(field => { %>
                            <option value="<%= field %>" <%= quizData.update_field === field ? 'selected' : '' %>><%= field %></option>
                        <% }); %>
                    </select>
                </div>
            </div>
        </div>

        <div id="questions-area">
            <!-- Questions will be dynamically inserted here -->
        </div>

        <button type="button" id="add-question-btn" class="btn btn-secondary">Add New Question</button>

        <div style="text-align: right; margin-top: 2rem;">
            <button type="submit" class="btn btn-primary">Save All Changes</button>
        </div>

        <div id="hidden-inputs" class="hidden-inputs">
            <!-- Inputs for deleted items will be added here -->
        </div>
    </form>
</div>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        const questionsArea = document.getElementById('questions-area');
        const addQuestionBtn = document.getElementById('add-question-btn');
        const hiddenInputsContainer = document.getElementById('hidden-inputs');
        const initialData = <%- JSON.stringify(quizData) %>;

        let questionCounter = 0;
        let answerCounter = 0;

        function addDeletedInput(name, value) {
            const input = document.createElement('input');
            input.type = 'hidden';
            input.name = name;
            input.value = value;
            hiddenInputsContainer.appendChild(input);
        }

        function createAnswerElement(questionKey, answer = {}) {
            const answerKey = answer.answer_id || `new_${answerCounter++}`;
            const isChecked = answer.is_correct ? 'checked' : '';

            const answerDiv = document.createElement('div');
            answerDiv.className = 'answer-group';
            answerDiv.dataset.answerKey = answerKey;
            answerDiv.innerHTML = `
                <input type="radio" name="questions[${questionKey}][correct_answer]" value="${answerKey}" ${isChecked} required title="Mark as correct answer">
                <input type="text" name="questions[${questionKey}][answers][${answerKey}][text]" placeholder="Answer text..." value="${answer.answer_text || ''}" required>
                <button type="button" class="btn btn-danger btn-sm remove-answer-btn">&times;</button>
            `;

            answerDiv.querySelector('.remove-answer-btn').addEventListener('click', () => {
                if (answer.answer_id) { // If it's an existing answer, mark for deletion
                    addDeletedInput('deleted_answers', answer.answer_id);
                }
                answerDiv.remove();
            });

            return answerDiv;
        }

        function createQuestionElement(question = {}) {
            const questionKey = question.question_id || `new_${questionCounter++}`;
            const card = document.createElement('div');
            card.className = 'panel question-card';
            card.dataset.questionKey = questionKey;
            
            card.innerHTML = `
                <div class="question-header">
                    <h2>Question</h2>
                    <button type="button" class="btn btn-danger remove-question-btn">Delete Question</button>
                </div>
                <div class="form-group">
                    <label>Question Text</label>
                    <textarea name="questions[${questionKey}][text]" required>${question.question_text || ''}</textarea>
                </div>
                <div class="answers-container">
                    <h3>Answers</h3>
                    <div class="answers-list"></div>
                    <button type="button" class="btn btn-secondary btn-sm add-answer-btn" style="margin-top: 1rem;">Add Answer</button>
                </div>
            `;

            const answersList = card.querySelector('.answers-list');
            
            if (question.answers && question.answers.length > 0) {
                question.answers.forEach(answer => {
                    answersList.appendChild(createAnswerElement(questionKey, answer));
                });
            } else {
                // Add two blank answers by default for new questions
                answersList.appendChild(createAnswerElement(questionKey));
                answersList.appendChild(createAnswerElement(questionKey));
            }

            card.querySelector('.add-answer-btn').addEventListener('click', () => {
                answersList.appendChild(createAnswerElement(questionKey));
            });

            card.querySelector('.remove-question-btn').addEventListener('click', () => {
                if (confirm('Are you sure you want to delete this entire question and all its answers?')) {
                    if (question.question_id) { // If it's an existing question, mark for deletion
                        addDeletedInput('deleted_questions', question.question_id);
                    }
                    card.remove();
                }
            });

            return card;
        }

        // --- INITIALIZATION ---
        addQuestionBtn.addEventListener('click', () => {
            questionsArea.appendChild(createQuestionElement());
        });
        
        // Load existing questions
        if (initialData.questions && initialData.questions.length > 0) {
            initialData.questions.forEach(q => {
                questionsArea.appendChild(createQuestionElement(q));
            });
        }
    });
</script>
</body>
</html>
