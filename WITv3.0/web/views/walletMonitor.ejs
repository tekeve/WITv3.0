<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Corporation Wallet Monitor</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns/dist/chartjs-adapter-date-fns.bundle.min.js"></script>
    <style>
        /* CSS remains the same */
        :root {
            --bg-primary: #1e293b; --bg-secondary: #334155; --bg-tertiary: #475569;
            --text-primary: #e2e8f0; --text-secondary: #94a3b8; --accent-blue: #38bdf8;
            --accent-green: #4ade80; --accent-red: #f87171; --border-color: #4a5568;
            --accent-yellow: #facc15; --accent-purple: #a78bfa; --accent-orange: #f97316;
            /* Updated Category Colors */
            --srp-in: #22c55e;
            --srp-out: #ef4444;
            --giveaway: #eab308;
            --internal-transfer: #8b5cf6; /* Added color for internal transfer */
            --manual-change: #3b82f6; /* Added color for manual change */
            --tax: #6b7280;
            --other: #a1a1aa;
            --uncategorized: #475569;
            /* Removed Structure & Office colors */
        }
        body { font-family: 'Inter', sans-serif; background-color: var(--bg-primary); color: var(--text-primary); margin: 0; padding: 2rem; font-size: 14px; }
        .container { max-width: 95%; margin: auto; }
        h1, h2 { color: #f8fafc; text-align: center; }
        h1 { margin-bottom: 0.5rem; } /* Reduced margin */
        h2 { font-size: 1.25rem; margin-top: 2rem; margin-bottom: 1rem; text-align: left; border-bottom: 1px solid var(--border-color); padding-bottom: 0.5rem; }
        /* Style for subtitle */
        .page-subtitle {
            text-align: center;
            color: var(--text-secondary);
            margin-bottom: 2rem;
            font-size: 0.9rem;
        }
        .panel { background-color: var(--bg-secondary); border-radius: 0.75rem; padding: 1.5rem; border: 1px solid var(--border-color); margin-bottom: 2rem; }

        /* Filters */
        .primary-filters { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 1rem; align-items: end; }
        .form-group { margin-bottom: 0; }
        label { display: block; margin-bottom: 0.3rem; font-size: 0.8rem; font-weight: 500; color: var(--text-secondary); }
        input[type="date"], input[type="text"], input[type="number"], select { width: 100%; padding: 0.6rem; border-radius: 0.375rem; background-color: var(--bg-primary); border: 1px solid var(--border-color); color: var(--text-primary); font-size: 0.9rem; box-sizing: border-box; }
        input[type="number"]::-webkit-outer-spin-button,
        input[type="number"]::-webkit-inner-spin-button { -webkit-appearance: none; margin: 0; }
        input[type="number"] { -moz-appearance: textfield; }

        /* Checkbox Group Styling */
        .checkbox-group {
            background-color: var(--bg-primary);
            border: 1px solid var(--border-color);
            border-radius: 0.375rem;
            padding: 0.6rem;
            max-height: 100px; /* Adjust height as needed */
            overflow-y: auto;
            display: grid; /* Use grid for better alignment */
            grid-template-columns: repeat(auto-fit, minmax(120px, 1fr)); /* Responsive columns */
            gap: 0.5rem; /* Space between checkboxes */
        }
        .checkbox-item {
            display: flex;
            align-items: center;
        }
        .checkbox-item input[type="checkbox"] {
            margin-right: 0.5rem;
            width: 1rem;
            height: 1rem;
            accent-color: var(--accent-blue); /* Style checkbox color */
        }
        .checkbox-item label {
            font-size: 0.9rem;
            color: var(--text-primary);
            margin-bottom: 0; /* Override default label margin */
            cursor: pointer;
        }
        /* End Checkbox Styling */

        select[multiple] { height: auto; min-height: 80px; }
        button { padding: 0.6rem 1.2rem; border: none; border-radius: 0.375rem; font-size: 0.9rem; font-weight: 600; cursor: pointer; transition: background-color 0.2s; }
        .btn-primary { background-color: var(--accent-blue); color: white; } .btn-primary:hover { background-color: #0ea5e9; }

        /* Summary */
        .summary-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(180px, 1fr)); gap: 1rem; }
        .summary-card { background-color: var(--bg-tertiary); padding: 1rem; border-radius: 0.5rem; text-align: center; }
        .summary-label { font-size: 0.75rem; color: var(--text-secondary); margin-bottom: 0.25rem; text-transform: uppercase; }
        .summary-value { font-size: 1.5rem; font-weight: 700; color: #f8fafc; }
        .summary-value.positive { color: var(--accent-green); }
        .summary-value.negative { color: var(--accent-red); }

        /* Charts */
        /* Updated charts-grid for 5 charts - Now using Flexbox for wrapping */
        .charts-grid {
            display: flex; /* Changed to flex */
            flex-wrap: wrap; /* Allow wrapping */
            gap: 1.5rem;
            margin-bottom: 2rem; /* Added margin for spacing */
        }
        .chart-container {
            background-color: var(--bg-tertiary);
            padding: 1rem;
            border-radius: 0.5rem;
            height: 350px;
            display: flex;
            justify-content: center;
            align-items: center;
            flex: 1 1 calc(50% - 1.5rem); /* Default: 2 columns */
            min-width: 300px; /* Prevent charts from becoming too small */
            box-sizing: border-box;
        }
        /* Make the last chart take full width if there's an odd number */
        .chart-container:last-child:nth-child(odd) {
            flex-basis: 100%;
        }

        .chart-container canvas {
            max-width: 100%;
            max-height: 100%;
            cursor: pointer; /* Add pointer cursor to indicate clickability */
        }


        /* Transactions Table */
        .table-container { overflow-x: auto; }
        table { width: 100%; border-collapse: collapse; margin-top: 1rem; table-layout: fixed; }
        /* Adjusted widths */
        th, td { padding: 0.6rem 0.8rem; border-bottom: 1px solid var(--border-color); text-align: left; white-space: nowrap; overflow: hidden; text-overflow: ellipsis; }
        th:nth-child(1), td:nth-child(1) { width: 12%; } /* Date */
        th:nth-child(2), td:nth-child(2) { width: 4%; }  /* Div */
        th:nth-child(3), td:nth-child(3) { width: 10%; text-align: right; } /* Amount */
        th:nth-child(4), td:nth-child(4) { width: 15%; } /* From/To */
        th:nth-child(5), td:nth-child(5) { width: 15%; } /* Category */
        th:nth-child(6), td:nth-child(6) { width: 18%; } /* Type */
        th:nth-child(7), td:nth-child(7) { width: 26%; } /* Reason/Desc */

        th { background-color: var(--bg-tertiary); font-size: 0.75rem; color: var(--text-secondary); text-transform: uppercase; }
        tbody tr:hover { background-color: #4a5568; }

        /* Filter row styles */
        tr.filter-row th {
            padding: 0.5rem;
            background-color: var(--bg-secondary);
            border-bottom: 2px solid var(--border-color);
            overflow: visible; /* Allow input to be seen */
            vertical-align: top;
        }
        tr.filter-row input, tr.filter-row select {
            font-size: 0.8rem;
            padding: 0.4rem;
            width: 100%;
            box-sizing: border-box; /* Ensure padding doesn't break layout */
        }

        td.amount { font-weight: 600; } /* text-align is already set for the column */
        td.amount.positive { color: var(--accent-green); }
        td.amount.negative { color: var(--accent-red); }
        td.reason-cell { white-space: nowrap; overflow: hidden; text-overflow: ellipsis; max-width: none; /* Let table layout handle max */ }
        .category-select { background-color: var(--bg-primary); border: 1px solid var(--border-color); color: var(--text-primary); border-radius: 4px; padding: 2px 4px; font-size: 0.8rem; }
        .category-select:disabled { opacity: 0.7; cursor: not-allowed; }

        /* Style select based on category */
        .category-srp_in { background-color: var(--srp-in) !important; color: black !important; }
        .category-srp_out { background-color: var(--srp-out) !important; color: white !important; }
        .category-giveaway { background-color: var(--giveaway) !important; color: black !important; }
        .category-internal_transfer { background-color: var(--internal-transfer) !important; color: white !important; }
        .category-manual_change { background-color: var(--manual-change) !important; color: white !important; }
        .category-tax { background-color: var(--tax) !important; color: white !important; }
        .category-other { background-color: var(--other) !important; color: black !important; }
        .category-uncategorized { background-color: var(--uncategorized) !important; color: var(--text-primary) !important; }

        /* Style spans similarly */
        span[class^="category-"] { padding: 2px 6px; border-radius: 4px; font-size: 0.8rem; display: inline-block; /* Make span behave like select for consistent look */ }

        /* Pagination */
        .pagination { display: flex; justify-content: center; align-items: center; gap: 1rem; margin-top: 1.5rem; }
        .page-btn { background-color: var(--bg-tertiary); color: var(--text-primary); }
        .page-btn:hover:not(:disabled) { background-color: #55667d; }
        .page-btn:disabled { opacity: 0.5; cursor: not-allowed; }
        #page-info { font-size: 0.9rem; color: var(--text-secondary); }

        /* Loading Overlay */
        #loading-overlay { position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.6); display: flex; justify-content: center; align-items: center; z-index: 1001; opacity: 0; pointer-events: none; transition: opacity 0.3s; }
        #loading-overlay.visible { opacity: 1; pointer-events: auto; }
        .spinner { width: 50px; height: 50px; border: 5px solid var(--bg-tertiary); border-top-color: var(--accent-blue); border-radius: 50%; animation: spin 1s linear infinite; }
        @keyframes spin { to { transform: rotate(360deg); } }

        /* Tooltip Styles */
        .tooltip {
            position: relative;
            cursor: help;
        }
        .tooltip .tooltiptext {
            visibility: hidden;
            width: max-content;
            max-width: 300px;
            background-color: #555;
            color: #fff;
            text-align: left;
            border-radius: 6px;
            padding: 8px 12px;
            position: absolute;
            z-index: 1;
            bottom: 125%; /* Position above the element */
            left: 50%;
            transform: translateX(-50%);
            opacity: 0;
            transition: opacity 0.3s;
            font-size: 0.8rem;
            white-space: pre-wrap; /* Allow line breaks */
            box-shadow: 0 2px 5px rgba(0,0,0,0.3);
        }
        .tooltip:hover .tooltiptext {
            visibility: visible;
            opacity: 1;
        }

         /* Toast Styles */
        #toast-container { position: fixed; top: 1.5rem; right: 1.5rem; z-index: 2000; display: flex; flex-direction: column; gap: 0.5rem; }
        .toast { padding: 1rem 1.5rem; border-radius: 0.5rem; opacity: 0; transform: translateX(100%); transition: opacity 0.3s, transform 0.3s; box-shadow: 0 4px 10px rgba(0,0,0,0.2); }
        .toast.show { opacity: 1; transform: translateX(0); }
        .toast.success { background-color: var(--accent-green); color: black; }
        .toast.error { background-color: var(--accent-red); color: white; }
        .toast.info { background-color: var(--accent-blue); color: white; }
    </style>
</head>
<body>
    <div class="container">
        <h1>Corporation Wallet Monitor</h1>
        <!-- Added subtitle with countdown timer -->
        <p class="page-subtitle">
            Next wallet sync in: <span id="sync-countdown" style="font-weight: bold;">--:--</span>
        </p>

        <div class="panel primary-filters">
            <div class="form-group">
                <label for="filter-start-date">Start Date</label>
                <input type="date" id="filter-start-date">
            </div>
            <div class="form-group">
                <label for="filter-end-date">End Date</label>
                <input type="date" id="filter-end-date">
            </div>
            <div class="form-group">
                <label for="filter-divisions">Divisions</label>
                <div id="filter-divisions" class="checkbox-group">
                    <div class="checkbox-item"><input type="checkbox" id="div-all" value="all" checked><label for="div-all">All</label></div>
                    <div class="checkbox-item"><input type="checkbox" id="div-1" value="1"><label for="div-1">1 - Master</label></div>
                    <div class="checkbox-item"><input type="checkbox" id="div-2" value="2"><label for="div-2">2</label></div>
                    <div class="checkbox-item"><input type="checkbox" id="div-3" value="3"><label for="div-3">3</label></div>
                    <div class="checkbox-item"><input type="checkbox" id="div-4" value="4"><label for="div-4">4</label></div>
                    <div class="checkbox-item"><input type="checkbox" id="div-5" value="5"><label for="div-5">5</label></div>
                    <div class="checkbox-item"><input type="checkbox" id="div-6" value="6"><label for="div-6">6</label></div>
                    <div class="checkbox-item"><input type="checkbox" id="div-7" value="7"><label for="div-7">7 - SRP</label></div>
                </div>
            </div>
             <!-- Apply Filters Button REMOVED --></div>

        <div class="panel summary">
            <h2>Summary (Filtered Period)</h2>
            <div class="summary-grid" id="summary-grid">
                <div class="summary-card">
                    <div class="summary-label">Total Income</div>
                    <div class="summary-value positive" id="summary-income">...</div>
                </div>
                <div class="summary-card">
                    <div class="summary-label">Total Outcome</div>
                    <div class="summary-value negative" id="summary-outcome">...</div>
                </div>
                <div class="summary-card">
                    <div class="summary-label">Net Change</div>
                    <div class="summary-value" id="summary-net">...</div>
                </div>
                <!-- Balance cards will be added here dynamically --></div>
        </div>

        <div class="panel charts">
            <h2>Charts (Filtered Period)</h2>
            <div class="charts-grid">
                <div class="chart-container">
                    <canvas id="monthly-flow-chart"></canvas>
                </div>
                <div class="chart-container">
                    <canvas id="category-totals-chart"></canvas>
                </div>
                <div class="chart-container">
                    <canvas id="top-payers-count-chart"></canvas>
                </div>
                <div class="chart-container">
                    <canvas id="top-payers-amount-chart"></canvas>
                </div>
                 <!-- ADDED: New chart container for historical payer income --><div class="chart-container">
                    <canvas id="payer-income-over-time-chart"></canvas>
                </div>
                <!-- END ADDED --></div>
        </div>

        <div class="panel transactions">
            <h2>Transactions (Filtered Period)</h2>

            <div class="table-container">
                <table>
                    <thead>
                        <tr>
                            <th style="width: 12%;">Date (UTC)</th>
                            <th style="width: 4%;">Div</th>
                            <th style="width: 10%; text-align: right;">Amount</th>
                            <th style="width: 15%;">From / To</th>
                            <th style="width: 15%;">Category</th>
                            <th style="width: 18%;">Type</th>
                            <th style="width: 26%;">Reason / Desc</th>
                        </tr>
                        <tr class="filter-row">
                            <th></th>
                            <th></th>
                            <th><div class="form-group"><input type="number" id="filter-amount-exact" placeholder="Filter Amount..."></div></th>
                            <th><div class="form-group"><input type="text" id="filter-party" placeholder="Filter From/To..."></div></th>
                            <th><div class="form-group"><input type="text" id="filter-category-text" placeholder="Filter Category..."></div></th>
                            <th><div class="form-group"><input type="text" id="filter-type" placeholder="Filter Type..."></div></th>
                            <th><div class="form-group"><input type="text" id="filter-reason" placeholder="Filter Reason/Desc..."></div></th>
                        </tr>
                    </thead>
                    <tbody id="transactions-tbody">
                        <tr><td colspan="7" style="text-align: center; padding: 2rem;">Loading transactions...</td></tr>
                    </tbody>
                </table>
            </div>
            <div class="pagination">
                <button id="prev-page-btn" class="page-btn" disabled>&laquo; Prev</button>
                <span id="page-info">Page 1 of 1 (0 items)</span>
                <button id="next-page-btn" class="page-btn" disabled>Next &raquo;</button>
            </div>
        </div>
    </div>

    <div id="loading-overlay">
        <div class="spinner"></div>
    </div>
    <div id="toast-container"></div>

    <script src="/socket.io/socket.io.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const token = "<%= token %>";
            const canEdit = <%- canEdit %>;
            const nextSyncTimestamp = <%- nextSyncTimestamp %>; // Get timestamp from controller
            let currentPage = 1;
            let totalPages = 1;
            const itemsPerPage = 25;
            let currentFilters = {};
            let chartInstances = {};
            let debounceTimeout;
            let countdownInterval; // Interval timer for countdown

            // --- Countdown Timer Logic ---
            const countdownEl = document.getElementById('sync-countdown');

            function updateCountdown() {
                if (!nextSyncTimestamp) {
                    countdownEl.textContent = 'Scheduled';
                    return;
                }
                const now = Date.now();
                const remainingMs = nextSyncTimestamp - now;

                if (remainingMs <= 0) {
                    countdownEl.textContent = 'Syncing...';
                    clearInterval(countdownInterval);
                    return;
                }

                const totalSeconds = Math.floor(remainingMs / 1000);
                const minutes = Math.floor(totalSeconds / 60);
                const seconds = totalSeconds % 60;

                countdownEl.textContent = `${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;
            }

            function startCountdown() {
                clearInterval(countdownInterval); // Clear any existing interval
                if (nextSyncTimestamp) {
                    updateCountdown(); // Update immediately
                    countdownInterval = setInterval(updateCountdown, 1000); // Update every second
                } else {
                    countdownEl.textContent = 'Scheduled';
                }
            }
            // --- End Countdown Timer Logic ---


            // --- Read CSS Variables into JS Variables ---
            // (Rest of the CSS variable reading code remains the same)
             let computedStyles, categoryColorsJs, categoryLabels, chartColors;

            function initializeJsColors() {
                computedStyles = getComputedStyle(document.documentElement);
                // Updated category colors to match CSS variables
                categoryColorsJs = {
                    srp_in: computedStyles.getPropertyValue('--srp-in').trim(),
                    srp_out: computedStyles.getPropertyValue('--srp-out').trim(),
                    giveaway: computedStyles.getPropertyValue('--giveaway').trim(),
                    internal_transfer: computedStyles.getPropertyValue('--internal-transfer').trim(),
                    manual_change: computedStyles.getPropertyValue('--manual-change').trim(),
                    tax: computedStyles.getPropertyValue('--tax').trim(),
                    other: computedStyles.getPropertyValue('--other').trim(),
                    uncategorized: computedStyles.getPropertyValue('--uncategorized').trim() || computedStyles.getPropertyValue('--bg-tertiary').trim(),
                };
                 chartColors = {
                     textPrimary: computedStyles.getPropertyValue('--text-primary').trim(),
                     textSecondary: computedStyles.getPropertyValue('--text-secondary').trim(),
                     borderColor: computedStyles.getPropertyValue('--border-color').trim(),
                     accentGreen: computedStyles.getPropertyValue('--accent-green').trim(),
                     accentRed: computedStyles.getPropertyValue('--accent-red').trim(),
                     // Added more accents for charts
                     accentBlue: computedStyles.getPropertyValue('--accent-blue').trim(),
                     accentPurple: computedStyles.getPropertyValue('--accent-purple').trim(),
                     accentYellow: computedStyles.getPropertyValue('--accent-yellow').trim(),
                     accentOrange: computedStyles.getPropertyValue('--accent-orange').trim(),
                     accentGrey: computedStyles.getPropertyValue('--text-secondary').trim(), // Use text-secondary for a grey

                };
            }
            // --- END CSS Variable Reading ---

             // User-friendly labels for categories
            categoryLabels = { // Keep this definition
                srp_in: 'SRP In',
                srp_out: 'SRP Out',
                giveaway: 'Giveaway',
                internal_transfer: 'Internal Transfer',
                manual_change: 'Manual Change',
                tax: 'Tax',
                other: 'Other',
                uncategorized: 'Uncategorized'
            };

            // --- Reverse lookup for labels to keys (for chart clicks) ---
            const categoryKeysByLabel = Object.fromEntries(
                Object.entries(categoryLabels).map(([key, label]) => [label, key])
            );


            // --- DOM Elements ---
            // (DOM element references remain the same)
            const transactionsTbody = document.getElementById('transactions-tbody');
            const prevPageBtn = document.getElementById('prev-page-btn');
            const nextPageBtn = document.getElementById('next-page-btn');
            const pageInfoEl = document.getElementById('page-info');
            // Primary Filters
            const filterStartDate = document.getElementById('filter-start-date');
            const filterEndDate = document.getElementById('filter-end-date');
            const filterDivisionsContainer = document.getElementById('filter-divisions'); // Container for checkboxes
            // Secondary Filters (in transaction panel)
            const filterType = document.getElementById('filter-type');
            const filterParty = document.getElementById('filter-party');
            const filterAmountExact = document.getElementById('filter-amount-exact');
            const filterReason = document.getElementById('filter-reason');
            const filterCategoryText = document.getElementById('filter-category-text'); // New category text filter
            // ---
            const loadingOverlay = document.getElementById('loading-overlay');
            const summaryGrid = document.getElementById('summary-grid');
            const summaryIncomeEl = document.getElementById('summary-income');
            const summaryOutcomeEl = document.getElementById('summary-outcome');
            const summaryNetEl = document.getElementById('summary-net');

            // --- Utility Functions ---
            // (formatIsk, formatDate, showLoading, showToast remain the same)
             function formatIsk(value, showSign = false) {
                if (value === null || value === undefined || isNaN(value)) return '0';
                const num = Number(value);
                const sign = showSign && num > 0 ? '+' : '';
                // Use maximumFractionDigits: 0 for ISK which has no decimals
                return sign + num.toLocaleString('en-US', { maximumFractionDigits: 0 });
            }

            function formatDate(dateString) {
                if (!dateString) return 'N/A';
                try {
                    // EJS might pass a Date object or string, handle both
                    const date = new Date(dateString);
                    if (isNaN(date.getTime())) return 'Invalid Date';
                    return date.toLocaleString('en-GB', { // Example using British English format (DD/MM/YYYY, HH:MM)
                        year: 'numeric', month: 'short', day: '2-digit',
                        hour: '2-digit', minute: '2-digit', timeZone: 'UTC' // Display in UTC
                    });
                } catch (e) {
                    console.error("Error formatting date:", dateString, e);
                    return 'Invalid Date';
                }
            }

            function showLoading(show = true) {
                loadingOverlay.classList.toggle('visible', show);
            }

            function showToast(message, type = 'info') {
                const container = document.getElementById('toast-container');
                const toast = document.createElement('div');
                toast.className = `toast ${type}`;
                toast.textContent = message;
                container.appendChild(toast);
                toast.offsetHeight; // Trigger reflow
                toast.classList.add('show');
                setTimeout(() => {
                    toast.classList.remove('show');
                    setTimeout(() => toast.remove(), 300);
                }, 3000);
            }

            // --- API Call Function ---
            // (fetchData remains the same)
             async function fetchData(endpoint, body = null, method = 'GET') {
                showLoading(true);
                try {
                    const options = {
                        method: method.toUpperCase(), // Ensure method is uppercase
                        headers: { 'Content-Type': 'application/json' },
                    };
                    // For POST, data goes in the body
                    if (body && method.toUpperCase() === 'POST') {
                        options.body = JSON.stringify(body);
                    }

                    let url = `/wallet/api/${endpoint}/${token}`;
                    // For GET, data goes in the query string
                    if (body && method.toUpperCase() === 'GET') {
                        // Filter out null/empty values before creating query string
                        const queryParams = Object.fromEntries(
                            Object.entries(body).filter(([_, v]) => v !== null && v !== '' && v !== undefined && (!Array.isArray(v) || v.length > 0)) // Also filter undefined
                        );
                        if (Object.keys(queryParams).length > 0) {
                            url += '?' + new URLSearchParams(queryParams).toString();
                        }
                    }

                    const response = await fetch(url, options);
                    const data = await response.json();
                    if (!response.ok) {
                        const statusText = response.statusText;
                        const serverMessage = data.message || `HTTP error! Status: ${response.status}`;
                        const errorMsg = `Failed to fetch data from ${endpoint}. Server responded with ${response.status} (${statusText}): ${serverMessage}`;
                        console.error('API Call Failed:', errorMsg, 'Response body:', data);
                        showToast(errorMsg, 'error');
                        return null; // Return null on error
                    }
                    return data;
                } catch (error) {
                    const errorMsg = `Error fetching data from ${endpoint}: ${error.message}`;
                    console.error('API Call Failed:', errorMsg, error);
                    showToast(errorMsg, 'error');
                    return null; // Return null on error
                } finally {
                    showLoading(false);
                }
            }

            // --- Data Rendering ---
            // (renderTransactions, renderPagination, updateSummaryCards remain the same)
             function renderTransactions(transactions) {
                transactionsTbody.innerHTML = ''; // Clear existing rows
                if (!transactions || transactions.length === 0) {
                    transactionsTbody.innerHTML = `<tr><td colspan="7" style="text-align:center; color: var(--text-secondary);">No transactions found matching filters.</td></tr>`;
                    return;
                }

                transactions.forEach(t => {
                    const tr = document.createElement('tr');
                    const amountClass = t.amount > 0 ? 'positive' : (t.amount < 0 ? 'negative' : '');
                    const categoryKey = t.custom_category || 'uncategorized';
                    const categoryClass = `category-${categoryKey}`;

                    // Determine From/To based on amount sign and use names if available
                    let partyName = 'N/A';
                    let partyId = null;
                    if (t.amount > 0) {
                        partyName = t.first_party_name || (t.first_party_id ? `ID: ${t.first_party_id}` : 'N/A');
                        partyId = t.first_party_id;
                    } else if (t.amount < 0) {
                        partyName = t.second_party_name || (t.second_party_id ? `ID: ${t.second_party_id}` : 'N/A');
                        partyId = t.second_party_id;
                    }
                    const direction = t.amount > 0 ? 'From' : (t.amount < 0 ? 'To' : '');

                    // Build tooltip content for Date cell (keeping ID and Balance info here)
                    let dateTooltipText = `ID: ${t.transaction_id}\nBalance: ${formatIsk(t.balance)} ISK`;
                    if (t.tax_receiver_id) dateTooltipText += `\nTax To: ${t.tax_receiver_id}`;
                    if (t.tax_amount) dateTooltipText += `\nTax Amt: ${formatIsk(t.tax_amount)} ISK`;
                    if (t.context_id) dateTooltipText += `\nContext ID: ${t.context_id}`;
                    if (t.context_type) dateTooltipText += `\nContext Type: ${t.context_type}`;

                    // Create category dropdown (only if user can edit)
                    let categoryCellContent = `<span class="${categoryClass}">${categoryLabels[categoryKey] || 'Uncategorized'}</span>`;
                    if (canEdit) {
                        const originalValue = t.custom_category === null ? 'null' : t.custom_category;
                        const optionsHtml = Object.entries(categoryLabels)
                            .filter(([key, _]) => key !== 'uncategorized')
                            .map(([key, label]) =>
                                `<option value="${key}" ${t.custom_category === key ? 'selected' : ''}>${label}</option>`
                            ).join('');

                        categoryCellContent = `
                            <select class="category-select ${categoryClass}" data-tx-id="${t.transaction_id}" data-original-value="${originalValue}">
                                <option value="null" ${!t.custom_category ? 'selected' : ''}>-- Uncategorized --</option>
                                ${optionsHtml}
                            </select>
                        `;
                    }

                    const reasonDesc = t.reason || t.description || '';

                    // *** FIXED HTML STRUCTURE ***
                    tr.innerHTML = `
                        <td class="tooltip">${formatDate(t.date)}<span class="tooltiptext">${dateTooltipText}</span></td>
                        <td>${t.division}</td>
                        <td class="amount ${amountClass}">${formatIsk(t.amount, true)}</td>
                        <td class="tooltip">${direction} ${partyName}<span class="tooltiptext">${partyId ? `Party ID: ${partyId}` : 'No Party ID'}</span></td>
                        <td>${categoryCellContent}</td>
                        <td>${t.ref_type || ''}</td>
                        <td class="reason-cell" title="${reasonDesc.replace(/"/g, '&quot;')}">${reasonDesc}</td>
                    `;
                    transactionsTbody.appendChild(tr);
                });

                // Add event listeners for category selects if editing is enabled
                if (canEdit) {
                    transactionsTbody.querySelectorAll('.category-select').forEach(select => {
                        select.addEventListener('change', handleCategoryChange);
                    });
                }
            }

            function renderPagination(currentPage, totalPages, totalItems) {
                pageInfoEl.textContent = `Page ${currentPage} of ${totalPages} (${totalItems} items)`;
                prevPageBtn.disabled = currentPage <= 1;
                nextPageBtn.disabled = currentPage >= totalPages;
            }

            function updateSummaryCards(aggregatedData) {
                let totalIncome = 0;
                let totalOutcome = 0;

                // Ensure aggregatedData and aggregatedData.categories exist and are arrays
                if (aggregatedData && Array.isArray(aggregatedData.categories)) {
                    aggregatedData.categories.forEach(cat => {
                        totalIncome += Number(cat.total_income) || 0;
                        totalOutcome += Number(cat.total_outcome) || 0; // Outcome is already negative
                    });
                }
                const netChange = totalIncome + totalOutcome;

                summaryIncomeEl.textContent = `${formatIsk(totalIncome)} ISK`;
                summaryOutcomeEl.textContent = `${formatIsk(Math.abs(totalOutcome))} ISK`; // Display as positive number
                summaryNetEl.textContent = `${formatIsk(netChange, true)} ISK`;
                summaryNetEl.className = `summary-value ${netChange >= 0 ? 'positive' : 'negative'}`;

                // --- Dynamic Balance Card Rendering ---
                let expectedDivisions = new Set(
                    Array.from(filterDivisionsContainer.querySelectorAll('input[type="checkbox"]:not(#div-all):checked'))
                    .map(cb => cb.value)
                );
                if (filterDivisionsContainer.querySelector('#div-all').checked || expectedDivisions.size === 0) {
                    expectedDivisions = new Set(['1', '2', '3', '4', '5', '6', '7']);
                }
                const displayedDivisions = new Set();
                summaryGrid.querySelectorAll('.summary-card[id^="summary-balance-"]').forEach(card => card.remove());
                if (aggregatedData && Array.isArray(aggregatedData.balances)) {
                    aggregatedData.balances.forEach(bal => {
                        const divisionStr = String(bal.division);
                        if (expectedDivisions.has(divisionStr)) {
                            displayedDivisions.add(divisionStr);
                            const balanceCardId = `summary-balance-${bal.division}`;
                            const card = document.createElement('div');
                            card.className = 'summary-card';
                            card.id = balanceCardId;
                            card.innerHTML = `
                                <div class="summary-label">Balance (Div ${bal.division})</div>
                                <div class="summary-value">${formatIsk(bal.balance)} ISK</div>
                            `;
                            summaryGrid.appendChild(card);
                        }
                    });
                }
                expectedDivisions.forEach(divStr => {
                    if (!displayedDivisions.has(divStr)) {
                        const balanceCardId = `summary-balance-${divStr}`;
                        const card = document.createElement('div');
                        card.className = 'summary-card';
                        card.id = balanceCardId;
                        card.innerHTML = `
                            <div class="summary-label">Balance (Div ${divStr})</div>
                            <div class="summary-value">N/A</div>
                        `;
                        summaryGrid.appendChild(card);
                    }
                });
                // --- End Dynamic Balance Card Rendering ---
            }

            // --- Chart Rendering ---
            // (renderChart, getChartClickOptions, handleCategoryChartClick, handlePayerChartClick, handleMonthlyFlowChartClick remain the same)
            // --- Chart Rendering ---
             function renderChart(canvasId, type, data, options) {
                const ctx = document.getElementById(canvasId)?.getContext('2d');
                if (!ctx) {
                    console.error(`[RenderChart] Canvas element with ID "${canvasId}" not found.`);
                    return;
                }
                if (chartInstances[canvasId]) {
                    chartInstances[canvasId].destroy();
                }

                const hasActualData = data && data.datasets && data.datasets.some(ds => ds.data && ds.data.length > 0 && ds.data.some(val => val !== 0));
                const isEmpty = !hasActualData;

                if (isEmpty) {
                    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);
                    ctx.save();
                    ctx.fillStyle = chartColors.textSecondary;
                    ctx.textAlign = 'center';
                    ctx.font = '14px Inter, sans-serif';
                    ctx.fillText('No Data Available for Selected Filters', ctx.canvas.width / 2, ctx.canvas.height / 2);
                    ctx.restore();
                    return;
                }

                try {
                    // Merge base options with provided options, ensuring plugins are merged correctly
                    const finalOptions = {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: {
                                display: false, // Default legend behavior
                                labels: { color: chartColors.textSecondary }
                            },
                            tooltip: { // Default tooltip behavior
                                callbacks: {
                                    label: ctx => `${ctx.dataset.label || ''}: ${formatIsk(ctx.raw)} ISK`
                                }
                            },
                            // Merge provided plugins
                            ...(options.plugins || {})
                        },
                        scales: { // Default scales, can be overridden
                             x: { ticks: { color: chartColors.textSecondary }, grid: { color: chartColors.borderColor } },
                             y: { ticks: { color: chartColors.textSecondary, callback: value => formatIsk(value) }, grid: { color: chartColors.borderColor } }
                        },
                         // Merge other provided options (like indexAxis, onClick)
                        ...options
                    };

                    // Clean up potential duplicate plugin definitions if onClick was passed separately
                     if (options.onClick && finalOptions.plugins.legend && finalOptions.plugins.legend.onClick) {
                         // We prioritize the legend onClick if both are somehow present
                     } else if(options.onClick) {
                         finalOptions.onClick = options.onClick; // Assign top-level onClick if no legend onClick
                     }


                    chartInstances[canvasId] = new Chart(ctx, { type, data, options: finalOptions });
                } catch (chartError) {
                    console.error(`[RenderChart] Error creating Chart.js instance for "${canvasId}":`, chartError);
                    showToast(`Error rendering chart: ${chartError.message}`, 'error');
                    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);
                    ctx.save();
                    ctx.fillStyle = chartColors.accentRed || '#f87171';
                    ctx.textAlign = 'center';
                    ctx.font = '14px Inter, sans-serif';
                    ctx.fillText('Error Rendering Chart', ctx.canvas.width / 2, ctx.canvas.height / 2);
                    ctx.restore();
                }
             }

            // --- Chart Click Options Generator ---
            function getChartClickOptions(handler) {
                // Return just the onClick handler itself
                return (event, elements) => {
                        if (elements.length > 0) {
                            const chart = elements[0].chart;
                            const elementIndex = elements[0].index;
                            handler(chart, elementIndex);
                        }
                    };
            }

            // --- Category Chart Click Handler ---
            function handleCategoryChartClick(chart, index) {
                const clickedLabel = chart.data.labels[index];
                filterCategoryText.value = clickedLabel; // Set filter input
                loadData(1); // Reload data
            }

             // --- Payer Chart Click Handler ---
            function handlePayerChartClick(chart, index) {
                 const clickedLabel = chart.data.labels[index];
                 filterParty.value = clickedLabel; // Set filter input
                 loadData(1); // Reload data
            }

            // --- Monthly Flow Chart Click Handler (for chart area click, not legend) ---
            function handleMonthlyFlowChartClick(chart, index, datasetIndex) {
                 const clickedDataset = chart.data.datasets[datasetIndex];
                 // Extract base category label (e.g., "SRP In")
                 const baseLabel = clickedDataset.label.split(' - ')[0];
                 filterCategoryText.value = baseLabel;
                 loadData(1);
            }


            // (renderMonthlyFlowChart, renderCategoryTotalsChart, renderTopPayersCountChart, renderTopPayersAmountChart, renderPayerIncomeOverTimeChart remain the same)
             // Render Monthly Flow Chart
            function renderMonthlyFlowChart(monthlyData = []) {
                const canvasId = 'monthly-flow-chart';
                const labels = [...new Set(monthlyData.map(d => d.month))].sort();
                const categories = [...new Set(monthlyData.map(d => d.category))];

                // --- MODIFIED DATASET CREATION ---
                const datasets = [];
                categories.forEach(category => {
                    const label = categoryLabels[category] || category; // Get user-friendly label
                    const color = categoryColorsJs[category] || categoryColorsJs.uncategorized;
                    const incomeData = labels.map(month => monthlyData.find(d => d.month === month && d.category === category)?.income || 0);
                    const outcomeData = labels.map(month => Math.abs(monthlyData.find(d => d.month === month && d.category === category)?.outcome || 0)); // Absolute value for outcome stack

                    const hasIncome = incomeData.some(val => val > 0);
                    const hasOutcome = outcomeData.some(val => val > 0);

                    // Only add datasets if they actually contain data for this category
                    if (hasIncome) {
                        datasets.push({
                            label: label, // Use the base category label
                            data: incomeData,
                            backgroundColor: color + 'a0', // Slightly transparent
                            borderColor: color,
                            borderWidth: 1,
                            stack: 'Income', // Stack all income together
                            categoryKey: category // Store the original key for filtering
                        });
                    }
                    if (hasOutcome) {
                         datasets.push({
                            label: label, // Use the base category label
                            data: outcomeData,
                            backgroundColor: color + 'a0', // Slightly transparent
                            borderColor: color,
                            borderWidth: 1,
                            stack: 'Outcome', // Stack all outcome together
                            categoryKey: category // Store the original key for filtering
                        });
                    }
                });
                // --- END MODIFIED DATASET CREATION ---

                renderChart(canvasId, 'bar', { labels, datasets }, {
                    plugins: {
                         title: { display: true, text: 'Monthly Income vs. Outcome by Category', color: chartColors.textPrimary, font: { size: 16 } },
                         legend: {
                             display: true,
                             position: 'top',
                             labels: {
                                color: chartColors.textSecondary,
                                // Filter labels to show only unique base category names
                                filter: function(item, chart) {
                                    // Keep only one legend item per category label
                                    return !item.text.endsWith(' - Hidden'); // Hide internal labels if needed
                                },
                                // Generate labels to show only unique category names
                                generateLabels: function(chart) {
                                    const datasets = chart.data.datasets;
                                    const uniqueLabels = new Map();
                                    datasets.forEach((dataset, index) => { // Added index
                                        if (!uniqueLabels.has(dataset.label)) {
                                            uniqueLabels.set(dataset.label, {
                                                text: dataset.label,
                                                fillStyle: dataset.backgroundColor,
                                                strokeStyle: dataset.borderColor,
                                                lineWidth: dataset.borderWidth,
                                                hidden: chart.getDatasetMeta(index).hidden, // Use index
                                                // Store indices of all datasets belonging to this label
                                                datasetIndices: [index] // Use index
                                            });
                                        } else {
                                            // Add index to existing label entry
                                            uniqueLabels.get(dataset.label).datasetIndices.push(index); // Use index
                                        }
                                    });
                                    return Array.from(uniqueLabels.values());
                                }
                             },
                             onClick: (e, legendItem, legend) => { // Modified onClick handler
                                const chart = legend.chart;
                                const clickedLabel = legendItem.text;
                                // Find all datasets associated with this label
                                const datasetIndices = legendItem.datasetIndices;

                                // Determine the new hidden state based on the first dataset found
                                const meta = chart.getDatasetMeta(datasetIndices[0]);
                                const newHidden = !meta.hidden;

                                // Toggle visibility for ALL datasets belonging to this legend item
                                datasetIndices.forEach(index => {
                                    chart.getDatasetMeta(index).hidden = newHidden;
                                });

                                chart.update();
                             }
                         },
                         tooltip: {
                            mode: 'index', intersect: false,
                            callbacks: {
                                label: function(context) {
                                    let label = context.dataset.label || ''; // Base category name
                                    const value = context.parsed.y;
                                    const isOutcome = context.dataset.stack === 'Outcome';
                                    const flowType = isOutcome ? 'Outcome' : 'Income';
                                    const categoryKey = context.dataset.categoryKey || 'uncategorized';

                                    if (label && value !== null && value !== 0) {
                                        // Find the original data point to get the signed value
                                        const originalDataPoint = monthlyData.find(d => d.month === context.label && d.category === categoryKey);
                                        const actualValue = isOutcome ? originalDataPoint?.outcome : originalDataPoint?.income;

                                        if (typeof actualValue === 'number' && !isNaN(actualValue)) {
                                             label += ` (${flowType}): ${formatIsk(actualValue, true)} ISK`; // Show signed value
                                            return label;
                                        }
                                    } return null; // Don't show tooltip label if value is 0
                                },
                                title: function(context) {
                                     if (context.length > 0) { const [year, month] = context[0].label.split('-'); const date = new Date(Date.UTC(year, month - 1, 1)); return date.toLocaleString('default', { month: 'long', year: 'numeric', timeZone: 'UTC' }); } return '';
                                }
                            }
                         }
                    },
                    scales: {
                        x: { stacked: true, ticks: { color: chartColors.textSecondary }, grid: { color: chartColors.borderColor } },
                        y: { stacked: true, ticks: { color: chartColors.textSecondary, callback: value => formatIsk(value) }, grid: { color: chartColors.borderColor }, title: {display: true, text:'ISK Amount', color: chartColors.textSecondary} }
                    },
                    interaction: { mode: 'index', intersect: false },
                    // Use the more specific click handler for bars
                     onClick: (event, elements) => {
                        if (elements.length > 0) {
                            const chart = elements[0].chart;
                            const elementIndex = elements[0].index;
                            const datasetIndex = elements[0].datasetIndex; // Get dataset index too
                            handleMonthlyFlowChartClick(chart, elementIndex, datasetIndex);
                        }
                    }
                });
            }

            // Render Category Totals Chart
            function renderCategoryTotalsChart(categoryData = []) {
                const canvasId = 'category-totals-chart';
                const labels = categoryData.map(d => categoryLabels[d.category] || d.category);
                const incomeValues = categoryData.map(d => d.total_income || 0);
                const outcomeValues = categoryData.map(d => Math.abs(d.total_outcome || 0));

                const backgroundColors = categoryData.map(d => (categoryColorsJs[d.category] || categoryColorsJs.uncategorized) + 'a0'); // Add alpha
                const borderColors = categoryData.map(d => categoryColorsJs[d.category] || categoryColorsJs.uncategorized);

                renderChart(canvasId, 'bar', {
                    labels: labels,
                    datasets: [
                        { label: 'Total Income', data: incomeValues, backgroundColor: backgroundColors, borderColor: borderColors, borderWidth: 1 },
                        { label: 'Total Outcome', data: outcomeValues, backgroundColor: backgroundColors, borderColor: borderColors, borderWidth: 1 }
                    ]
                }, {
                    indexAxis: 'y',
                    plugins: {
                         title: { display: true, text: 'Total Income/Outcome by Category (Filtered)', color: chartColors.textPrimary, font: { size: 16 } },
                         legend: {
                            display: true, // Make legend visible
                            position: 'top',
                            labels: { color: chartColors.textSecondary },
                            // Add onClick handler for the legend
                            onClick: (e, legendItem, legend) => {
                                const chart = legend.chart;
                                // Correctly get the index of the clicked bar/label
                                const index = legendItem.index;
                                const clickedLabel = chart.data.labels[index]; // Get the category label using the correct index
                                if (clickedLabel) {
                                     filterCategoryText.value = clickedLabel; // Set filter input
                                     loadData(1); // Reload data based on the click
                                }
                            }
                         },
                         tooltip: { callbacks: { label: ctx => `${ctx.dataset.label}: ${formatIsk(ctx.raw)} ISK` } }
                    },
                    scales: {
                         x: { ticks: { color: chartColors.textSecondary, callback: value => formatIsk(value) }, grid: { color: chartColors.borderColor }, title: {display: true, text:'Total ISK', color: chartColors.textSecondary} },
                         y: { ticks: { color: chartColors.textPrimary }, grid: { display: false } }
                    },
                    onClick: getChartClickOptions(handleCategoryChartClick) // Keep existing bar click handler
                });
            }


            // Render Top Payers Count Chart
            function renderTopPayersCountChart(topPayersData = []) {
                 const canvasId = 'top-payers-count-chart';
                 const labels = topPayersData.map(d => d.commander_name || 'Unknown');
                 const counts = topPayersData.map(d => d.transaction_count);
                 // Use consistent accent colors
                 const bgColors = [chartColors.accentBlue, chartColors.accentPurple, chartColors.accentYellow, chartColors.accentOrange, chartColors.accentGrey];

                 renderChart(canvasId, 'bar', {
                     labels: labels,
                     datasets: [{ label: 'Number of Payments', data: counts, backgroundColor: bgColors, borderColor: chartColors.borderColor, borderWidth: 1 }]
                 }, {
                     indexAxis: 'y',
                      plugins: {
                          title: { display: true, text: 'Top 5 Payers by Payment Count (Filtered)', color: chartColors.textPrimary, font: { size: 16 } },
                          legend: { display: false },
                          tooltip: { callbacks: { label: ctx => `${ctx.label}: ${ctx.raw} payments` } }
                      },
                     scales: {
                         x: { ticks: { color: chartColors.textSecondary, precision: 0 }, grid: { color: chartColors.borderColor }, title: {display: true, text:'Number of Payments', color: chartColors.textSecondary} },
                         y: { ticks: { color: chartColors.textPrimary }, grid: { display: false } }
                     },
                     onClick: getChartClickOptions(handlePayerChartClick) // Add click handler
                 });
             }

            // Render Top Payers Amount Chart
             function renderTopPayersAmountChart(topPayersData = []) {
                 const canvasId = 'top-payers-amount-chart';
                 const labels = topPayersData.map(d => d.commander_name || 'Unknown');
                 const amounts = topPayersData.map(d => d.total_amount);
                 // Use consistent accent colors
                 const bgColors = [chartColors.accentBlue, chartColors.accentPurple, chartColors.accentYellow, chartColors.accentOrange, chartColors.accentGrey];

                 renderChart(canvasId, 'bar', {
                     labels: labels,
                     datasets: [{ label: 'Total Amount Paid', data: amounts, backgroundColor: bgColors, borderColor: chartColors.borderColor, borderWidth: 1 }]
                 }, {
                     indexAxis: 'y',
                      plugins: {
                         title: { display: true, text: 'Top 5 Payers by Total Amount (Filtered)', color: chartColors.textPrimary, font: { size: 16 } },
                         legend: { display: false },
                         tooltip: { callbacks: { label: ctx => `${ctx.label}: ${formatIsk(ctx.raw)} ISK` } }
                      },
                     scales: {
                         x: { ticks: { color: chartColors.textSecondary, callback: value => formatIsk(value) }, grid: { color: chartColors.borderColor }, title: {display: true, text:'Total ISK Paid', color: chartColors.textSecondary} },
                         y: { ticks: { color: chartColors.textPrimary }, grid: { display: false } }
                     },
                     onClick: getChartClickOptions(handlePayerChartClick) // Add click handler
                 });
             }

             // Render Payer Income Over Time Chart
             function renderPayerIncomeOverTimeChart(payerIncomeData = []) {
                 const canvasId = 'payer-income-over-time-chart';
                 if (!Array.isArray(payerIncomeData)) payerIncomeData = [];

                 const payerNames = [...new Set(payerIncomeData.map(d => d.first_party_name || 'Unknown'))];
                 // Use consistent accent colors
                 const colors = [chartColors.accentBlue, chartColors.accentPurple, chartColors.accentYellow, chartColors.accentOrange, chartColors.accentGrey];

                 const datasets = payerNames.map((name, index) => {
                     const payerData = payerIncomeData.filter(d => (d.first_party_name || 'Unknown') === name);
                     const color = colors[index % colors.length]; // Cycle through colors
                     return {
                         label: name,
                         data: payerData.map(d => ({ x: new Date(d.date).valueOf(), y: d.daily_total_income })),
                         borderColor: color,
                         backgroundColor: color + '33', // Add alpha
                         fill: false,
                         tension: 0.1,
                         pointRadius: 4,
                     };
                 });

                 renderChart(canvasId, 'line', { datasets }, {
                     plugins: {
                         title: { display: true, text: 'Payer Income Over Time (Top 5 by Total)', color: chartColors.textPrimary, font: { size: 16 } },
                         legend: { position: 'top', labels: { color: chartColors.textSecondary } },
                         tooltip: { callbacks: { label: ctx => `${ctx.dataset.label}: ${formatIsk(ctx.parsed.y)} ISK` } }
                     },
                     scales: {
                         x: { type: 'time', time: { unit: 'day', tooltipFormat: 'MMM d, yyyy', displayFormats: { day: 'MMM d' } }, ticks: { color: chartColors.textSecondary }, grid: { color: chartColors.borderColor } },
                         y: { beginAtZero: false, ticks: { color: chartColors.textSecondary, callback: value => formatIsk(value) }, grid: { color: chartColors.borderColor }, title: {display: true, text:'Daily ISK Paid', color: chartColors.textSecondary} }
                     },
                     onClick: getChartClickOptions(handlePayerChartClick) // Add click handler
                 });
             }

            // --- Event Handlers ---
            // (loadData, handleCategoryChange, debounce remain the same)
             async function loadData(page = 1) {
                // Read ALL filters every time
                const startDate = filterStartDate.value || null;
                const endDate = filterEndDate.value || null;
                const allDivisionsCheckbox = filterDivisionsContainer.querySelector('#div-all');
                let selectedDivisions = [];
                if (!allDivisionsCheckbox.checked) {
                    selectedDivisions = Array.from(filterDivisionsContainer.querySelectorAll('input[type="checkbox"]:not(#div-all):checked')).map(cb => cb.value);
                }
                const categorySearch = filterCategoryText.value.trim() || null;
                const refType = filterType.value.trim() || null;
                const partySearch = filterParty.value.trim() || null;
                const amountExact = filterAmountExact.value ? parseFloat(filterAmountExact.value) : null;
                const reasonSearch = filterReason.value.trim() || null;

                // Update global filters state
                currentFilters = { startDate, endDate, divisions: selectedDivisions, categorySearch, refType, partySearch, amountExact, reasonSearch };

                const [transactionsResult, aggregatedResult] = await Promise.all([
                    fetchData('transactions', { ...currentFilters, page: page, limit: itemsPerPage }, 'POST'),
                    fetchData('aggregated', { startDate, endDate, divisions: selectedDivisions, categorySearch }, 'POST')
                ]);

                // Render Transactions
                if (transactionsResult && transactionsResult.success) {
                    renderTransactions(transactionsResult.transactions);
                    currentPage = transactionsResult.currentPage;
                    totalPages = transactionsResult.totalPages;
                    renderPagination(currentPage, totalPages, transactionsResult.total);
                } else {
                    renderTransactions([]); renderPagination(1, 1, 0);
                    console.error("Failed to render transactions:", transactionsResult?.message);
                }

                // Render Aggregated Data & Charts
                if (aggregatedResult && aggregatedResult.success && aggregatedResult.data) {
                    updateSummaryCards(aggregatedResult.data);
                    renderMonthlyFlowChart(aggregatedResult.data.monthly || []);
                    renderCategoryTotalsChart(aggregatedResult.data.categories || []);
                    renderTopPayersCountChart(aggregatedResult.data.topPayersByCount || []);
                    renderTopPayersAmountChart(aggregatedResult.data.topPayersByAmount || []);
                    renderPayerIncomeOverTimeChart(aggregatedResult.data.payerIncomeOverTime || []); // Render new chart
                } else {
                    updateSummaryCards({});
                    renderMonthlyFlowChart([]);
                    renderCategoryTotalsChart([]);
                    renderTopPayersCountChart([]);
                    renderTopPayersAmountChart([]);
                    renderPayerIncomeOverTimeChart([]); // Clear new chart on error
                    console.error("Failed to render aggregated data:", aggregatedResult?.message);
                }
            }


            async function handleCategoryChange(event) {
                const selectElement = event.target;
                const transactionId = selectElement.dataset.txId;
                const newCategory = selectElement.value === 'null' ? null : selectElement.value; // Handle 'uncategorized' selection
                const originalValue = selectElement.dataset.originalValue; // Get original value for revert

                selectElement.disabled = true; // Disable during processing

                const result = await fetchData('update-category', { transactionId, category: newCategory }, 'POST');

                if (result && result.success) {
                    showToast(result.message, 'success');
                    // Update successful, refresh aggregated data for accuracy
                    fetchData('aggregated', { // Re-fetch aggregated data only
                        startDate: currentFilters.startDate,
                        endDate: currentFilters.endDate,
                        divisions: currentFilters.divisions,
                        categorySearch: currentFilters.categorySearch // Pass current category filter
                    }, 'POST').then(aggResult => {
                        if (aggResult && aggResult.success && aggResult.data) {
                            updateSummaryCards(aggResult.data);
                            renderMonthlyFlowChart(aggResult.data.monthly || []);
                            renderCategoryTotalsChart(aggResult.data.categories || []);
                            renderTopPayersCountChart(aggResult.data.topPayersByCount || []);
                            renderTopPayersAmountChart(aggResult.data.topPayersByAmount || []);
                            renderPayerIncomeOverTimeChart(aggResult.data.payerIncomeOverTime || []); // Re-render
                        }
                    });
                    // Update the visual style and original value attribute
                    const categoryKey = newCategory || 'uncategorized';
                    const categoryClass = `category-${categoryKey}`;
                    selectElement.className = `category-select ${categoryClass}`; // Update class directly
                    selectElement.dataset.originalValue = selectElement.value; // Update original value attr

                } else {
                    showToast(result?.message || 'Failed to update category.', 'error');
                    // Revert UI on failure
                    selectElement.value = originalValue || 'null'; // Revert to original value
                    const revertedKey = selectElement.value === 'null' ? 'uncategorized' : selectElement.value;
                    const revertedClass = `category-select category-${revertedKey}`; // Fixed class name construction
                    selectElement.className = revertedClass; // Make sure to update the class to reflect the reverted category
                }
                selectElement.disabled = false; // Re-enable select
            }

            // Debounce function
            function debounce(func, delay) {
                let timeout;
                return function(...args) {
                    const context = this;
                    clearTimeout(timeout);
                    timeout = setTimeout(() => func.apply(context, args), delay);
                };
            }

            // Debounced load function for text inputs
            const debouncedLoadData = debounce(() => loadData(1), 500); // 500ms delay

            // --- Event Listeners ---
            // (Filter listeners remain the same)
             // Listeners for primary filters (Date, Checkboxes) trigger on 'change' and reload data
            [filterStartDate, filterEndDate, filterDivisionsContainer].forEach(el => {
                el.addEventListener('change', () => loadData(1));
            });

            // Special handling for "All" checkbox
            const allDivCheckbox = filterDivisionsContainer.querySelector('#div-all');
            const otherDivCheckboxes = filterDivisionsContainer.querySelectorAll('input[type="checkbox"]:not(#div-all)');
            allDivCheckbox.addEventListener('change', () => {
                if (allDivCheckbox.checked) {
                    otherDivCheckboxes.forEach(cb => cb.checked = false); // Uncheck others if 'All' is checked
                }
                 loadData(1); // Trigger reload
            });
            otherDivCheckboxes.forEach(cb => {
                cb.addEventListener('change', () => {
                    if (cb.checked) {
                        allDivCheckbox.checked = false; // Uncheck 'All' if a specific one is checked
                    } else {
                        // If *no* specific checkboxes are checked, re-check 'All'
                        const anyChecked = Array.from(otherDivCheckboxes).some(el => el.checked);
                        if (!anyChecked) {
                            allDivCheckbox.checked = true;
                        }
                    }
                    loadData(1); // Trigger reload
                });
            });

            // Debounced listeners for secondary, text-based filters
            [filterType, filterParty, filterAmountExact, filterReason, filterCategoryText].forEach(el => {
                el.addEventListener('input', debouncedLoadData);
            });

            // Pagination buttons
            prevPageBtn.addEventListener('click', () => { if (currentPage > 1) loadData(currentPage - 1); });
            nextPageBtn.addEventListener('click', () => { if (currentPage < totalPages) loadData(currentPage + 1); });


            // WebSocket Listener
            const socket = io();
            socket.on('connect', () => console.log('Wallet Monitor connected to WebSocket.'));
            socket.on('wallet-update', () => {
                console.log('Received wallet-update event. Reloading page.');
                showToast('Wallet data updated, reloading...', 'info');
                // Reload the page to get the new countdown time and data
                setTimeout(() => {
                    window.location.reload();
                }, 1000); // Small delay before reload
            });
            socket.on('disconnect', () => console.log('Wallet Monitor disconnected from WebSocket.'));

            // --- Initial Load ---
            // (Initialization logic remains mostly the same)
             initializeJsColors(); // Initialize colors after DOM is ready

            // --- Default Date Filter Logic ---
            const today = new Date();
            const year = today.getFullYear();
            const month = today.getMonth(); // 0-indexed month

            // First day of current month
            const firstDayOfMonth = new Date(year, month, 1);
            const startDateStr = firstDayOfMonth.toISOString().split('T')[0]; // Format YYYY-MM-DD

            // Last day of current month
            const lastDayOfMonth = new Date(year, month + 1, 0); // Day 0 of next month is last day of current
            const endDateStr = lastDayOfMonth.toISOString().split('T')[0]; // Format YYYY-MM-DD

            filterStartDate.value = startDateStr;
            filterEndDate.value = endDateStr;
            // --- End Default Date Filter Logic ---

            // Initial state: "All" is checked
            allDivCheckbox.checked = true;
            otherDivCheckboxes.forEach(cb => cb.checked = false);

            startCountdown(); // Start the countdown timer
            loadData(1); // Load initial data using the default filters

        });
    </script>
</body>
</html>

